---
name: Check Broken Links

on:
  schedule:
    # Run every Monday at 8:00 AM UTC (3:00 AM EST)
    - cron: '0 8 * * MON'
  workflow_dispatch:
    # Allow manual triggering

jobs:
  check-broken-links:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET 9
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'
          cache: true
          cache-dependency-path: '**/packages.lock.json'

      - name: Restore dependencies
        run: dotnet restore --locked-mode

      - name: Build F# project
        run: dotnet build --no-restore

      - name: Run broken link checker
        id: check-links
        run: |
          echo "🔍 Running broken link checker..."
          echo "📋 Output will be captured for analysis"
          
          # Run the F# script directly and capture both stdout and stderr
          if dotnet fsi Scripts/check-broken-links.fsx > link_check_output.txt 2>&1; then
            echo "✅ Link checker completed successfully"
            EXIT_CODE=0
          else
            echo "❌ Link checker failed with errors"
            EXIT_CODE=1
          fi
          
          # Display the output for debugging
          echo ""
          echo "=== BROKEN LINK CHECKER OUTPUT ==="
          cat link_check_output.txt
          echo "=== END OUTPUT ==="
          echo ""
          
          # Extract broken link count from output
          BROKEN_COUNT=$(grep "Broken links:" link_check_output.txt | sed 's/.*Broken links: //' || echo "0")
          
          echo "📊 Analysis: Found $BROKEN_COUNT broken links"
          echo "broken_count=$BROKEN_COUNT" >> $GITHUB_OUTPUT
          echo "results_file=link_check_output.txt" >> $GITHUB_OUTPUT
          
          # Exit with the original exit code
          exit $EXIT_CODE

      - name: Create GitHub issue for broken links
        if: steps.check-links.outputs.broken_count > 0
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const resultsFile = '${{ steps.check-links.outputs.results_file }}';

            // Read the full results
            const fullOutput = fs.readFileSync(resultsFile, 'utf8');

            // Extract the GitHub issue format section
            const issueStartIndex = fullOutput.indexOf(
              '=== GITHUB ISSUE FORMAT ===');
            let issueBody = '';

            if (issueStartIndex !== -1) {
              issueBody = fullOutput.substring(
                issueStartIndex + '=== GITHUB ISSUE FORMAT ==='.length
              ).trim();
            } else {
              // Fallback if the format section is not found
              issueBody = `## Broken Links Found

            The automated link checker found ${{ steps.check-links.outputs.broken_count }} broken links.

            \`\`\`
            ${fullOutput}
            \`\`\``;
            }

            // Create the issue
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Broken Links Report - ${new Date().toISOString().split('T')[0]}`,
              body: issueBody,
              labels: ['maintenance', 'broken-links']
            });

            console.log(`Created issue #${issue.data.number} for broken links`);

      - name: Add comment if no broken links
        if: steps.check-links.outputs.broken_count == 0
        run: |
          echo "🎉 No broken links found! All links are working correctly."

      - name: Clean up temporary files
        if: always()
        run: |
          rm -f link_check_output.txt