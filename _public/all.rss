<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>Luis Quintanilla - All Updates</title>
    <link>https://www.luisquintanilla.me/feed</link>
    <description>All content updates from Luis Quintanilla's website</description>
    <lastBuildDate>2025-08-18 19:31 -05:00</lastBuildDate>
    <language>en</language>
    <item>
      <title>Reflections on the social web</title>
      <description>&lt;![CDATA[[reshare] &lt;blockquote class="blockquote"&gt;
&lt;p&gt;The work of a product team, when working with new technology, is to abstract away as much of this complexity as possible, so that it feels friendly and approachable to new people.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote class="blockquote"&gt;
&lt;p&gt;My strongest belief about the social web is that if we want it to succeed, we have to keep lowering the barrier to entry.&lt;/p&gt;
&lt;/blockquote&gt;
]]&gt;</description>
      <link>https://www.luisquintanilla.me/responses/reflections-on-social-web</link>
      <guid>https://www.luisquintanilla.me/responses/reflections-on-social-web</guid>
      <pubDate>2025-08-18 19:31 -05:00</pubDate>
      <category>ghost</category>
      <category>socialweb</category>
      <category>indieweb</category>
    </item>
    <item>
      <title>Ghost 6.0</title>
      <description>&lt;![CDATA[[reshare] &lt;blockquote class="blockquote"&gt;
&lt;p&gt;In Ghost 6.0 we're introducing another new distribution channel: The social web. Now, millions of people can discover, follow, like and reply to your posts from any supported social web client - including Bluesky, Mastodon, Threads, Flipboard, Ghost, WordPress, Surf, WriteFreely, and many more.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote class="blockquote"&gt;
&lt;p&gt;Just as people can visit your Ghost website in any browser, subscribe with any feed reader, or receive newsletters in any email client, they can now follow your Ghost publication from any social web client.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote class="blockquote"&gt;
&lt;p&gt;Unlike closed platforms with restrictive algorithms, open web protocols create a direct connection between you and your subscribers which you have full control over.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote class="blockquote"&gt;
&lt;p&gt;If you've been around on the web for while, and you can remember back that far... you might even call it the return of the blogosphere.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Love the introduction of social components to the Ghost platform. I'm so ready for the return of the blogosphere and the return to open protocols.&lt;/p&gt;
]]&gt;</description>
      <link>https://www.luisquintanilla.me/responses/ghost-6-changelog</link>
      <guid>https://www.luisquintanilla.me/responses/ghost-6-changelog</guid>
      <pubDate>2025-08-18 19:24 -05:00</pubDate>
      <category>ghost</category>
      <category>fediverse</category>
      <category>socialweb</category>
      <category>publishing</category>
    </item>
    <item>
      <title>The newly redesigned Blogroll Club</title>
      <description>&lt;![CDATA[[star] ]]&gt;</description>
      <link>https://www.luisquintanilla.me/responses/newly-redesigned-blogroll</link>
      <guid>https://www.luisquintanilla.me/responses/newly-redesigned-blogroll</guid>
      <pubDate>2025-08-18 19:21 -05:00</pubDate>
      <category>blogrollclub</category>
      <category>blogroll</category>
      <category>indieweb</category>
      <category>socialweb</category>
    </item>
    <item>
      <title>FediCon 2025 Videos</title>
      <description>&lt;![CDATA[[bookmark] ]]&gt;</description>
      <link>https://www.luisquintanilla.me/responses/fedicon-2025-videos</link>
      <guid>https://www.luisquintanilla.me/responses/fedicon-2025-videos</guid>
      <pubDate>2025-08-18 18:53 -05:00</pubDate>
      <category>fediverse</category>
      <category>fedicon2025</category>
      <category>conference</category>
    </item>
    <item>
      <title>HOPE 16 Conference Videos</title>
      <description>&lt;![CDATA[[bookmark] ]]&gt;</description>
      <link>https://www.luisquintanilla.me/responses/hope-16-videos</link>
      <guid>https://www.luisquintanilla.me/responses/hope-16-videos</guid>
      <pubDate>2025-08-18 18:53 -05:00</pubDate>
      <category>hope</category>
      <category>hacker</category>
      <category>conference</category>
    </item>
    <item>
      <title>FediUrbanism — Johanna Botari — FediCon 2025</title>
      <description>&lt;![CDATA[[reshare] &lt;p&gt;I really enjoyed this talk by &lt;a href="https://cosocial.ca/@johannab"&gt;@johannab&lt;/a&gt; on the concept of FediUrbanism.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://spectra.video/w/f7GBsBf3nAhF8WfTMWUEXm" title="Thumbnail of FediUrbanism Talk Recording"&gt;&lt;img src="https://spectra.video/lazy-static/previews/40a5e4bd-f8d7-438a-b35c-0c81e753ddbd.jpg" class="img-fluid" alt="Thumbnail of FediUrbanism Talk Recording" /&gt;&lt;/a&gt;&lt;/p&gt;
]]&gt;</description>
      <link>https://www.luisquintanilla.me/responses/fediurbanism-fedicon-2025</link>
      <guid>https://www.luisquintanilla.me/responses/fediurbanism-fedicon-2025</guid>
      <pubDate>2025-08-18 18:36 -05:00</pubDate>
      <category>fediurbanism</category>
      <category>fedicon2025</category>
      <category>fediverse</category>
      <category>thirdspace</category>
      <category>community</category>
    </item>
    <item>
      <title>Deploy Owncast to Azure Container Apps with Persistent Storage</title>
      <description>&lt;![CDATA[&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;This guide shows how to deploy Owncast to Azure Container Apps with persistent storage and scale-to-zero capability to minimize costs.&lt;/p&gt;
&lt;h2&gt;Prerequisites&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Azure CLI installed and logged in&lt;/li&gt;
&lt;li&gt;An Azure subscription&lt;/li&gt;
&lt;li&gt;A resource group created&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Step 1: Create Required Resources&lt;/h2&gt;
&lt;h3&gt;Create Storage Account for Persistent Data&lt;/h3&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;# Set variables (choose cheapest regions)
RESOURCE_GROUP=&amp;quot;your-resource-group&amp;quot;
LOCATION=&amp;quot;centralus&amp;quot;  # Often cheaper than eastus
STORAGE_ACCOUNT=&amp;quot;owncaststorage$(date +%s)&amp;quot;  # Must be globally unique
CONTAINER_APP_ENV=&amp;quot;owncast-env&amp;quot;
CONTAINER_APP_NAME=&amp;quot;owncast-app&amp;quot;

# Create MINIMAL cost storage account
az storage account create \
  --name $STORAGE_ACCOUNT \
  --resource-group $RESOURCE_GROUP \
  --location $LOCATION \
  --sku Standard_LRS \
  --kind StorageV2 \
  --access-tier Cool \
  --allow-blob-public-access false \
  --https-only true \
  --min-tls-version TLS1_2

# Create file share with minimal provisioned size
az storage share create \
  --name &amp;quot;owncast-data&amp;quot; \
  --account-name $STORAGE_ACCOUNT \
  --quota 1  # Start with 1GB, scales automatically
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Create Container Apps Environment&lt;/h3&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;# Create the Container Apps environment
az containerapp env create \
  --name $CONTAINER_APP_ENV \
  --resource-group $RESOURCE_GROUP \
  --location $LOCATION
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Step 2: Configure Storage Mount&lt;/h2&gt;
&lt;p&gt;Get the storage account key and create the storage mount:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;# Get storage account key
STORAGE_KEY=$(az storage account keys list \
  --account-name $STORAGE_ACCOUNT \
  --resource-group $RESOURCE_GROUP \
  --query &amp;quot;[0].value&amp;quot; -o tsv)

# Create storage mount in the environment
az containerapp env storage set \
  --name $CONTAINER_APP_ENV \
  --resource-group $RESOURCE_GROUP \
  --storage-name &amp;quot;owncast-storage&amp;quot; \
  --azure-file-account-name $STORAGE_ACCOUNT \
  --azure-file-account-key $STORAGE_KEY \
  --azure-file-share-name &amp;quot;owncast-data&amp;quot; \
  --access-mode ReadWrite
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Step 3: Deploy Owncast Container App&lt;/h2&gt;
&lt;p&gt;Create the container app with persistent storage:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;az containerapp create \
  --name $CONTAINER_APP_NAME \
  --resource-group $RESOURCE_GROUP \
  --environment $CONTAINER_APP_ENV \
  --image &amp;quot;owncast/owncast:latest&amp;quot; \
  --target-port 8080 \
  --ingress external \
  --min-replicas 0 \
  --max-replicas 1 \
  --cpu 0.5 \
  --memory 1Gi \
  --volume-mount &amp;quot;data:/app/data&amp;quot; \
  --volume-name &amp;quot;data&amp;quot; \
  --volume-storage-name &amp;quot;owncast-storage&amp;quot; \
  --volume-storage-type AzureFile
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Step 4: Configure Dual-Port Ingress (HTTP + RTMP)&lt;/h2&gt;
&lt;p&gt;For Owncast to work properly, you need both HTTP (8080) and RTMP (1935) ports. This requires a &lt;strong&gt;Virtual Network (VNet)&lt;/strong&gt; integration:&lt;/p&gt;
&lt;h3&gt;Create VNet and Subnet&lt;/h3&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;# Create MINIMAL virtual network (smallest possible address space)
az network vnet create \
  --name &amp;quot;owncast-vnet&amp;quot; \
  --resource-group $RESOURCE_GROUP \
  --location $LOCATION \
  --address-prefix &amp;quot;10.0.0.0/24&amp;quot;  # Smaller than default /16

# Create minimal subnet
az network vnet subnet create \
  --name &amp;quot;container-apps-subnet&amp;quot; \
  --resource-group $RESOURCE_GROUP \
  --vnet-name &amp;quot;owncast-vnet&amp;quot; \
  --address-prefix &amp;quot;10.0.0.0/27&amp;quot;  # Only 32 IPs instead of /23 (512 IPs)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Recreate Container Apps Environment with VNet&lt;/h3&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;# Get subnet ID
SUBNET_ID=$(az network vnet subnet show \
  --name &amp;quot;container-apps-subnet&amp;quot; \
  --vnet-name &amp;quot;owncast-vnet&amp;quot; \
  --resource-group $RESOURCE_GROUP \
  --query id -o tsv)

# Delete existing environment and recreate with VNet
az containerapp env delete \
  --name $CONTAINER_APP_ENV \
  --resource-group $RESOURCE_GROUP \
  --yes

# Create Container Apps environment with workload profiles DISABLED (cheapest option)
az containerapp env create \
  --name $CONTAINER_APP_ENV \
  --resource-group $RESOURCE_GROUP \
  --location $LOCATION \
  --infrastructure-subnet-resource-id $SUBNET_ID \
  --enable-workload-profiles false  # Forces consumption-only pricing
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Deploy Container App with MINIMAL Resources&lt;/h3&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;az containerapp create \
  --name $CONTAINER_APP_NAME \
  --resource-group $RESOURCE_GROUP \
  --environment $CONTAINER_APP_ENV \
  --image &amp;quot;owncast/owncast:latest&amp;quot; \
  --target-port 8080 \
  --exposed-port 1935 \
  --ingress external \
  --transport auto \
  --min-replicas 0 \
  --max-replicas 1 \
  --cpu 0.25 \
  --memory 0.5Gi \
  --volume-mount &amp;quot;data:/app/data&amp;quot; \
  --volume-name &amp;quot;data&amp;quot; \
  --volume-storage-name &amp;quot;owncast-storage&amp;quot; \
  --volume-storage-type AzureFile
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Cost-Optimized Resource Allocation:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;CPU&lt;/strong&gt;: 0.25 cores (minimum allowed, sufficient for small streams)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Memory&lt;/strong&gt;: 0.5Gi (minimum allowed, will work for basic streaming)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Scaling&lt;/strong&gt;: Aggressive scale-to-zero with max 1 replica&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Ultra Low-Cost Alternative YAML Configuration&lt;/h2&gt;
&lt;p&gt;For maximum cost optimization, use this YAML approach with the smallest possible resource allocation:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-yaml"&gt;# owncast-minimal-cost.yaml
properties:
  managedEnvironmentId: /subscriptions/{subscription-id}/resourceGroups/{resource-group}/providers/Microsoft.App/managedEnvironments/{environment-name}
  configuration:
    ingress:
      external: true
      targetPort: 8080
      additionalPortMappings:
      - external: true
        targetPort: 1935
        exposedPort: 1935
    secrets: []
  template:
    containers:
    - image: owncast/owncast:latest
      name: owncast
      resources:
        cpu: 0.25
        memory: 0.5Gi
      volumeMounts:
      - mountPath: /app/data
        volumeName: data
      env:
      - name: OWNCAST_RTMP_PORT
        value: &amp;quot;1935&amp;quot;
      - name: OWNCAST_WEBSERVER_PORT  
        value: &amp;quot;8080&amp;quot;
    scale:
      minReplicas: 0
      maxReplicas: 1
      rules:
      - name: &amp;quot;http-rule&amp;quot;
        http:
          metadata:
            concurrentRequests: &amp;quot;10&amp;quot;  # Scale up quickly but keep minimal
    volumes:
    - name: data
      storageType: AzureFile
      storageName: owncast-storage
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Deploy with:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;az containerapp create \
  --name $CONTAINER_APP_NAME \
  --resource-group $RESOURCE_GROUP \
  --yaml owncast-minimal-cost.yaml
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Cost Optimization Features&lt;/h2&gt;
&lt;h3&gt;Scale-to-Zero Configuration&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Min Replicas&lt;/strong&gt;: Set to 0 to completely scale down when not in use&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Max Replicas&lt;/strong&gt;: Set to 1 (Owncast doesn't need horizontal scaling)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Scale Rules&lt;/strong&gt;: Container Apps will automatically scale up when requests arrive&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Resource Limits (Ultra Cost-Optimized)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;CPU&lt;/strong&gt;: 0.25 cores (absolute minimum, sufficient for 1-2 viewer streams)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Memory&lt;/strong&gt;: 0.5Gi (minimum allowed by Azure Container Apps)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Storage&lt;/strong&gt;: Cool tier with 1GB initial quota (auto-scales as needed)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Network&lt;/strong&gt;: Minimal VNet addressing to reduce overhead&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;OBS Configuration&lt;/h2&gt;
&lt;p&gt;After deployment, configure OBS for streaming:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Server Settings&lt;/strong&gt;: Use &lt;code&gt;rtmp://your-app-url:1935/live&lt;/code&gt; (note: &lt;code&gt;rtmp://&lt;/code&gt; not &lt;code&gt;https://&lt;/code&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Stream Key&lt;/strong&gt;: Use the key from Owncast admin panel (Configuration &amp;gt; Server Setup &amp;gt; Stream Keys)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Owncast Web Interface&lt;/strong&gt;: Access at &lt;code&gt;https://your-app-url&lt;/code&gt; (port 8080 is handled automatically by ingress)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Persistent Data&lt;/strong&gt;: All Owncast configuration, database, and uploaded files are stored in Azure Files and persist across container restarts and scale-to-zero events.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Cold Start&lt;/strong&gt;: When scaling from zero, there will be a brief cold start delay as the container initializes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;VNet Requirement&lt;/strong&gt;: For dual-port access (HTTP + RTMP), you &lt;strong&gt;must&lt;/strong&gt; use a Virtual Network integration. This is a requirement for exposing additional TCP ports in Azure Container Apps.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Security Configuration&lt;/strong&gt;: After deployment, immediately change the default admin credentials:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Navigate to &lt;code&gt;https://your-app-url/admin&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Default login: &lt;code&gt;admin&lt;/code&gt; / &lt;code&gt;abc123&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Go to Configuration &amp;gt; Server Setup and change the admin password&lt;/li&gt;
&lt;li&gt;Create/copy stream keys from Configuration &amp;gt; Server Setup &amp;gt; Stream Keys tab&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Custom Domain&lt;/strong&gt;: You can configure a custom domain using:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;az containerapp hostname add \
  --name $CONTAINER_APP_NAME \
  --resource-group $RESOURCE_GROUP \
  --hostname &amp;quot;your-domain.com&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;SSL Certificate&lt;/strong&gt;: Azure Container Apps provides automatic SSL certificates for custom domains.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Monitoring and Troubleshooting&lt;/h2&gt;
&lt;p&gt;Check your deployment:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;# Get the URL
az containerapp show \
  --name $CONTAINER_APP_NAME \
  --resource-group $RESOURCE_GROUP \
  --query properties.configuration.ingress.fqdn

# View logs
az containerapp logs show \
  --name $CONTAINER_APP_NAME \
  --resource-group $RESOURCE_GROUP
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Cost Estimation (Ultra-Optimized)&lt;/h2&gt;
&lt;p&gt;With these optimizations, your monthly costs should be:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;When Streaming (4 hours/month example):&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Compute&lt;/strong&gt;: ~$0.50/month (0.25 CPU + 0.5Gi RAM × 4 hours)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Container Apps Environment&lt;/strong&gt;: ~$0.00 (consumption plan, no dedicated resources)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Networking&lt;/strong&gt;: ~$0.05/month (minimal VNet overhead)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;When Idle (Scale-to-Zero):&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Compute&lt;/strong&gt;: $0.00 (scaled to zero)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Environment&lt;/strong&gt;: $0.00 (consumption plan)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Always-On Costs:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Storage&lt;/strong&gt;: ~$0.05-0.10/month (1-2GB in Cool tier)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;VNet&lt;/strong&gt;: ~$0.00 (no gateways or dedicated resources)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Total Monthly Cost: ~$0.60-0.65/month&lt;/strong&gt; (assuming 4 hours of streaming)&lt;/p&gt;
&lt;h3&gt;Performance Expectations at Minimal Resources:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;0.25 CPU + 0.5Gi RAM&lt;/strong&gt;: Suitable for 480p-720p streams with 1-5 concurrent viewers&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Scale-up Path&lt;/strong&gt;: Monitor performance and increase to 0.5 CPU + 1Gi if needed&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cold Start&lt;/strong&gt;: ~10-15 seconds when scaling from zero (acceptable for personal streaming)&lt;/li&gt;
&lt;/ul&gt;
]]&gt;</description>
      <link>https://www.luisquintanilla.me/resources/snippets/owncast-optimized-azure-deployment-guide</link>
      <guid>https://www.luisquintanilla.me/resources/snippets/owncast-optimized-azure-deployment-guide</guid>
      <pubDate>2025-08-14 13:35 -05:00</pubDate>
      <category>owncast</category>
      <category>fediverse</category>
      <category>azure</category>
      <category>livestream</category>
    </item>
    <item>
      <title>Introducing Gemma 3 270M</title>
      <description>&lt;![CDATA[[reshare] &lt;blockquote class="blockquote"&gt;
&lt;p&gt;Today, we're adding a new, highly specialized tool to the Gemma 3 toolkit: Gemma 3 270M, a compact, 270-million parameter model designed from the ground up for task-specific fine-tuning with strong instruction-following and text structuring capabilities already trained in.&lt;/p&gt;
&lt;/blockquote&gt;
]]&gt;</description>
      <link>https://www.luisquintanilla.me/responses/introducing-gemma-3-270m</link>
      <guid>https://www.luisquintanilla.me/responses/introducing-gemma-3-270m</guid>
      <pubDate>2025-08-14 12:40</pubDate>
      <category>ai</category>
      <category>google</category>
      <category>gemma</category>
      <category>slm</category>
      <category>genai</category>
    </item>
    <item>
      <title>Mobile-First Static Site Publishing: Discord Bot Pipeline via Azure and GitHub</title>
      <description>&lt;![CDATA[
## The problem

Ever since I published my [first note](/notes/hello-world)([microblog post](https://indieweb.org/note)) on my website, I've always wanted a way to quickly publish while on the go. Unfortunately, I never found a good solution. 

Because my website is statically generated and the source is hosted on GitHub(check out the [colophon](/colophon) for more details), there is no backend for me to talk to. At the same time, I didn't want to build an entire backend to support my website because I want to keep things as lean and cost-efficient as possible. 

Since my posts are just frontmatter and Markdown, I [use VS Code as my editor](/uses). For some time, back when I used to have a Surface Duo, I [authored posts from mobile using the github.dev experience](https://www.lqdev.me/notes/surface-duo-blogging-github-dev). On two screens, while not ideal, it was manageable. After switching devices (because sadly there were no more security updates on the Surface Duo) and upgrading to a dumbphone and later a single screen smartphone, that workflow wasn't feasible.

At that point, what I resorted to was sending messages to myself via [Element](https://element.io/). The message would contain a link I wanted to check out later. Once I was on my laptop, I would check out the link and if I wanted to post about it on my website, I'd do so then. 

That process, while it worked, wasn't necessarily scalable. In part that's a feature because I could spend more time digesting the content and writing a thoughtful article. However, it stopped me from sharing more in the moment and there were posts that were never authored or bookmarks that weren't captured because eventually that link got lost in the river of other links. 

Basically what I wanted to replicate was the more instant posting that social media gives you, but do so on my own site. 

That led me to doing some thinking and requirement gathering around the type of experience I wanted to have.

## Requirements

When it came to requirements for my solution, I was focused more on the workflow and experience rather on technical details. 

Here is a list of those solution requirements:

- Mobile is the primary publishing interface. Desktop publishing is a nice to have.
- Be as low-friction as sharing a link via Element or posting on social media
- Doesn't require implementing my own client or frontend
- Doesn't require me to use existing micropub clients
- Handles short-form and media posts supported by my website
    - Notes
    - Responses
        - Repost
        - Reply
        - Like
    - Bookmark
    - Media
        - Image
        - Audio (not used as often but technically supported)
        - Video (not used as often but technically supported)
- Low-cost

## The solution

For years, I had been struggling with actually implementing this system. The main part that gave me pause was not implementing my own client or relying on existing micropub clients. 

Eventually, I just accepted that it might never happen. 

One day, it eventually hit me. If the notes to self Element workflow worked so well, why not use a chat client as the frontend for publishing. At least have it serve as the capture system that would then format the content into a post that gets queued for publishing on GitHub. I'd seen [Benji do something similar with his micropub endpoint](https://github.com/benjifs/serverless-micropub). 

While I could've used Element since that's my preferred platform, I've been contemplating no longer hosting my own Matrix server. So if I went through with this, I'd want something that I didn't feel bad about investing the time on this solution if that chat client went away. 

That then left me with Discord as the next best option. Primarily because of its support for bots as well as its cross-platform support across mobile and desktop. 

In the end, the solution then ended up being fairly straightforward. 

More importantly, with the help of AI, I wrote none of the code. 

Using Copilot and Claude Sonnet 4, I was able to go from idea to deployment in 1-2 days. At that time the solution supported all of the posts except for media which I hadn't figured out what the best way of uploading media through Discord was. Figuring that out, implementing it, and deploying it took another day or two. 

Since I wanted for my solution to be as low-cost as possible, serverless seemed like a good option. I only pay for compute when it's actually being used which can be infrequent in my case. I don't need the server running 24/7 or even to be powerful. However, I didn't want to write my system as an Azure Function. I wanted the flexibility of deploying on a shared VM or container. A VM though wasn't an option since it's running 24/7. Keeping all of that in mind, my choice was narrowed down to Azure Container Apps which gave me the characteristics I was looking for. Serverless containers. 

Once that decision was made, I used Copilot again to figure out how to optimize my container image so that it's space and resource efficient. And while at it, I used Copilot again to figure out the right incantations to get the container deployed to Azure Container Apps. 

All-in-all, the solution had been staring at me in the face since I already had a workflow that for the most part worked for me, it just needed some optimizations and with the help of AI, I was able to quickly build and deploy something I'd been ruminating over for years.  

## Workflow

The workflow for publishing is as follows:

1. Invoke the bot in Discord to capture my input using slash command `/post` and the respective post type.

    ![Using slash commands to invoke discord publishing bot](/files/images/invoke-discord-publishing-bot.png)

1. Provide post details. For media posts, I can provide an attachment which gets uploaded to Azure Blob Storage.

    ![A modal in discord with note post fields filled in](/files/images/discord-publishing-client-modal.png)

1. [Bot creates a branch and PR in my repo](https://github.com/lqdev/luisquintanilla.me/pull/152) with the post content
1. While logged into GitHub from my phone, if everything looks good, I merge the PR which kicks off my GitHub Actions workflow to build and publish the site including the new post. 
1. Post [displays on my website](/media/test-media-post-from-mobile/).

## Challenges

The solution is not perfect. 

One of the problems I've run into is cold-start. Since I scale my solution down to zero when it's not being used to save on costs, I suffer from the cold start problem. Therefore, when I first invoke the bot, it fails. I have to give it a few seconds and retry the invocation. It's usually about 5 seconds so it's not a huge issue but it does add some friction. 

## Next steps

Overall I'm happy with my solution but there are a few improvements I'd like to make.

- **Open-source the repo** - Currently I've kept the repo private since it was all AI generated. Since my system is already in production and processes were documented, I need to do a more thorough pass to make sure that no secrets or credentials are checked in or documented anywhere.
- **Improve UX** - Discord limits modal fields to 5. Therefore, I'm playing around with the right balance between how much of the input should come from slash commands and how much should come from the modal.
- **Expand supported post types** - I'd like to expand the number of posts supported by my publishing client. Reviews are a good example of the type of post I'd like to support as well as RSVPs. [Reviews I already support](https://www.lqdev.me/reviews) on my website but RSVPs I don't yet. Also, I'd have to fix my Webmentions which are currently broken after [upgrading my website](/notes/hello-world-new-site-2025-08/). 
- **Make it generator agnostic** - Currently this only works for my website. With a few tweaks and refactoring, I think I can get the project to a place where it should work with other popular static site generators. 
- **One-click deployment** - Currently the solution is packaged up as a container so it can be deployed from anywhere. I want to make it even simpler to deploy. One click if possible. 

]]&gt;</description>
      <link>https://www.luisquintanilla.me/posts/website-mobile-publishing-discord-client</link>
      <guid>https://www.luisquintanilla.me/posts/website-mobile-publishing-discord-client</guid>
      <pubDate>2025-08-14 01:45 -05:00</pubDate>
      <category>discord</category>
      <category>azure</category>
      <category>indieweb</category>
      <category>mobile</category>
      <category>microblogging</category>
      <category>web</category>
      <category>bot</category>
      <category>aca</category>
      <category>azurecontainerapps</category>
    </item>
    <item>
      <title>I Deleted My Second Brain</title>
      <description>&lt;![CDATA[[star] &lt;blockquote class="blockquote"&gt;
&lt;p&gt;I don’t build a second brain. I inhabit the first.&lt;/p&gt;
&lt;/blockquote&gt;
]]&gt;</description>
      <link>https://www.luisquintanilla.me/responses/i-deleted-my-second-brain</link>
      <guid>https://www.luisquintanilla.me/responses/i-deleted-my-second-brain</guid>
      <pubDate>2025-08-13 08:03</pubDate>
      <category>pkm</category>
      <category>notes</category>
      <category>secondbrain</category>
    </item>
    <item>
      <title>Test media post from mobile</title>
      <description>&lt;![CDATA[Album containing 0 photos]]&gt;</description>
      <link>https://www.luisquintanilla.me/media/test-media-post-from-mobile</link>
      <guid>https://www.luisquintanilla.me/media/test-media-post-from-mobile</guid>
      <pubDate>2025-08-12 22:40 -05:00</pubDate>
      <category>mobile</category>
      <category>blog</category>
      <category>indieweb</category>
    </item>
    <item>
      <title>Engineering for Slow Internet</title>
      <description>&lt;![CDATA[[reply] &lt;blockquote class="blockquote"&gt;
&lt;p&gt;Does this webapp really need to be 20 MB? What all is being loaded that could be deferred until it is needed, or included in an “optional” add-on bundle? Is there a possibility of a “lite” version, for bandwidth-constrained users?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;While Antarctica is an edge case, this article illustrates some of the motivations behind my &lt;a href="https://www.luisquintanilla.me/text"&gt;text-first website&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;By trimming the excess not only do you get to the core of the app or website, but it also loads faster.&lt;/p&gt;
]]&gt;</description>
      <link>https://www.luisquintanilla.me/responses/engineering-for-slow-internet</link>
      <guid>https://www.luisquintanilla.me/responses/engineering-for-slow-internet</guid>
      <pubDate>2025-08-12 08:41</pubDate>
      <category>slowweb</category>
      <category>performance</category>
      <category>internet</category>
      <category>computing</category>
    </item>
    <item>
      <title>Awesome Self-Hosted</title>
      <description>&lt;![CDATA[[bookmark] &lt;blockquote class="blockquote"&gt;
&lt;p&gt;This is a list of Free Software network services and web applications which can be hosted on your own server(s).&lt;/p&gt;
&lt;/blockquote&gt;
]]&gt;</description>
      <link>https://www.luisquintanilla.me/responses/awesome-self-hosted</link>
      <guid>https://www.luisquintanilla.me/responses/awesome-self-hosted</guid>
      <pubDate>2025-08-11 23:24</pubDate>
      <category>selfhosting</category>
      <category>opensource</category>
      <category>FOSS</category>
    </item>
    <item>
      <title>Stop saving everything</title>
      <description>&lt;![CDATA[[reshare] &lt;blockquote class="blockquote"&gt;
&lt;p&gt;If your read-it-later list isn’t getting cleared weekly, perhaps it’s time to delete the lot.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote class="blockquote"&gt;
&lt;p&gt;Save from a mindset of abundance, rather than scarcity, and process the things you’ve saved each week (or month, at the most). If you are worried that something you deleted truly would have changed your life, just stop.&lt;/p&gt;
&lt;p&gt;STOP.&lt;/p&gt;
&lt;p&gt;You can’t read it all, do it all, be it all. Trust that those potentially life-changing ideas will come around again, when you are ready for them&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Good reminder. Lately I've been sending a lot of notes to myself with stuff to read but just haven't had the time to get to it. That said, the act of sending myself those notes is low friction that I don't feel FOMO when I don't get to read the articles and consume the media.&lt;/p&gt;
]]&gt;</description>
      <link>https://www.luisquintanilla.me/responses/stop-saving-everything</link>
      <guid>https://www.luisquintanilla.me/responses/stop-saving-everything</guid>
      <pubDate>2025-08-11 23:00</pubDate>
      <category>pkm</category>
      <category>productivity</category>
      <category>notetaking</category>
    </item>
    <item>
      <title>New text-first site and search are live</title>
      <description>&lt;![CDATA[&lt;p&gt;Just iterated on another version of the website.&lt;/p&gt;
&lt;p&gt;The major change is that there's now a text-first version of the website for minimal and resource-constrained environments over at &lt;a href="https://www.luisquintanilla.me/text"&gt;/text&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I've also added search functionality, which you can find at &lt;a href="https://www.luisquintanilla.me/search"&gt;/search&lt;/a&gt;&lt;/p&gt;
]]&gt;</description>
      <link>https://www.luisquintanilla.me/notes/new-text-first-site-and-search-are-live</link>
      <guid>https://www.luisquintanilla.me/notes/new-text-first-site-and-search-are-live</guid>
      <pubDate>2025-08-11 20:57 -05:00</pubDate>
      <category>plaintext</category>
      <category>indieweb</category>
      <category>website</category>
    </item>
    <item>
      <title>URL Town</title>
      <description>&lt;![CDATA[[bookmark] &lt;p&gt;Love to see projects like this.&lt;/p&gt;
&lt;blockquote class="blockquote"&gt;
&lt;p&gt;url.town doesn’t have any overly lofty ambitions; we’re just building our own directory of really nice websites. We’re not trying to fully recreate the original Yahoo! or DMOZ directories. We’re not aiming for some astronomical number of links. This is just one space on the web, tied to a community that loves to share neat things with one another. Quality matters much more than quantity. There’s no need to share everything just for the shake of sharing it; it’s much better to share things that are useful or interesting.&lt;/p&gt;
&lt;/blockquote&gt;
]]&gt;</description>
      <link>https://www.luisquintanilla.me/responses/url-town</link>
      <guid>https://www.luisquintanilla.me/responses/url-town</guid>
      <pubDate>2025-08-10 23:26</pubDate>
      <category>indieweb</category>
      <category>websites</category>
      <category>directory</category>
    </item>
    <item>
      <title>Test mobile post</title>
      <description>&lt;![CDATA[&lt;p&gt;Testing date fix on mobile notes&lt;/p&gt;
]]&gt;</description>
      <link>https://www.luisquintanilla.me/notes/test-mobile-post</link>
      <guid>https://www.luisquintanilla.me/notes/test-mobile-post</guid>
      <pubDate>2025-08-10 21:44 -05:00</pubDate>
      <category>test</category>
      <category>mobile</category>
    </item>
    <item>
      <title>BLM Lands Marked for Potential Sale (OnX)</title>
      <description>&lt;![CDATA[[reshare] &lt;p&gt;Sad to see what's happening with our public lands. Great to see folks staying vigilant and providing information of what's happening on the ground.&lt;/p&gt;
]]&gt;</description>
      <link>https://www.luisquintanilla.me/responses/blm-lands-marked-for-potential-sale-onx</link>
      <guid>https://www.luisquintanilla.me/responses/blm-lands-marked-for-potential-sale-onx</guid>
      <pubDate>2025-08-10 21:13</pubDate>
      <category>onx</category>
      <category>bureaulandmanagement</category>
      <category>nature</category>
    </item>
    <item>
      <title>Claude Code Emacs Integration</title>
      <description>&lt;![CDATA[[bookmark] &lt;blockquote class="blockquote"&gt;
&lt;p&gt;Claude Code IDE for Emacs provides native integration with Claude Code CLI through the Model Context Protocol (MCP). Unlike simple terminal wrappers, this package creates a bidirectional bridge between Claude and Emacs, enabling Claude to understand and leverage Emacs’ powerful features—from LSP and project management to custom Elisp functions. This transforms Claude into a true Emacs-aware AI assistant that works within your existing workflow and can interact with your entire Emacs ecosystem.&lt;/p&gt;
&lt;/blockquote&gt;
]]&gt;</description>
      <link>https://www.luisquintanilla.me/responses/claude-code-emacs-integration</link>
      <guid>https://www.luisquintanilla.me/responses/claude-code-emacs-integration</guid>
      <pubDate>2025-08-10 20:17</pubDate>
      <category>emacs</category>
      <category>anthropic</category>
      <category>ai</category>
      <category>claudecode</category>
    </item>
    <item>
      <title>Hello world from the new site</title>
      <description>&lt;![CDATA[&lt;p&gt;Posting from my brand new redesigned website.&lt;/p&gt;
&lt;p&gt;I was working on it for about a month so I plan on doing a longer writeup on what has changed.&lt;/p&gt;
&lt;p&gt;There's still a few things that are broken, but for the most part, I'm happy with the progress and the changes that need to be made are incremental.&lt;/p&gt;
&lt;p&gt;There's a ton of cleanup as well but again. That is not a blocker to publishing the site.&lt;/p&gt;
]]&gt;</description>
      <link>https://www.luisquintanilla.me/notes/hello-world-new-site-2025-08</link>
      <guid>https://www.luisquintanilla.me/notes/hello-world-new-site-2025-08</guid>
      <pubDate>2025-08-06 17:01 -05:00</pubDate>
      <category>indieweb</category>
      <category>note</category>
      <category>website</category>
    </item>
  </channel>
</rss>