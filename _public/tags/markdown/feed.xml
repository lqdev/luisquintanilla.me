<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>Luis Quintanilla - markdown</title>
    <link>https://www.lqdev.me/tags/markdown</link>
    <description>All content tagged with 'markdown' by Luis Quintanilla</description>
    <lastBuildDate>2025-05-11 08:42 -05:00</lastBuildDate>
    <language>en</language>
    <item>
      <title>Claude Artifacts</title>
      <description>&lt;![CDATA[[reply] &lt;p&gt;ðŸ’¯ðŸ’¯ðŸ’¯. Artifacts are great. In ChatGPT when I find myself trying to format outputs as markdown, the UI gets confused and some of the content is rendered in markdown while the rest gets rendered as part of the UI which makes it unusable and hard to copy. The best way I've found to get around it is to ask it to format in org-mode or asciidoc. Claude Artifacts make this a non-issue. I also love that in addition to copying and downloading the artifact, you can also publish it as a URL.&lt;/p&gt;
]]&gt;</description>
      <link>https://www.lqdev.me/responses/claude-artifacts-reece</link>
      <guid>https://www.lqdev.me/responses/claude-artifacts-reece</guid>
      <pubDate>2025-05-11 08:42 -05:00</pubDate>
      <category>claude</category>
      <category>chatgpt</category>
      <category>plaintext</category>
      <category>ai</category>
      <category>org</category>
      <category>emacs</category>
      <category>asciidoc</category>
      <category>markdown</category>
    </item>
    <item>
      <title>MarkItDown - Convert files to Markdown</title>
      <description>&lt;![CDATA[[reshare] &lt;blockquote class="blockquote"&gt;
&lt;p&gt;MarkItDown is a utility for converting various files to Markdown (e.g., for indexing, text analysis, etc). It supports:&lt;br /&gt;
&lt;br&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PDF&lt;/li&gt;
&lt;li&gt;PowerPoint&lt;/li&gt;
&lt;li&gt;Word&lt;/li&gt;
&lt;li&gt;Excel&lt;/li&gt;
&lt;li&gt;Images (EXIF metadata and OCR)&lt;/li&gt;
&lt;li&gt;Audio (EXIF metadata and speech transcription)&lt;/li&gt;
&lt;li&gt;HTML&lt;/li&gt;
&lt;li&gt;Text-based formats (CSV, JSON, XML)&lt;/li&gt;
&lt;li&gt;ZIP files (iterates over contents)&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
]]&gt;</description>
      <link>https://www.lqdev.me/responses/microsoft-markitdown</link>
      <guid>https://www.lqdev.me/responses/microsoft-markitdown</guid>
      <pubDate>2024-12-18 21:43 -05:00</pubDate>
      <category>markdown</category>
      <category>etl</category>
      <category>data</category>
      <category>python</category>
      <category>ai</category>
      <category>microsoft</category>
    </item>
    <item>
      <title>Markdig Advanced Extensions</title>
      <description>&lt;![CDATA[&lt;h2&gt;Overview&lt;/h2&gt;
&lt;p&gt;Markdig advanced extensions are a series of CommonMark compliant syntax extensions for the markdown language.&lt;/p&gt;
&lt;h2&gt;Task lists&lt;/h2&gt;
&lt;p&gt;Tasks lists allow you to create unorder list items with checkboxes.&lt;/p&gt;
&lt;h3&gt;Syntax&lt;/h3&gt;
&lt;pre&gt;&lt;code class="language-markdown"&gt;- [ ] Item1
- [x] Item2
- [ ] Item3
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Output&lt;/h3&gt;
&lt;ul class="contains-task-list"&gt;
&lt;li class="task-list-item"&gt; Item1&lt;/li&gt;
&lt;li class="task-list-item"&gt; Item2&lt;/li&gt;
&lt;li class="task-list-item"&gt; Item3&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Tables&lt;/h2&gt;
&lt;h3&gt;Pipe tables&lt;/h3&gt;
&lt;h4&gt;Syntax&lt;/h4&gt;
&lt;pre&gt;&lt;code class="language-markdown"&gt;| a | b | c
| - | - | - 
| 1 | 2 | 3
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;Output&lt;/h4&gt;
&lt;p&gt;a&lt;/p&gt;
&lt;p&gt;b&lt;/p&gt;
&lt;p&gt;c&lt;/p&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;p&gt;2&lt;/p&gt;
&lt;p&gt;3&lt;/p&gt;
&lt;h2&gt;Diagrams&lt;/h2&gt;
&lt;p&gt;Support for diagram syntax such as &lt;a href="https://mermaid-js.github.io/mermaid/"&gt;Mermaid&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Syntax&lt;/h3&gt;
&lt;pre&gt;&lt;code class="language-markdown"&gt;```mermaid
flowchart LR
    Start --&amp;gt; Stop
```
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Output&lt;/h3&gt;
&lt;pre&gt;&lt;code class="language-mermaid"&gt;flowchart LR;
    Start --&amp;gt; Stop;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Emojis&lt;/h2&gt;
&lt;p&gt;Support for emojis.&lt;/p&gt;
&lt;h3&gt;Syntax&lt;/h3&gt;
&lt;pre&gt;&lt;code class="language-markdown"&gt;We all need :), it makes us :muscle:. (and :ok_hand:).
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Output&lt;/h3&gt;
&lt;p&gt;We all need ðŸ˜ƒ, it makes us ðŸ’ª. (and ðŸ‘Œ).&lt;/p&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/xoofx/markdig/tree/master/src/Markdig.Tests/Specs"&gt;Markdig Specs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
]]&gt;</description>
      <link>https://www.lqdev.me/resources/wiki/markdig-advanced-extensions</link>
      <guid>https://www.lqdev.me/resources/wiki/markdig-advanced-extensions</guid>
      <pubDate>09/03/2022 19:26 -05:00</pubDate>
      <category>markdown</category>
      <category>markdig</category>
      <category>dotnet</category>
      <category>fsharp</category>
      <category>csharp</category>
      <category>website</category>
    </item>
    <item>
      <title>Automate YAML front-matter generation with custom Visual Studio Code snippets</title>
      <description>&lt;![CDATA[
## Introduction

When creating content with static site generators such as Jekyll, Hexo, and many others, page metadata such as publish date, title, tags, and other details is created using YAML front-matter. Typically these pages are authored in markdown. At the top of each page, there's a YAML formatted section containing all of these details. Sometimes these static site generators include tooling to make it easier to scaffold new pages. In the case of my website, I created my own static site generator. Therefore, scaffolding a new page, especially writing the boilerplate YAML front-matter is cumbersome and time consuming. Since I use Visual Studio Code for authoring content and developing the static site generator, I've decided to use [snippets](https://code.visualstudio.com/docs/editor/userdefinedsnippets) to help me automate YAML front-matter generation. In this post, I'll show the general process. 

## Create snippets file

The first thing you'll want to do is create a snippets file. You can have one or as many as you want. For this website, I have a single snippets file called *metadata.code-snippets* for all my YAML front-matter. To create a snippets file:

1. Open the Visual Studio Code command palette.
1. Enter the command `&gt;Preferences: Configure User Snippets` into the text box.
1. Select the **New Snippets file for \&lt;REPO-OR-DIRECTORY-NAME\&gt;** from the list of options. 

    ![Create snippet file from Visual Studio Code command palette](https://user-images.githubusercontent.com/11130940/135934846-a76dfa16-caed-4489-9e50-95183add673d.png)

1. Provide a name for your snippets file and press **Enter**.
1. A file with the *.code-snippets* extension is created in the *.vscode* directory inside your project. 

One benefit of creating a snippets file and saving it in the *.vscode* directory is you can check it into source control and use it anywhere, even github.dev. 

## Create snippets

Now that you've created the file, it's time to define your snippets.

1. Open your snippets file.

    ![Snippet file for luisquintanilla.me](https://user-images.githubusercontent.com/11130940/135935306-1cbd48e1-6e48-423c-b87f-cb6f7a8eb085.png)

1. Create a new JSON object and define your snippet.

    For example, the snippet for blog posts on this site looks like the following.

    ```json
    "Article Post metadata": {
        "scope": "markdown",
        "prefix": "article",
        "body": [
            "---",
            "post_type: \"article\" ",
            "title: \"\"",
            "published_date: \"$CURRENT_MONTH/$CURRENT_DATE/$CURRENT_YEAR $CURRENT_HOUR:$CURRENT_MINUTE\"",
            "tags: ",
            "---"
        ],
        "description": "Blog post article metadata"
    }
    ```

    Let's break down each of the properties:

    - `scope`: By default, snippets apply to all languages and projects. In my case, since I intend only to use these snippets in markdown files, I set the scope to `markdown`. 
    - `prefix`: The prefix is the word in the page that is associated with. When I type `article` in a markdown page, a recommendation to use the snippet appears.
    - `body`: The code or content of my snippet. In this case, the expected output is similar to the following.

        ```yaml
        ---
        post_type: "article" 
        title: ""
        published_date: "10/04/2021 18:58 -05:00"
        tags: 
        ---
        ```

        VS Code also has built-in variables that you can use to automatically set date, time, and other values.

    - `description`: A text description of your snippet.

For more information on creating snippets, see [Create your own snippets](https://code.visualstudio.com/docs/editor/userdefinedsnippets#_create-your-own-snippets).

## Use your snippets

1. Create a new markdown file.
1. Type your prefix into the file. In my case, for blog posts my prefix is `article`.
1. Press **Ctrl + Space**. For Macs you might have to use Cmd instead of Ctrl. 

    ![Populate article front-matter using snippet](https://user-images.githubusercontent.com/11130940/135935808-46ca8314-c2be-47f1-9c9b-9b722e37d908.png)

1. A tooltip with your snippet's description appears. Press **Enter**. 

At this point, your snippet's prefix is replaced with the content defined in the snippet's body.

## Conclusion

In this post I've shown how you can use Visual Studio Code snippets to automate YAML front-matter generation when working with common static site generators that don't provide tooling to scaffold new pages. Snippets can be used for a variety of scenarios and if there's any boilerplate code or content you constantly have to write, they can save you a lot of time. 

Happy writing!
]]&gt;</description>
      <link>https://www.lqdev.me/posts/automate-yaml-front-matter-vs-code-snippets</link>
      <guid>https://www.lqdev.me/posts/automate-yaml-front-matter-vs-code-snippets</guid>
      <pubDate>10/04/2021 19:58 -05:00</pubDate>
      <category>blogging</category>
      <category>tooling</category>
      <category>visual-studio</category>
      <category>visual-studio-code</category>
      <category>markdown</category>
      <category>yaml</category>
    </item>
    <item>
      <title>Blogging Tools</title>
      <description>&lt;![CDATA[
## TLDR

These are the tools I use to write this blog:

- **Editor**: [Visual Studio Code](https://code.visualstudio.com/)
- **Markup**: [Markdown](https://daringfireball.net/projects/markdown/)
- **Static Site Generator**: [Hexo](https://hexo.io/) 
- **Blog Theme**: [Cactus](https://github.com/probberechts/hexo-theme-cactus)
- **Hosting**: [Namecheap](https://www.namecheap.com/)

## Introduction

I have gotten a few questions regarding what I use to write this blog so I thought it would be a good idea to write a post about it. In this writeup I'll discuss what I use for writing posts as well as building and hosting the site. 

## Writing

### Editor

For writing, I use Visual Studio Code. Visual Studio Code is an open source, cross-platform text editor. One of the nice features it includes is Markdown Preview. Markdown Preview allows you to see how the content would look when rendered as a web page. Additionally, Visual Studio Code allows you to split panes. What that provides is the ability to write and preview the content side-by-side. 

![](http://cdn.lqdev.tech/files/images/blog-tools-1.PNG)

### Markup 

I write my content in Markdown. Markdown is a plain text formatting syntax that allows authors to write easy-to-read and easy-to-write plain text formats that are then converted to HTML. It can take a while to get used to the syntax especially when including images, links and code snippets but once you get comfortable with it, it becomes natural and no different than writing sentences in plain text. While this is not a requirement for everyone, since a fair amount of my content includes code snippets, Markdown makes it easy to include such content in the language of choice. 

## Website

### Static Site Generation

While Markdown helps me format my plain text, at some point it needs to be converted into HTML or some format that can be rendered on the web. To help with that, I use Hexo. Hexo is an open source blog framework that allows you to write content using Markdown or other languages and generates static files which have a theme applied to them. Hexo is built on JavaScript, therefore you'll need NodeJS to configure it. 

### Theme 

Hexo has numerous themes that can be used to style your site. The one I use is the `Cactus` theme. 

## Hosting

For hosting, I use Namecheap. There is no special reason for this other than I had a slot available in an existing hosting plan. My method of deployment is via FTP. Since my site is all static assets, I upload them into a folder that is publicly accessible. With that in mind, by having my site made up of static assets I have the flexibility of hosting it on an S3 bucket or Azure Storage. This is the method I'm looking to use for deployments and hosting in the near future. Here is a [link](https://docs.microsoft.com/en-us/azure/storage/blobs/storage-blob-static-website) that details how to host a static site on Azure Storage.]]&gt;</description>
      <link>https://www.lqdev.me/posts/blog-tools</link>
      <guid>https://www.lqdev.me/posts/blog-tools</guid>
      <pubDate>2018-11-18 00:07:36 -05:00</pubDate>
      <category>markdown</category>
      <category>vscode</category>
      <category>tools</category>
      <category>development</category>
      <category>blogging</category>
    </item>
  </channel>
</rss>