<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>Luis Quintanilla - productivity</title>
    <link>https://www.lqdev.me/tags/productivity</link>
    <description>All content tagged with 'productivity' by Luis Quintanilla</description>
    <lastBuildDate>2025-08-11 23:00 -05:00</lastBuildDate>
    <language>en</language>
    <item>
      <title>Stop saving everything</title>
      <description>&lt;![CDATA[[reshare] &lt;blockquote class="blockquote"&gt;
&lt;p&gt;If your read-it-later list isn’t getting cleared weekly, perhaps it’s time to delete the lot.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote class="blockquote"&gt;
&lt;p&gt;Save from a mindset of abundance, rather than scarcity, and process the things you’ve saved each week (or month, at the most). If you are worried that something you deleted truly would have changed your life, just stop.&lt;/p&gt;
&lt;p&gt;STOP.&lt;/p&gt;
&lt;p&gt;You can’t read it all, do it all, be it all. Trust that those potentially life-changing ideas will come around again, when you are ready for them&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Good reminder. Lately I've been sending a lot of notes to myself with stuff to read but just haven't had the time to get to it. That said, the act of sending myself those notes is low friction that I don't feel FOMO when I don't get to read the articles and consume the media.&lt;/p&gt;
]]&gt;</description>
      <link>https://www.lqdev.me/responses/stop-saving-everything</link>
      <guid>https://www.lqdev.me/responses/stop-saving-everything</guid>
      <pubDate>2025-08-11 23:00 -05:00</pubDate>
      <category>pkm</category>
      <category>productivity</category>
      <category>notetaking</category>
    </item>
    <item>
      <title>Clock Tables - Org Mode, Plain Text, and AI</title>
      <description>&lt;![CDATA[&lt;p&gt;Org-mode appreciation post.&lt;/p&gt;
&lt;p&gt;I use plain text and org-mode for most things in my life, especially when it comes to task and life management.&lt;/p&gt;
&lt;p&gt;I won't rehash all the reasons Emacs and org-mode are amazing. There are tons of blog posts and videos out there that would do it more justice than I ever could.&lt;/p&gt;
&lt;p&gt;Over the last few years, Emacs has become my go-to text editor. Throughout all that time, I've continued to find new features that delight.&lt;/p&gt;
&lt;p&gt;The most recent is &lt;a href="https://orgmode.org/manual/The-clock-table.html"&gt;clock table&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I already use org-mode to track my to-dos and perform some sort of time-block planning by setting deadlines and scheduling tasks.&lt;/p&gt;
&lt;p&gt;Recently though, I've been wanting a way to see all of the things I've worked on over the past [ INSERT TIME PERIOD ]. More importantly, I'd like to have time associated with them to see where my time has gone and evaluate whether I'm spending time on the things I should be.&lt;/p&gt;
&lt;p&gt;I knew you could &lt;a href="https://orgmode.org/manual/Clocking-commands.html"&gt;clock in and clock out&lt;/a&gt; on tasks. However, I didn't know you could easily build a customized report that automatically updates. That's when I came across clock tables.&lt;/p&gt;
&lt;p&gt;Now, I have a way of visualizing all of the things I worked on during a week or month, and as I'm planning for the next week or month, I can adjust and reprioritize the things I'm working on.&lt;/p&gt;
&lt;p&gt;I know there are enterprise offerings like the Viva suite from Microsoft which provides detailed reports on how you spend your time.&lt;/p&gt;
&lt;p&gt;What excites me about org-mode though is that it's plain text. The clock table report that gets generated is a plain text table which makes it portable and easy to access using any text editor of your choice. It works best with Emacs, but that's not a requirement.&lt;/p&gt;
&lt;p&gt;On their own, clock tables are amazing.&lt;/p&gt;
&lt;p&gt;However, given how well language models work on plain text, they could be used as context for your queries. Imagine giving a language model as input an org file which contains:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A clock table&lt;/li&gt;
&lt;li&gt;A list of TODO tasks (with notes, priorities, deadlines, tags, properties, and other annotations)&lt;/li&gt;
&lt;li&gt;A high level list of goals you want to achieve&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Then, you could enter a prompt along the lines of: &amp;quot;Using the following clock-table and list of goals I want to achieve, provide me with recommendations of tasks I should work on for the next week. Ensure that they align with my goals, are top priority, and provide the highest return on my efforts&amp;quot;.&lt;/p&gt;
&lt;p&gt;Additionally, you might also provide your org-agenda view containing appointments and use the results from the first query as context for the following prompt: &amp;quot;Given the agenda view for the next week, schedule the top 3 tasks you recommended&amp;quot;.&lt;/p&gt;
&lt;p&gt;The result would be a list of TODO items containing schedule / active timestamps annotations which now show up on your org-agenda view.&lt;/p&gt;
&lt;p&gt;Today, almost every productivity application out there is working on building these kinds of AI features into their products. The difference is, in many cases, the formats used by those applications aren't plain text. This adds complexity to the data extraction and transformation pipelines required to get the data into the right format for a language model to process. With plain text, there's little to no transformations required.&lt;/p&gt;
&lt;p&gt;What's even better, I can extend org-mode and Emacs using elisp to do the things I just talked about.&lt;/p&gt;
&lt;p&gt;I'm no elisp expert, so I asked Copilot to generate an elisp function that takes an org-mode clock table as input and generates a written text summary of it. Here are the results:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-lisp"&gt;(defun org-clock-summary-to-chatgpt ()
  &amp;quot;Extracts clock table data and requests a summary from ChatGPT.&amp;quot;
  (interactive)
  (let* ((clock-table-data (org-clocktable-get-clocktable))
         (summary-text (org-clocktable-format-summary clock-table-data))
         (api-endpoint &amp;quot;https://api.openai.com/v1/engines/davinci/completions&amp;quot;)
         (api-key &amp;quot;YOUR_API_KEY&amp;quot;)) ; Replace with your actual API key

    ;; Construct the HTTP request and send it to ChatGPT
    (with-current-buffer
        (url-retrieve-synchronously api-endpoint
                                    `((&amp;quot;text&amp;quot; . ,summary-text)
                                      (&amp;quot;api_key&amp;quot; . ,api-key)))
      (goto-char (point-min))
      (search-forward &amp;quot;\n\n&amp;quot;)
      (let ((response-json (json-read)))
        (message &amp;quot;ChatGPT summary: %s&amp;quot; (cdr (assoc 'choices response-json)))))))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;All you elisp experts out there, let me know how it did.&lt;/p&gt;
&lt;p&gt;I know at least the API endpoint is wrong, but generally speaking, it seems to be doing the right thing. Such function could be extended to include org-agenda information, TODO items, and many other things that would use AI to augment the existing functionality of Emacs and org-mode to tailor them to my needs.&lt;/p&gt;
]]&gt;</description>
      <link>https://www.lqdev.me/notes/love-plain-text-org-mode-clocktable</link>
      <guid>https://www.lqdev.me/notes/love-plain-text-org-mode-clocktable</guid>
      <pubDate>2024-07-09 22:07 -05:00</pubDate>
      <category>emacs</category>
      <category>orgmode</category>
      <category>ai</category>
      <category>plaintext</category>
      <category>productivity</category>
      <category>tools</category>
      <category>technology</category>
      <category>gnu</category>
      <category>opensource</category>
      <category>gtd</category>
      <category>calendar</category>
      <category>agenda</category>
      <category>llm</category>
      <category>openai</category>
    </item>
    <item>
      <title>T-Mobile Sidekick’s Jump button made mobile multitasking easy</title>
      <description>&lt;![CDATA[[reshare] &lt;p&gt;Bring back the Sidekick! &lt;a href="https://www.lqdev.me/notes/ayaneo-slide"&gt;Ayaneo Slide&lt;/a&gt; is probably the closest to this today. Would love to see a &lt;a href="https://www.lqdev.me/responses/windows-12-mobile-concept/"&gt;smaller version of it running on Windows on ARM-based Snapdragon processors&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote class="blockquote"&gt;
&lt;p&gt;Before the iPhone, before Android, before webOS, a revolutionary soap bar of a phone made it incredibly easy to get shit done. The Danger Hiptop, better known as the T-Mobile Sidekick, made the internet portable and affordable like no phone before.&lt;/p&gt;
&lt;/blockquote&gt;
]]&gt;</description>
      <link>https://www.lqdev.me/responses/tmobile-sidekick-jump-button-mobile-productivity</link>
      <guid>https://www.lqdev.me/responses/tmobile-sidekick-jump-button-mobile-productivity</guid>
      <pubDate>2024-04-01 20:27 -05:00</pubDate>
      <category>tmobile</category>
      <category>nostalgia</category>
      <category>sidekick</category>
      <category>tmobile</category>
      <category>phones</category>
      <category>smartphones</category>
      <category>productivity</category>
      <category>mobile</category>
      <category>cellphones</category>
      <category>handhelds</category>
    </item>
    <item>
      <title>The surprising connection between after-hours work and decreased productivity</title>
      <description>&lt;![CDATA[[reshare] &lt;blockquote class="blockquote"&gt;
&lt;p&gt;Quick take: How do you spend your time at work and what is it costing you? Slack’s Workforce Index, based on survey responses from more than 10,000 desk workers around the globe, uncovers new findings on how to structure the workday to maximize productivity and strengthen employee well-being and satisfaction.&lt;br /&gt;
&lt;br&gt;
Key learnings include:&lt;br /&gt;
&lt;br&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Employees who log off at the end of the workday register 20% higher productivity scores than those who feel obligated to work after hours.&lt;/li&gt;
&lt;li&gt;Making time for breaks during the workday improves employee productivity and well-being, and yet half of all desk workers say they rarely or never take breaks.&lt;/li&gt;
&lt;li&gt;On average, desk workers say that the ideal amount of focus time is around four hours a day, and more than two hours a day in meetings is the tipping point at which a majority of workers feel overburdened by meetings.&lt;/li&gt;
&lt;li&gt;Three out of every four desk workers report working in the 3 to 6pm timeframe, but of those, only one in four consider these hours highly productive.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
]]&gt;</description>
      <link>https://www.lqdev.me/responses/surprising-connection-after-hours-work-productivity-slack</link>
      <guid>https://www.lqdev.me/responses/surprising-connection-after-hours-work-productivity-slack</guid>
      <pubDate>2024-03-07 21:14 -05:00</pubDate>
      <category>slack</category>
      <category>productivity</category>
      <category>work</category>
    </item>
    <item>
      <title>Notion’s new calendar app is designed to keep your meetings organized</title>
      <description>&lt;![CDATA[[reshare] &lt;blockquote class="blockquote"&gt;
&lt;p&gt;After acquiring Cron in 2022, Notion is bringing the calendar app fully into its all-in-one workspace.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote class="blockquote"&gt;
&lt;p&gt;The big new feature coming with the rebranding is Notion integration. If you or your company uses Notion, you’ll be able to create or link Notion documents inside a calendar invite. If you have a database filled with due dates, you can add that as a calendar to Notion Calendar. It sounds like a much better way to handle agendas and notes than sending them around before and after a meeting or hunting for them in your Slack. Putting everything in the calendar event is a good move.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is one of the reasons I like org-mode in Emacs. Being able to annotate documents with timestamps and deadlines that show up and you can organize inside the Agenda view is so powerful. The integrations and learning curve is steeper compared to a tool like Notion but I find it simple and powerful enough for GTD-style workflows, I'd have a hard time moving. I have yet to use AnyType, so maybe &lt;a href="https://www.lqdev.me/notes/anytype-local-only"&gt;after trying that&lt;/a&gt;, I choose to shift some of my workflows there.&lt;/p&gt;
]]&gt;</description>
      <link>https://www.lqdev.me/responses/notion-cron-calendar-app</link>
      <guid>https://www.lqdev.me/responses/notion-cron-calendar-app</guid>
      <pubDate>2024-01-17 19:33 -05:00</pubDate>
      <category>calendar</category>
      <category>notion</category>
      <category>productivity</category>
      <category>gtd</category>
      <category>software</category>
      <category>app</category>
      <category>pkm</category>
    </item>
    <item>
      <title>Every - Daily Newsletter</title>
      <description>&lt;![CDATA[[bookmark] &lt;blockquote class="blockquote"&gt;
&lt;p&gt;Every is a daily newsletter founded in 2020. Every day, we publish a long-form essay to make you smarter about technology, productivity, and AI.&lt;/p&gt;
&lt;/blockquote&gt;
]]&gt;</description>
      <link>https://www.lqdev.me/bookmarks/every-newsletter</link>
      <guid>https://www.lqdev.me/bookmarks/every-newsletter</guid>
      <pubDate>2024-01-15 11:08 -05:00</pubDate>
      <category>newsletter</category>
      <category>technology</category>
      <category>productivity</category>
      <category>ai</category>
      <category>essay</category>
      <category>internet</category>
    </item>
    <item>
      <title>To Everyone Who Asks For ‘Just A Little’ Of Your Time: Here’s What It Costs To Say Yes</title>
      <description>&lt;![CDATA[[bookmark] &lt;blockquote class="blockquote"&gt;
&lt;p&gt;Makers...need to have large blocks of uninterrupted, unscheduled time to do what they do. To create and think.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote class="blockquote"&gt;
&lt;p&gt;I keep a maker’s schedule because I believe that anything else is anathema to deep work or creativity.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote class="blockquote"&gt;
&lt;p&gt;Seneca writes that if all the geniuses in history were to get together, none would be able explain our baffling relationship with time. He says,&lt;/p&gt;
&lt;blockquote class="blockquote"&gt;
&lt;p&gt;No person would give up even an inch of their estate, and the slightest dispute with a neighbor can mean hell to pay; yet we easily let others encroach on our lives—worse, we often pave the way for those who will take it over. No person hands out their money to passers-by, but to how many do each of us hand out our lives! We’re tight-fisted with property and money, yet think too little of wasting time, the one thing about which we should all be the toughest misers.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;blockquote class="blockquote"&gt;
&lt;p&gt;Time? Time is our most irreplaceable asset—we cannot buy more of it. We cannot get a second of it back. We can only hope to waste as little as possible. Yet somehow we treat it as most renewable of all resources.&lt;/p&gt;
&lt;/blockquote&gt;
]]&gt;</description>
      <link>https://www.lqdev.me/bookmarks/what-it-cost-to-say-yes-holiday</link>
      <guid>https://www.lqdev.me/bookmarks/what-it-cost-to-say-yes-holiday</guid>
      <pubDate>2023-12-09 10:08 -05:00</pubDate>
      <category>productivity</category>
      <category>timemanagement</category>
    </item>
    <item>
      <title>Practical Ways To Increase Product Velocity</title>
      <description>&lt;![CDATA[[bookmark] &lt;h2&gt;Remove Dependencies&lt;/h2&gt;
&lt;blockquote class="blockquote"&gt;
&lt;p&gt;Create a culture that favors begging forgiveness (and reversing decisions quickly) rather than asking permission. Invest in infrastructure such as progressive / cancellable rollouts. Use asynchronous written docs to get people aligned (“comment in this doc by Friday if you disagree with the plan”) rather than meetings (“we’ll get approval at the next weekly review meeting”).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Demand Clear Narratives&lt;/h2&gt;
&lt;blockquote class="blockquote"&gt;
&lt;p&gt;Unclear thinking is a reliable cause of slowness, and gets revealed under a microscope.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote class="blockquote"&gt;
&lt;p&gt;Bonus points for documenting plans in writing. One of the largest advantages of a strong writing culture is that it forces much clearer narratives than meetings, powerpoint, or five Slack threads spread over 8 business days.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Get Your Deployment and Incident Metrics In Shape&lt;/h2&gt;
&lt;blockquote class="blockquote"&gt;
&lt;p&gt;No matter what your job function is, part of your role is ensuring that your engineering team has enough time to get their vital metrics in order. Especially if you’re a product leader, it’s essential that you resist the temptation to push relentlessly for more features and give your engineering counterparts the room to get fit.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Find Trusted Engineering Guides&lt;/h2&gt;
&lt;blockquote class="blockquote"&gt;
&lt;p&gt;...it’s especially important to build a strong relationship with all of your engineering partners, and especially these trusted guides.&lt;/p&gt;
&lt;/blockquote&gt;
]]&gt;</description>
      <link>https://www.lqdev.me/bookmarks/practical-ways-increase-product-velocity</link>
      <guid>https://www.lqdev.me/bookmarks/practical-ways-increase-product-velocity</guid>
      <pubDate>2023-12-09 10:03 -05:00</pubDate>
      <category>product</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Plain text</title>
      <description>&lt;![CDATA[&lt;h2&gt;Overview&lt;/h2&gt;
&lt;p&gt;This guide provides an overview of plain text and how it can be used for a variety of tasks and advantages over rich text and custom text formats.&lt;/p&gt;
&lt;h2&gt;What is plain text?&lt;/h2&gt;
&lt;p&gt;In general, plain text is text that isn't formatted and generally uses common characters.&lt;/p&gt;
&lt;h2&gt;Benefits of plain text&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Simplicity: Focus on the content rather than the formatting or medium&lt;/li&gt;
&lt;li&gt;Portability: Any text editor can create and display plain text. That means you're not locked in to any particular tool or service.&lt;/li&gt;
&lt;li&gt;Local-first: Because you can create plain text files using any phone or computer, it means your files belong to you and you have access to them any time regardless of network connectivity. While you can upload and sync your files with your preferred cloud storage provider for redundancy and backup, it's not a requirement.&lt;/li&gt;
&lt;li&gt;Longevity: Computers have been able to create and display plain text for decades. Since you don't need proprietary file formats or tools to create and consume plain text, it's likely many decades from now you'll be able to read plain text.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Additional plain markup and text formats&lt;/h2&gt;
&lt;p&gt;You can write plain text on its own. However, you can format your plain text to provide additional visual cues, information, and context. Some popular plain formats and markup languages include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://daringfireball.net/projects/markdown/"&gt;Markdown&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://orgmode.org/worg/org-syntax.html"&gt;Org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.latex-project.org/"&gt;LaTeX&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Editors&lt;/h2&gt;
&lt;p&gt;Below are a few popular plain text editors you can use to read and create plain text files:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.gnu.org/software/emacs/"&gt;Emacs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.vim.org/"&gt;vi/vim&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://code.visualstudio.com/"&gt;VS Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://apps.microsoft.com/detail/9msmlrh6lzf3?hl=en-us&amp;amp;gl=US"&gt;Notepad&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Use cases&lt;/h2&gt;
&lt;h3&gt;Note taking&lt;/h3&gt;
&lt;p&gt;The easiest way to start taking notes using plain text is to open any text editor of choice and start capturing your thoughts.&lt;/p&gt;
&lt;h3&gt;Productivity / Personal Knowledge Management&lt;/h3&gt;
&lt;p&gt;An extension to note taking is personal knowlege management and productivity. Whether it's scheduling appointments, journaling, tracking habits (exercise, reading, meditation), or managing to-do lists, you can use plain text for these tasks. Some tools and formats that can help with that include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://orgmode.org/"&gt;Emacs Org Mode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://todotxt.org/"&gt;todo.txt&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Email&lt;/h3&gt;
&lt;p&gt;While e-mail clients support HTML, in general e-mail communication is predomenantly text-based. Therefore, plain text is all you need. If you wanted to only use plain text, e-mail clients enable you to configure them to only support plain text. While your HTML e-mails may look weird, there are some advantages.&lt;/p&gt;
&lt;p&gt;The &lt;a href="https://useplaintext.email/"&gt;use plaintext email guide&lt;/a&gt; can provide guidance as to how to get started using plaintext only for e-mails&lt;/p&gt;
&lt;h3&gt;Personal finance&lt;/h3&gt;
&lt;p&gt;There are many apps for managing your personal finance. However, if you want to keep it simple, you can track your personal finances using plain text as well. Some tools that can help you do that include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://ledger-cli.org/"&gt;Ledger&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Databases&lt;/h3&gt;
&lt;p&gt;When you think of a database, you might think of a complicated system hosted in a server. While database systems are optimized for enterprise production workloads, at the end of the day, the purpose of a database is to store data. That means plain text can work for that too. Some tools that can help you here include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.gnu.org/software/recutils/"&gt;GNU Recutils&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Blogging and building websites&lt;/h3&gt;
&lt;p&gt;The more capable our computing devices have become, our software has suffered from inflation by becoming larger. However, larger doesn't mean the software is richer. If you're just trying to transmit information, you can upload your raw text files containing your blog posts or website to a server and they can be displayed in the browser. Examples of these sites include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://minim.blog/"&gt;minim.blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://250kb.club/"&gt;250kb club&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://512kb.club/"&gt;512kb club&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Often you can build these websites with the help of static site generators such as. The &lt;a href="https://jamstack.org/generators/"&gt;Static Site Generators catalog&lt;/a&gt; provides more details on popular ones.&lt;/p&gt;
&lt;p&gt;For hosting, you can do so for free using offerings like GitHub Pages. The &lt;a href="https://docs.github.com/en/pages/setting-up-a-github-pages-site-with-jekyll"&gt;Setting up a GitHub Pages site with Jekyll&lt;/a&gt; can help you get started there.&lt;/p&gt;
&lt;h2&gt;Additional Resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://plaintext-productivity.net"&gt;Plaintext Productivity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://plaintextproject.online/articles.html"&gt;The Plain Text Project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://doc.norang.ca/org-mode.html"&gt;Org Mode - Organize Your Life In Plain Text!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.markwk.com/plain-text-life.html"&gt;The Plain Text Life: Note Taking, Writing and Life Organization Using Plain Text Files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sive.rs/plaintext"&gt;Write plain text files&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
]]&gt;</description>
      <link>https://www.lqdev.me/resources/wiki/plaintext</link>
      <guid>https://www.lqdev.me/resources/wiki/plaintext</guid>
      <pubDate>10/14/2023 12:56 -05:00</pubDate>
      <category>plaintext</category>
      <category>productivity</category>
      <category>email</category>
      <category>notes</category>
      <category>personalknowledgemanagement</category>
      <category>pkm</category>
      <category>wiki</category>
      <category>calendar</category>
      <category>finance</category>
      <category>tools</category>
      <category>databases</category>
      <category>writing</category>
    </item>
    <item>
      <title>Kaz Nejatian (COO, Shopify): Why Shopify Elevated the Non-Manager Career Path and Ditched Meetings</title>
      <description>&lt;![CDATA[[bookmark] &lt;h2&gt;The difference between crafters and managers&lt;/h2&gt;
&lt;blockquote class="blockquote"&gt;
&lt;p&gt;The difference is in what you spend time on.&lt;/p&gt;
&lt;p&gt;&amp;quot;Most people get satisfaction from building — from actually creating things.&amp;quot;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote class="blockquote"&gt;
&lt;p&gt;As companies scale, optics start playing a larger role. People start spending more time on internal docs than actually talking to customers. How do you prevent this from happening at Shopify?&lt;/p&gt;
&lt;p&gt;In most product reviews, product managers spend way too much time preparing the perfect presentation for execs.&lt;/p&gt;
&lt;p&gt;At Shopify, our approach to product reviews is different. We want to see how the product actually works by playing with the demo or diving into the code.&lt;/p&gt;
&lt;p&gt;We want our PMs to be extremely user-focused, to take full ownership over problems, and to have a high tolerance for risk.&lt;/p&gt;
&lt;p&gt;If these attributes aren't present, product managers tend to become &amp;quot;keepers of strategy.” You end up with smart, highly credentialed individuals spending all their time writing strategy memos to increase their team size so that they can write even more strategy memos.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;How Shopify rages against meetings&lt;/h2&gt;
&lt;blockquote class="blockquote"&gt;
&lt;p&gt;In early 2023, Shopify initiated operation “Chaos Monkey” to:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Cancel all meetings with 3+ people&lt;/li&gt;
&lt;li&gt;Reinstate “no meeting Wednesdays”&lt;/li&gt;
&lt;li&gt;Remove needless Slack channels&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;blockquote class="blockquote"&gt;
&lt;p&gt;Does Shopify have a strong writing culture to help people communicate without meetings?&lt;/p&gt;
&lt;p&gt;Yes, we try to make async decisions as much as we can. We do this in a few ways:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;One of our mantras is “Do things, tell people.” You’ll see this plastered on our walls if you come to Shopify’s office.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We built an operating system called GSD (get shit done). This internal tool emphasizes frequent written updates, which are much easier to digest than constant meetings.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;blockquote class="blockquote"&gt;
&lt;p&gt;A meeting is a bug that some other process didn’t work out.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote class="blockquote"&gt;
&lt;p&gt;We focus on the mission. We want to be the all-in-one commerce platform for people to start and grow businesses. We try to avoid getting distracted by other side quests.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote class="blockquote"&gt;
&lt;p&gt;The main thing is to keep the main thing the main thing.&lt;/p&gt;
&lt;/blockquote&gt;
]]&gt;</description>
      <link>https://www.lqdev.me/bookmarks/interview-shopify-coo-career-path-meetings</link>
      <guid>https://www.lqdev.me/bookmarks/interview-shopify-coo-career-path-meetings</guid>
      <pubDate>2023-07-12 20:20 -05:00</pubDate>
      <category>career</category>
      <category>productivity</category>
      <category>product</category>
    </item>
    <item>
      <title>Type Driven Development - Scaling Safely with Python</title>
      <description>&lt;![CDATA[
# Introduction

Python is a great language. The syntax is readable and allows pseudocode to be converted into code nearly verbatim. While this is great for prototyping and moving fast, scaling can become an issue. One of the issues is with regards to documentation. In statically typed languages, even if there's no documentation, types help provide some sort of documentation that allow new contributors as well current developers to remember where they left off and what their code does. There are ways around this using docstrings as well as unit tests. However, this often involves performing tasks outside of writing code which can be time consuming. In Python 3.5, type hints or optional static typing are allowed and tools like `mypy` help write safer, more scalable code. The best part is, if the code already has docstrings and unit tests, optional static typing adds an additional layer of safety and documentation to existing projects. This writeup explores practices for documenting and developing scalable Python code as well as illustrating how to use optional static types and type checkers.

## Prerequisites

This writeup assumes that Python 3.5 or greater is being used and both `mypy` and `pytest` packages are installed. To install them using `pip` we can type the following command in the shell:

```bash
pip install pytest mypy
```

## Docstrings

[PEP 257](https://www.python.org/dev/peps/pep-0257/) provides a great overview of what docstrings are and how to use them. The summarized version of it is a string literal in classes and functions that allows developers to document logic, inputs and outputs of those particular sections of code. Below are examples of code with and without docstrings:

### No Docstring

```python
def combine(a,b):
    return a + b
```

### With Docstring

```python
def combine(a,b):
    """
    Returns the sum of two numbers

    Keyword arguments:
    a -- the first number
    b -- the second number

    Returns:
    Sum of a and b
    """
    return a + b
```

As we can see, the string literal or docstring allows individuals who are looking at the code for the first time as well as someone who worked on it and has forgotten the logic of a program to easily decipher what the code does.

Something else to notice is the function name. In this case, the logic is relatively simple and the name may make some sense at the time of writing the code. However, this simple logic is dangerous. Without knowing what is expected as input and output, there's not a clear way of knowing what this code should do. For example, someone might try to run the undocumented version of this function with parameter `a` having the value 'Hello' and `b` with the value 'World'. The function would not throw any errors and return 'HelloWorld' as a result. However, if we look at the intented logic as well as expected input and output provided by the docstring, we'd know that `a` and `b` are both supposed to be numerical values, not strings or any other type.

It's clear that writing a docstring can become tedious and take up a substantial amount of time as a project grows. However, the benefits are reaped when extending the code and using it in production because more time is spent being productive rather than figuring out what the code should do and whether it's being done correctly. Docstrings however are not a panacea since there is no way to enforce what is documented in the code and serves as more of an FYI for developers using and extending the code.

## Unit Testing

One way to prevent code from being misused is by writing tests. By writing unit tests and making sure that they pass, developers can test edge cases such as passing a string and immediately getting feedback through failing tests. Here's an example of what a unit test would look like for the `combine` function written above.

In the file `main.py`, we can write the logic for our `combine` function. However, keeping in mind the docstring, we might want to add some exception handling. 

```python
"""
Module Containing Logic
"""

def combine(a,b):
    """                    
    Returns the sum of two numbers                                          
    Keyword arguments:                 
    a -- the first number  
    b -- the second number                                                      
    Returns:             
    Sum of a and b       
    """
    if(type(a) == str or type(b) == str)
        return a + b
    else:
        raise TypeError
```

In another file called `test_main.py`, we can write our tests. Our test file will look like the code below:

```python
import pytest
from main import combine

testparams = [(1,2,3),(2,4,6)]
@pytest.mark.parametrize("a,b,expected",testparams)
def test_combine(a,b,expected): 
    assert combine(a,b) == expected

testparams = [('a','b'),('a','b')]
@pytest.mark.parametrize("a,b",testparams)
def test_combine_exception(a,b):
    with pytest.raises(TypeError):
        combine(a,b)
```

In our shell we can enter the `pytest` command inside of our project directory and get the following output.

```bash
pytest
```

![](http://cdn.lqdev.tech/files/images/typedrivendevelopment1.png)

The results from `pytest` ensure that passing the expected parameters returns the expected output which is the sum of two numbers and passing in the wrong parameters such as those of type string return a `TypeError`. This gets us closer to where we want to be where we're able to test whether the functionality of our application does what it's supposed to. Like docstrings, there is additional work and time that needs to be accounted for when writing tests. However, this is a practice that should be taking place already and in the case of Python which does not provide the type checking or compilation is a way to if not ensure that our logic is sound, at least it provides us with an additional form of documentation and peace of mind that the code is being used accurately. 

## Type Hints (Optional Static Types)

Good practice would have us write docstrings to document our code and unit tests to ensure the soundness of our logic and code. However, what if that seems like too much work or there's not much time to perform those tasks. Is there a shorthand way that we can both document our code for posterity as well as ensure that we can only use the code as intended. That's where type hints comes in and starting with Python 3.5 have been accepted by the Python community per [PEP 484](https://www.python.org/dev/peps/pep-0484/). With type hints our code would not change much and with a few extra characters, we can write safer code. Our `combine` function from previous examples would look as follows with type hints:

```python
def combine(a:float,b:float) -&gt; float:
    return a + b    
```

If we run this, it should run as expected given the appropriate parameters. That being said, as with the undocumented example, if we pass in parameters 'Hello' and 'World', it should work as well and we get the result 'HelloWorld'. If we still don't get the result we want and our code is still unsafe, then what's the point? One of the benefits is the documentation piece. In the event that we had no docstring, we could still tell that `a` and `b` are both of type `float` and return a `float`. The second benefit comes from the use of `mypy`, a type checker for Python. To see it in action, we can create a script called `mainmypy.py` and add the following code:

```python
def combine(a:float,b:float) -&gt; float:
    return a + b

combine(1,2)
combine('Hello','World')
```

In the shell, we can then use the `mypy` command on our script to check types.

```bash
mypy mainmypy.py
```

The output is the following:

![](http://cdn.lqdev.tech/files/images/typedrivendevelopment2.png)

As we can see, without having to run our code, `mypy` checks the types and throws errors that we would not have found unless we ran our code. Therefore, we get both documentation by defining the types of parameters and outputs we expect which make it easier for individuals using or writing code to safely do so without having to write long, descriptive docstrings. With `mypy`, we enforce the good use of code by checking that the correct parameters are being passed in and the correct results are being returned prior to runtime making it safe to scale and write correct code most of the time. 

## Conclusion

Python is a very expressive language that allows applications to be prototyped in no time. However, the tradeoff is that writing new code or returning to it at a later time without documenting it, particularly the types needed by functions or classes to produce an accurate result can be unsafe. Some existing practices such as docstrings and unit tests can help with documenting and writing safe code. However, tools like `mypy` and the recently introduced type hints achieve what both docstrings and unit tests do in less time and code. This is not to say that these tools are perfect and ideally, unit tests, docstrings and type hints are all integrated to make developers more productive and create safe, scalable code. Happy coding!


]]&gt;</description>
      <link>https://www.lqdev.me/posts/type-driven-development-scaling-safely-with-python</link>
      <guid>https://www.lqdev.me/posts/type-driven-development-scaling-safely-with-python</guid>
      <pubDate>2018-03-24 18:16:31 -05:00</pubDate>
      <category>python</category>
      <category>static typing</category>
      <category>productivity</category>
      <category>programming</category>
      <category>development</category>
    </item>
  </channel>
</rss>