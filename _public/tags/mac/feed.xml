<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>Luis Quintanilla - mac</title>
    <link>https://www.lqdev.me/tags/mac</link>
    <description>All content tagged with 'mac' by Luis Quintanilla</description>
    <lastBuildDate>12/23/2023 13:13 -05:00</lastBuildDate>
    <language>en</language>
    <item>
      <title>lqdev.me Post Metrics</title>
      <description>&lt;![CDATA[&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;Generates an aggregate analysis of posts on &lt;a href="https://www.lqdev.me"&gt;lqdev.me / luisquintanilla.me&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;dotnet fsi stats.fsx 
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Snippet&lt;/h2&gt;
&lt;h3&gt;stats.fsx&lt;/h3&gt;
&lt;pre&gt;&lt;code class="language-fsharp"&gt;// Reference DLL
#r &amp;quot;../bin/Debug/net8.0/PersonalSite.dll&amp;quot;

// Add modules
open Domain
open Builder
open System

// Load posts
let posts = loadPosts()
let notes = loadFeed ()
let responses = loadReponses ()

// Organize posts by year
let postCountsByYear = 
    posts
    |&amp;gt; Array.countBy (fun (x:Post) -&amp;gt; DateTime.Parse(x.Metadata.Date) |&amp;gt; _.Year)
    |&amp;gt; Array.sortByDescending fst 

let noteCountsByYear = 
    notes
    |&amp;gt; Array.countBy (fun (x:Post) -&amp;gt; DateTime.Parse(x.Metadata.Date) |&amp;gt; _.Year)
    |&amp;gt; Array.sortByDescending fst

let responseCountsByYear = 
    responses
    |&amp;gt; Array.countBy (fun (x:Response) -&amp;gt; DateTime.Parse(x.Metadata.DatePublished) |&amp;gt; _.Year)
    |&amp;gt; Array.sortByDescending fst

// Organize responses by type
let responsesByType = 
    responses
    |&amp;gt; Array.filter(fun x -&amp;gt; (DateTime.Parse(x.Metadata.DatePublished) |&amp;gt; _.Year) = DateTime.UtcNow.Year)
    |&amp;gt; Array.countBy(fun x -&amp;gt; x.Metadata.ResponseType)
    |&amp;gt; Array.sortByDescending(snd)

// Organize responses by tag
let responsesByTag = 
    responses
    |&amp;gt; Array.filter(fun x -&amp;gt; (DateTime.Parse(x.Metadata.DatePublished) |&amp;gt; _.Year) = DateTime.UtcNow.Year)
    |&amp;gt; Array.collect(fun x -&amp;gt; 
            match x.Metadata.Tags with
            | null -&amp;gt; [|&amp;quot;untagged&amp;quot;|]
            | [||] -&amp;gt; [|&amp;quot;untagged&amp;quot;|]
            | _ -&amp;gt; x.Metadata.Tags
        )
    |&amp;gt; Array.countBy(fun x -&amp;gt; x)
    |&amp;gt; Array.sortByDescending(snd)

// Organize responses by host name (domain)
let responsesByDomain = 
    responses
    |&amp;gt; Array.filter(fun x -&amp;gt; (DateTime.Parse(x.Metadata.DatePublished) |&amp;gt; _.Year) = DateTime.UtcNow.Year)
    |&amp;gt; Array.countBy(fun x -&amp;gt; Uri(x.Metadata.TargetUrl).Host)
    |&amp;gt; Array.sortByDescending(snd)

// Utility function to display counts
let printEntryCounts&amp;lt;'a&amp;gt; (title:string) (entryCounts:('a * int) array) (n:int) = 
    printfn $&amp;quot;{title}&amp;quot;

    match entryCounts.Length with
    | 0 -&amp;gt; 
        printfn $&amp;quot;No entries&amp;quot;
        printfn $&amp;quot;&amp;quot;
    | a when a &amp;gt; 0 -&amp;gt; 
        match n with 
        | n when n = -1 || n &amp;gt; entryCounts.Length -&amp;gt; 
            entryCounts
            |&amp;gt; Array.iter(fun x -&amp;gt; printfn $&amp;quot;{fst x} {snd x}&amp;quot;)
            |&amp;gt; fun _ -&amp;gt; printfn $&amp;quot;&amp;quot;
        | n when n &amp;gt; 0 -&amp;gt; 
            entryCounts
            |&amp;gt; Array.take n
            |&amp;gt; Array.iter(fun x -&amp;gt; printfn $&amp;quot;{fst x} {snd x}&amp;quot;)
            |&amp;gt; fun _ -&amp;gt; printfn $&amp;quot;&amp;quot;

// Print yearly counts
printEntryCounts &amp;quot;Blogs&amp;quot; postCountsByYear 2

printEntryCounts &amp;quot;Notes&amp;quot; noteCountsByYear 2

printEntryCounts &amp;quot;Responses&amp;quot; responseCountsByYear 2

// Print response types
printEntryCounts &amp;quot;Response Types&amp;quot; responsesByType -1

// Print response tag counts
printEntryCounts &amp;quot;Response Tags&amp;quot; responsesByTag 5

// Print response by host name
printEntryCounts &amp;quot;Domains&amp;quot; responsesByDomain 5
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Expected Output&lt;/h2&gt;
&lt;pre&gt;&lt;code class="language-text"&gt;Blogs
2023 5
2022 7

Notes
2023 34
2022 36

Responses
2023 216
2022 146

Response Types
bookmark 151
reshare 48
reply 10
star 7

Response Tags
ai 104
llm 42
untagged 41
opensource 31
internet 17

Domains
github.com 15
huggingface.co 11
arxiv.org 10
openai.com 6
www.theverge.com 4
&lt;/code&gt;&lt;/pre&gt;
]]&gt;</description>
      <link>https://www.lqdev.me/resources/snippets/lqdev-me-website-post-metrics</link>
      <guid>https://www.lqdev.me/resources/snippets/lqdev-me-website-post-metrics</guid>
      <pubDate>12/23/2023 13:13 -05:00</pubDate>
      <category>analytics</category>
      <category>website</category>
      <category>blog</category>
      <category>blogging</category>
      <category>pkm</category>
      <category>indieweb</category>
      <category>dotnet</category>
      <category>windows</category>
      <category>linux</category>
      <category>mac</category>
    </item>
  </channel>
</rss>