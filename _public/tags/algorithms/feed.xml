<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>Luis Quintanilla - algorithms</title>
    <link>https://www.lqdev.me/tags/algorithms</link>
    <description>All content tagged with 'algorithms' by Luis Quintanilla</description>
    <lastBuildDate>2024-12-17 19:03 -05:00</lastBuildDate>
    <language>en</language>
    <item>
      <title>StreamBuilder: our open-source framework for powering your dashboard</title>
      <description>&lt;![CDATA[[reshare] &lt;p&gt;Interesting post. Whether building your feeds or plugging into existing platforms like &lt;a href="https://bsky.social/about/blog/3-30-2023-algorithmic-choice"&gt;Bluesky&lt;/a&gt;, this framework could serve as a good starting point.&lt;/p&gt;
&lt;blockquote class="blockquote"&gt;
&lt;p&gt;Today, we’re abnormally jazzed to announce that we’re open-sourcing the custom framework we built to power your dashboard on Tumblr. We call it StreamBuilder, and we’ve been using it for many years.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote class="blockquote"&gt;
&lt;p&gt;StreamBuilder has a lot going on. The primary architecture centers around “streams” of content: whether posts from a blog, a list of blogs you’re following, posts using a specific tag, or posts relating to a search. These are separate kinds of streams, which can be mixed together, filtered based on certain criteria, ranked for relevancy or engagement likelihood, and more.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote class="blockquote"&gt;
&lt;p&gt;So, what’s included in the box?&lt;br /&gt;
&lt;br&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The full framework library of code that we use today, on Tumblr, to power almost every feed of content you see on the platform.&lt;/li&gt;
&lt;li&gt;A YAML syntax for composing streams of content, and how to filter, inject, and rank them.&lt;/li&gt;
&lt;li&gt;Abstractions for programmatically composing, filtering, ranking, injecting, and debugging streams.&lt;/li&gt;
&lt;li&gt;Abstractions for composing streams together—such as with carousels, for streams-within-streams.&lt;/li&gt;
&lt;li&gt;An abstraction for cursor-based pagination for complex stream templates.&lt;/li&gt;
&lt;li&gt;Unit tests covering the public interface for the library and most of the underlying code.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="https://github.com/Automattic/stream-builder"&gt;GitHub Repo&lt;/a&gt;&lt;/p&gt;
]]&gt;</description>
      <link>https://www.lqdev.me/responses/streambuilder-tumblr-framework-building-feed</link>
      <guid>https://www.lqdev.me/responses/streambuilder-tumblr-framework-building-feed</guid>
      <pubDate>2024-12-17 19:03 -05:00</pubDate>
      <category>tumblr</category>
      <category>algorithms</category>
      <category>feed</category>
      <category>socialmedia</category>
    </item>
    <item>
      <title>Algorithms for Modern Hardware</title>
      <description>&lt;![CDATA[[bookmark] &lt;blockquote class="blockquote"&gt;
&lt;p&gt;This is an upcoming high performance computing book titled “Algorithms for Modern Hardware” by Sergey Slotin.&lt;br /&gt;
&lt;br&gt;
Its intended audience is everyone from performance engineers and practical algorithm researchers to undergraduate computer science students who have just finished an advanced algorithms course and want to learn more practical ways to speed up a program than by going from O(nlog⁡n)O(nlogn) to O(nlog⁡log⁡n)O(nloglogn).&lt;/p&gt;
&lt;/blockquote&gt;
]]&gt;</description>
      <link>https://www.lqdev.me/bookmarks/algorithms-modern-hardware-book</link>
      <guid>https://www.lqdev.me/bookmarks/algorithms-modern-hardware-book</guid>
      <pubDate>2024-03-17 21:20 -05:00</pubDate>
      <category>book</category>
      <category>algorithms</category>
      <category>hardware</category>
    </item>
    <item>
      <title>The missing graph datatype already exists. It was invented in the '70s</title>
      <description>&lt;![CDATA[[reshare] &lt;blockquote class="blockquote"&gt;
&lt;p&gt;The datatype for a graph is a relation, and graph algorithms are queries on the relation. But modern languages need better support for the relational model.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote class="blockquote"&gt;
&lt;p&gt;This post is a response to/inspired by &lt;a href="https://www.hillelwayne.com/post/graph-types/"&gt;The Hunt for the Missing Data Type (HN) by Hillel Wayne&lt;/a&gt;. I suggest reading his article first.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote class="blockquote"&gt;
&lt;p&gt;I claim the reason why it is so difficult to support graphs in languages nowadays is because the imperative/structured programming model of modern programming languages is ill-suited for graph algorithms. As Wayne correctly points out, the core problem is that when you write a graph algorithm in an imperative language like Python or Rust, you have to choose some explicit representation for the graph. Then, your traversal algorithm is dependent on the representation you chose. If you find out later that your representation is no longer efficient, it is a lot of work to adapt your algorithms for a new representation.&lt;br /&gt;
&lt;br&gt;
So what if we just, like, didn’t do this?&lt;br /&gt;
&lt;br&gt;
We already have a declarative programming language where expressing graph algorithms is extremely natural—Datalog, whose semantics are based on* the relational algebra, which was developed in the 1970s.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote class="blockquote"&gt;
&lt;p&gt;Wonderful! Except for the “writing Datalog” part.&lt;br /&gt;
&lt;br&gt;
If Datalog is so great, why hasn’t it seen more adoption?&lt;br /&gt;
&lt;br&gt;
The short answer is that Datalog is relatively esoteric outside of academia and some industry applications and, as a result, is not a great language from a “software engineering” perspective. It is hard for programmers accustomed to imperative code to write Datalog programs, and large Datalog programs can be hard to write and understand.&lt;/p&gt;
&lt;/blockquote&gt;
]]&gt;</description>
      <link>https://www.lqdev.me/responses/datalog-the-missing-graph-data-type-already-exists</link>
      <guid>https://www.lqdev.me/responses/datalog-the-missing-graph-data-type-already-exists</guid>
      <pubDate>2024-03-06 21:39 -05:00</pubDate>
      <category>datalog</category>
      <category>programming</category>
      <category>graphs</category>
      <category>datatypes</category>
      <category>programminglanguages</category>
      <category>software</category>
      <category>database</category>
      <category>algorithms</category>
    </item>
  </channel>
</rss>