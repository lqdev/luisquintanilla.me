<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>Luis Quintanilla - synapse</title>
    <link>https://www.lqdev.me/tags/synapse</link>
    <description>All content tagged with 'synapse' by Luis Quintanilla</description>
    <lastBuildDate>2023-06-11 21:32 -05:00</lastBuildDate>
    <language>en</language>
    <item>
      <title>Matrix Synapse REALLY needs an Admin UI</title>
      <description>&lt;![CDATA[&lt;p&gt;Spent the day playing sysadmin and removed about 50GB worth of data from my Matrix Synapse instance. Like Mastodon, most of that data wasn't even mine. Most of it comes is remote data from other users in large rooms. I really like Matrix and the ability to host my own messaging server that provides end-to-end encryption as well as federation with other instances. However, not having a straight-forward way of managing my server and cleaning up resources is painful.&lt;/p&gt;
&lt;p&gt;Anyway, if anyone is interested, here are some resources that have helped me in this process.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.lqdev.me/resources/wiki/matrix-synapse-admin"&gt;Matrix Synapse Server Administration&lt;/a&gt;&lt;/p&gt;
]]&gt;</description>
      <link>https://www.lqdev.me/notes/matrix-synapse-needs-admin-ui</link>
      <guid>https://www.lqdev.me/notes/matrix-synapse-needs-admin-ui</guid>
      <pubDate>2023-06-11 21:32 -05:00</pubDate>
      <category>matrix</category>
      <category>selfhost</category>
      <category>synapse</category>
      <category>opensource</category>
      <category>sysadmin</category>
      <category>messaging</category>
    </item>
    <item>
      <title>Matrix Synapse Server Administration</title>
      <description>&lt;![CDATA[&lt;h2&gt;Overview&lt;/h2&gt;
&lt;p&gt;The following is a guide for managing &lt;a href="https://github.com/matrix-org/synapse"&gt;Matrix Synapse&lt;/a&gt; servers.&lt;/p&gt;
&lt;h2&gt;Upgrade&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Initialize Python virtual environment&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;source env/bin/activate
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Stop server&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;synctl stop
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Upgrade Synapse package&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;pip install --upgrade matrix-synapse[postgres]
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Restart server&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;synctl restart
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Deactivate Python virtual environment&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;deactivate
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Check version&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;curl http://localhost:8008/_synapse/admin/v1/server_version
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Clean up storage&lt;/h2&gt;
&lt;h3&gt;Delete old media&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Run the following command to clean local meadia older than 30 days.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;curl -X POST -H &amp;quot;Authorization: Bearer access_token&amp;quot; http://localhost:8008/_synapse/admin/v1/media/delete?before_ts=$(date +%s000 --date &amp;quot;30 days ago&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Start PSQL&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;psql
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Connect to database&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-sql"&gt;\c synapse
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Clean up unreferenced itemes&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;VACUUM FULL;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Delete items in database&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Start PSQL&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;psql
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Connect to database&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-sql"&gt;\c synapse
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Run the following SQL script&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-sql"&gt;DROP FUNCTION IF EXISTS synapse_clean_redacted_messages();
CREATE FUNCTION synapse_clean_redacted_messages()
    RETURNS void AS $$
    DECLARE
    BEGIN
        UPDATE events SET content = '{}' FROM redactions AS rdc
            WHERE events.event_id = rdc.redacts
            AND (events.type = 'm.room.encrypted' OR events.type = 'm.room.message');
    END;
$$ LANGUAGE 'plpgsql';

DROP FUNCTION IF EXISTS synapse_get_server_name();
CREATE FUNCTION synapse_get_server_name()
    RETURNS text AS $$
    DECLARE
        _someUser TEXT;
        _serverName TEXT;
    BEGIN
        select user_id from account_data limit 1 INTO _someUser;
        select regexp_replace(_someUser, '^.*:', ':') INTO _serverName;
        RETURN _serverName;
    END;
$$ LANGUAGE 'plpgsql';

DROP FUNCTION IF EXISTS synapse_get_unused_rooms();
CREATE FUNCTION synapse_get_unused_rooms()
    RETURNS TABLE(room_id TEXT) AS $$
    DECLARE
    BEGIN
        RETURN QUERY SELECT r.room_id FROM rooms AS r WHERE r.room_id NOT IN (
            SELECT DISTINCT(m.room_id) FROM room_memberships as m
                INNER JOIN current_state_events as c
                ON m.event_id = c.event_id
                AND m.room_id = c.room_id
                AND m.user_id = c.state_key
                WHERE c.type = 'm.room.member'
                AND m.membership = 'join'
                AND m.user_id LIKE concat('%', synapse_get_server_name())
        );
    END;
$$ LANGUAGE 'plpgsql';

DROP FUNCTION IF EXISTS synapse_clean_unused_rooms();
CREATE FUNCTION synapse_clean_unused_rooms()
    RETURNS void AS $$
    DECLARE
        _count INT;
    BEGIN
        CREATE TEMP TABLE synapse_clean_unused_rooms__tmp
            ON COMMIT DROP
            AS SELECT room_id FROM synapse_get_unused_rooms();

        SELECT COUNT(*) FROM synapse_clean_unused_rooms__tmp INTO _count;
        RAISE NOTICE 'synapse_clean_unused_rooms() Cleaning up % unused rooms', _count;

        DELETE FROM event_forward_extremities AS x WHERE x.room_id IN (SELECT y.room_id FROM synapse_clean_unused_rooms__tmp AS y);
        RAISE NOTICE 'DONE: event_forward_extremities';

        DELETE FROM event_backward_extremities AS x WHERE x.room_id IN (SELECT y.room_id FROM synapse_clean_unused_rooms__tmp AS y);
        RAISE NOTICE 'DONE: event_backward_extremities';

        DELETE FROM event_edges AS x WHERE x.room_id IN (SELECT y.room_id FROM synapse_clean_unused_rooms__tmp AS y);
        RAISE NOTICE 'DONE: event_edges';

        DELETE FROM room_depth AS x WHERE x.room_id IN (SELECT y.room_id FROM synapse_clean_unused_rooms__tmp AS y);
        RAISE NOTICE 'DONE: room_depth';

        DELETE FROM events AS x WHERE x.room_id IN (SELECT y.room_id FROM synapse_clean_unused_rooms__tmp AS y);
        RAISE NOTICE 'DONE: events';

        DELETE FROM event_json AS x WHERE x.room_id IN (SELECT y.room_id FROM synapse_clean_unused_rooms__tmp AS y);
        RAISE NOTICE 'DONE: event_json';

        DELETE FROM state_events AS x WHERE x.room_id IN (SELECT y.room_id FROM synapse_clean_unused_rooms__tmp AS y);
        RAISE NOTICE 'DONE: state_events';

        DELETE FROM current_state_events AS x WHERE x.room_id IN (SELECT y.room_id FROM synapse_clean_unused_rooms__tmp AS y);
        RAISE NOTICE 'DONE: current_state_events';

        DELETE FROM room_memberships AS x WHERE x.room_id IN (SELECT y.room_id FROM synapse_clean_unused_rooms__tmp AS y);
        RAISE NOTICE 'DONE: room_memberships';

        DELETE FROM destination_rooms AS x WHERE x.room_id IN (SELECT y.room_id FROM synapse_clean_unused_rooms__tmp AS y);
        RAISE NOTICE 'DONE: destination_rooms';

        DELETE FROM event_failed_pull_attempts AS x WHERE x.room_id IN (SELECT y.room_id FROM synapse_clean_unused_rooms__tmp AS y);
        RAISE NOTICE 'DONE: event_failed_pull_attempts';

        DELETE FROM rooms AS x WHERE x.room_id IN (SELECT y.room_id FROM synapse_clean_unused_rooms__tmp AS y);
        RAISE NOTICE 'DONE: rooms';

        DELETE FROM room_aliases AS x WHERE x.room_id IN (SELECT y.room_id FROM synapse_clean_unused_rooms__tmp AS y);
        RAISE NOTICE 'DONE: room_aliases';

        DELETE FROM state_groups AS x WHERE x.room_id IN (SELECT y.room_id FROM synapse_clean_unused_rooms__tmp AS y);
        RAISE NOTICE 'DONE: state_groups';

        DELETE FROM state_groups_state AS x WHERE x.room_id IN (SELECT y.room_id FROM synapse_clean_unused_rooms__tmp AS y);
        RAISE NOTICE 'DONE: state_groups_state';

        DELETE FROM receipts_graph AS x WHERE x.room_id IN (SELECT y.room_id FROM synapse_clean_unused_rooms__tmp AS y);
        RAISE NOTICE 'DONE: receipts_graph';

        DELETE FROM receipts_linearized AS x WHERE x.room_id IN (SELECT y.room_id FROM synapse_clean_unused_rooms__tmp AS y);
        RAISE NOTICE 'DONE: receipts_linearized';

        DELETE FROM room_tags AS x WHERE x.room_id IN (SELECT y.room_id FROM synapse_clean_unused_rooms__tmp AS y);
        RAISE NOTICE 'DONE: room_tags';

        DELETE FROM room_tags_revisions AS x WHERE x.room_id IN (SELECT y.room_id FROM synapse_clean_unused_rooms__tmp AS y);
        RAISE NOTICE 'DONE: room_tags_revisions';

        DELETE FROM room_account_data AS x WHERE x.room_id IN (SELECT y.room_id FROM synapse_clean_unused_rooms__tmp AS y);
        RAISE NOTICE 'DONE: room_account_data';

        DELETE FROM event_push_actions AS x WHERE x.room_id IN (SELECT y.room_id FROM synapse_clean_unused_rooms__tmp AS y);
        RAISE NOTICE 'DONE: event_push_actions';

        DELETE FROM pusher_throttle AS x WHERE x.room_id IN (SELECT y.room_id FROM synapse_clean_unused_rooms__tmp AS y);
        RAISE NOTICE 'DONE: pusher_throttle';

        DELETE FROM event_reports AS x WHERE x.room_id IN (SELECT y.room_id FROM synapse_clean_unused_rooms__tmp AS y);
        RAISE NOTICE 'DONE: event_reports';

        DELETE FROM stream_ordering_to_exterm AS x WHERE x.room_id IN (SELECT y.room_id FROM synapse_clean_unused_rooms__tmp AS y);
        RAISE NOTICE 'DONE: stream_ordering_to_exterm';

        DELETE FROM event_auth AS x WHERE x.room_id IN (SELECT y.room_id FROM synapse_clean_unused_rooms__tmp AS y);
        RAISE NOTICE 'DONE: event_auth';

        DELETE FROM appservice_room_list AS x WHERE x.room_id IN (SELECT y.room_id FROM synapse_clean_unused_rooms__tmp AS y);
        RAISE NOTICE 'DONE: appservice_room_list';
    END;
$$ LANGUAGE 'plpgsql';

SELECT synapse_clean_redacted_messages();
SELECT synapse_clean_unused_rooms();
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Clean up unreferenced tuples&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-sql"&gt;VACUUM FULL;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://matrix-org.github.io/synapse/latest/welcome_and_overview.html"&gt;Matrix Synapse Docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://matrix-org.github.io/synapse/latest/upgrade.html"&gt;Upgrading Synapse&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://matrix-org.github.io/synapse/v1.38/admin_api/media_admin_api.html"&gt;Admin Media API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/xwiki-labs/synapse_scripts"&gt;Synapse Scripts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
]]&gt;</description>
      <link>https://www.lqdev.me/resources/wiki/matrix-synapse-admin</link>
      <guid>https://www.lqdev.me/resources/wiki/matrix-synapse-admin</guid>
      <pubDate>06/11/2023 21:13 -05:00</pubDate>
      <category>messaging</category>
      <category>how-to</category>
      <category>matrix</category>
      <category>self-host</category>
      <category>synapse</category>
      <category>sql</category>
      <category>python</category>
    </item>
    <item>
      <title>Upgrade Matrix Synapse homeserver</title>
      <description>&lt;![CDATA[&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;Upgrade a &lt;a href="https://matrix.org/"&gt;Matrix&lt;/a&gt; &lt;a href="https://github.com/matrix-org/synapse/"&gt;Synapse homeserver&lt;/a&gt; using pip. For more information, see the official article on &lt;a href="https://matrix-org.github.io/synapse/develop/upgrade"&gt;upgrading between Synapse versions&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;./update-matrix-homeserver.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Snippet&lt;/h2&gt;
&lt;h3&gt;update-matrix-homeserver.sh&lt;/h3&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;# Initialize Python virtual environment
source ./env/bin/activate

# Upgrade using pip
# For PostgreSQL packages, use matrix-synapse[postgres]
pip install --upgrade matrix-synapse

# Restart server
synctl restart

# Check version
curl http://localhost:8008/_synapse/admin/v1/server_version

# Deactivate Python virtual environment
deactivate
&lt;/code&gt;&lt;/pre&gt;
]]&gt;</description>
      <link>https://www.lqdev.me/resources/snippets/update-matrix-synapse-homeserver</link>
      <guid>https://www.lqdev.me/resources/snippets/update-matrix-synapse-homeserver</guid>
      <pubDate>08/31/2022 19:40 -05:00</pubDate>
      <category>matrix</category>
      <category>synapse</category>
      <category>homeserver</category>
      <category>selfhost</category>
      <category>python</category>
      <category>internet</category>
      <category>network</category>
    </item>
    <item>
      <title>Create a new Matrix user using the CLI</title>
      <description>&lt;![CDATA[&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;Create a new user in your &lt;a href="https://matrix.org/"&gt;Matrix&lt;/a&gt; &lt;a href="https://github.com/matrix-org/synapse/"&gt;Synapse homeserver&lt;/a&gt; using &lt;a href="https://manpages.debian.org/buster/matrix-synapse/register_new_matrix_user.1.en.html"&gt;register_new_matrix_user&lt;/a&gt; CLI utility. This is helpful when creating accounts on a homeserver where registrations are closed.&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;N/A&lt;/p&gt;
&lt;h2&gt;Snippet&lt;/h2&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;register_new_matrix_user --user user1 --password p@ssword --config homeserver-config.yaml
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;--user&lt;/strong&gt;: Local part of the new user. Will prompt if omitted.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;--password&lt;/strong&gt;: New password for user. Will prompt if omitted. Supplying the password on the command line is not recommended. Use the STDIN instead.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;--config&lt;/strong&gt;: Path to server config file containing the shared secret.&lt;/li&gt;
&lt;/ul&gt;
]]&gt;</description>
      <link>https://www.lqdev.me/resources/snippets/create-matrix-user-cli</link>
      <guid>https://www.lqdev.me/resources/snippets/create-matrix-user-cli</guid>
      <pubDate>08/31/2022 19:40 -05:00</pubDate>
      <category>bash</category>
      <category>linux</category>
      <category>matrix</category>
      <category>synapse</category>
      <category>communication</category>
    </item>
    <item>
      <title>Success! Matrix migration complete</title>
      <description>&lt;![CDATA[&lt;p&gt;It only took 6 hours but I was able to get it done with a little help.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://media.giphy.com/media/mIZ9rPeMKefm0/giphy.gif" class="img-fluid" alt="Bender from Futurama happy dance" /&gt;&lt;/p&gt;
]]&gt;</description>
      <link>https://www.lqdev.me/notes/matrix-migration-complete</link>
      <guid>https://www.lqdev.me/notes/matrix-migration-complete</guid>
      <pubDate>10/09/2021 12:23 AM -05:00</pubDate>
      <category>selfhost</category>
      <category>matrix</category>
      <category>messaging</category>
      <category>opensource</category>
      <category>element</category>
      <category>synapse</category>
    </item>
  </channel>
</rss>