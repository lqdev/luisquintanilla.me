<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>Luis Quintanilla - programminglanguages</title>
    <link>https://www.lqdev.me/tags/programminglanguages</link>
    <description>All content tagged with 'programminglanguages' by Luis Quintanilla</description>
    <lastBuildDate>2024-03-06 21:39 -05:00</lastBuildDate>
    <language>en</language>
    <item>
      <title>The missing graph datatype already exists. It was invented in the '70s</title>
      <description>&lt;![CDATA[[reshare] &lt;blockquote class="blockquote"&gt;
&lt;p&gt;The datatype for a graph is a relation, and graph algorithms are queries on the relation. But modern languages need better support for the relational model.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote class="blockquote"&gt;
&lt;p&gt;This post is a response to/inspired by &lt;a href="https://www.hillelwayne.com/post/graph-types/"&gt;The Hunt for the Missing Data Type (HN) by Hillel Wayne&lt;/a&gt;. I suggest reading his article first.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote class="blockquote"&gt;
&lt;p&gt;I claim the reason why it is so difficult to support graphs in languages nowadays is because the imperative/structured programming model of modern programming languages is ill-suited for graph algorithms. As Wayne correctly points out, the core problem is that when you write a graph algorithm in an imperative language like Python or Rust, you have to choose some explicit representation for the graph. Then, your traversal algorithm is dependent on the representation you chose. If you find out later that your representation is no longer efficient, it is a lot of work to adapt your algorithms for a new representation.&lt;br /&gt;
&lt;br&gt;
So what if we just, like, didn‚Äôt do this?&lt;br /&gt;
&lt;br&gt;
We already have a declarative programming language where expressing graph algorithms is extremely natural‚ÄîDatalog, whose semantics are based on* the relational algebra, which was developed in the 1970s.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote class="blockquote"&gt;
&lt;p&gt;Wonderful! Except for the ‚Äúwriting Datalog‚Äù part.&lt;br /&gt;
&lt;br&gt;
If Datalog is so great, why hasn‚Äôt it seen more adoption?&lt;br /&gt;
&lt;br&gt;
The short answer is that Datalog is relatively esoteric outside of academia and some industry applications and, as a result, is not a great language from a ‚Äúsoftware engineering‚Äù perspective. It is hard for programmers accustomed to imperative code to write Datalog programs, and large Datalog programs can be hard to write and understand.&lt;/p&gt;
&lt;/blockquote&gt;
]]&gt;</description>
      <link>https://www.lqdev.me/responses/datalog-the-missing-graph-data-type-already-exists</link>
      <guid>https://www.lqdev.me/responses/datalog-the-missing-graph-data-type-already-exists</guid>
      <pubDate>2024-03-06 21:39 -05:00</pubDate>
      <category>datalog</category>
      <category>programming</category>
      <category>graphs</category>
      <category>datatypes</category>
      <category>programminglanguages</category>
      <category>software</category>
      <category>database</category>
      <category>algorithms</category>
    </item>
    <item>
      <title>TIOBE Index for January 2024</title>
      <description>&lt;![CDATA[[bookmark] &lt;blockquote class="blockquote"&gt;
&lt;p&gt;For the first time in the history of the TIOBE index, C# has won the programming language of the year award. Congratulations! C# has been a top 10 player for more than 2 decades and now that it is catching up with the big 4 languages, it won the well-deserved award by being the language with the biggest uptick in one year (+1.43%).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Exciting to see F# almost break into the Top 20 at number 22 with 0.77%.&lt;/p&gt;
]]&gt;</description>
      <link>https://www.lqdev.me/bookmarks/tiobe-index-january-2024</link>
      <guid>https://www.lqdev.me/bookmarks/tiobe-index-january-2024</guid>
      <pubDate>2024-01-07 22:52 -05:00</pubDate>
      <category>programming</category>
      <category>dotnet</category>
      <category>technology</category>
      <category>fsharp</category>
      <category>csharp</category>
      <category>programminglanguages</category>
    </item>
    <item>
      <title>Modular: Mojoüî• - It‚Äôs finally here!</title>
      <description>&lt;![CDATA[[bookmark] &lt;blockquote class="blockquote"&gt;
&lt;p&gt;Today, we‚Äôre excited to announce the next big step in Mojo‚Äôs evolution: Mojo is now available for &lt;a href="https://developer.modular.com/"&gt;local download&lt;/a&gt; ‚Äì beginning with Linux systems, and adding Mac and Windows in coming releases.&lt;/p&gt;
&lt;/blockquote&gt;
]]&gt;</description>
      <link>https://www.lqdev.me/bookmarks/mojo-available-local-download</link>
      <guid>https://www.lqdev.me/bookmarks/mojo-available-local-download</guid>
      <pubDate>2023-09-10 10:37 -05:00</pubDate>
      <category>ai</category>
      <category>python</category>
      <category>programminglanguages</category>
    </item>
  </channel>
</rss>