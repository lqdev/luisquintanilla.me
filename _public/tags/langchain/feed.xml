<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>Luis Quintanilla - langchain</title>
    <link>https://www.lqdev.me/tags/langchain</link>
    <description>All content tagged with 'langchain' by Luis Quintanilla</description>
    <lastBuildDate>2024-12-29 12:12 -05:00</lastBuildDate>
    <language>en</language>
    <item>
      <title>LangChain State of AI 2024 Report</title>
      <description>&lt;![CDATA[[reshare] &lt;blockquote class="blockquote"&gt;
&lt;p&gt;In 2024, developers leaned into complexity with multi-step agents, sharpened efficiency by doing more with fewer LLM calls, and added quality checks to their apps using methods of feedback and evaluation.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src="https://blog.langchain.dev/content/images/size/w1600/2024/12/Top-10-LLM-Providers-bar-chart.png" class="img-fluid" alt="Bar Chart Showing Top 10 LLMs Used 2024" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://blog.langchain.dev/content/images/size/w1600/2024/12/Top-10-Retrievers--1-.png" class="img-fluid" alt="Graphic showing Top 10 Retrievers / Vector Stores 2024" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://blog.langchain.dev/content/images/size/w1600/2024/12/Top-evaluation-metrics--1-.png" class="img-fluid" alt="Graphic showing Top LLM Evaluation Metrics 2024" /&gt;&lt;/p&gt;
]]&gt;</description>
      <link>https://www.lqdev.me/responses/langchain-state-of-ai-2024</link>
      <guid>https://www.lqdev.me/responses/langchain-state-of-ai-2024</guid>
      <pubDate>2024-12-29 12:12 -05:00</pubDate>
      <category>ai</category>
      <category>2024</category>
      <category>report</category>
      <category>langchain</category>
      <category>llm</category>
    </item>
    <item>
      <title>Enhancing RAG-based application accuracy by constructing and leveraging knowledge graphs</title>
      <description>&lt;![CDATA[[reshare] &lt;blockquote class="blockquote"&gt;
&lt;p&gt;A practical guide to constructing and retrieving information from knowledge graphs in RAG applications with Neo4j and LangChain&lt;br /&gt;
&lt;br&gt;
Graph retrieval augmented generation (Graph RAG) is gaining momentum and emerging as a powerful addition to traditional vector search retrieval methods. This approach leverages the structured nature of graph databases, which organize data as nodes and relationships, to enhance the depth and contextuality of retrieved information.&lt;/p&gt;
&lt;/blockquote&gt;
]]&gt;</description>
      <link>https://www.lqdev.me/responses/enhace-rag-application-accuracy-knowledge-graphs</link>
      <guid>https://www.lqdev.me/responses/enhace-rag-application-accuracy-knowledge-graphs</guid>
      <pubDate>2024-03-17 21:29 -05:00</pubDate>
      <category>knowledgegraph</category>
      <category>rag</category>
      <category>genai</category>
      <category>langchain</category>
      <category>generativeai</category>
      <category>retrievalaugmentedgeneration</category>
      <category>patterns</category>
      <category>applicationpatterns</category>
    </item>
    <item>
      <title>LangChain - OpenGPTs</title>
      <description>&lt;![CDATA[[bookmark] &lt;blockquote class="blockquote"&gt;
&lt;p&gt;A little over two months ago, on the heels of OpenAI dev day, we launched OpenGPTs: a take on what an open-source GPT store may look like. It was powered by an early version of LangGraph - an extension of LangChain aimed at building agents as graphs. At the time, we did not highlight this new package much, as we had not publicly launched it and were still figuring out the interface. We finally got around to launching LangGraph two weeks ago, and over the past weekend we updated OpenGPTs to fully use LangGraph (as well as added some new features). We figure now is as good of time as any to do a technical deep-dive on OpenGPTs and what powers it.&lt;br /&gt;
&lt;br&gt;
In this blog, we will talk about:&lt;br /&gt;
&lt;br&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MessageGraph: A particular type of graph that OpenGPTs runs on&lt;/li&gt;
&lt;li&gt;Cognitive architectures: What the 3 different types of cognitive architectures OpenGPTs supports are, and how they differ&lt;/li&gt;
&lt;li&gt;Persistence: How persistence is baked in OpenGPTs via LangGraph checkpoints.&lt;/li&gt;
&lt;li&gt;Configuration: How we use LangChain primitives to configure all these different bots.&lt;/li&gt;
&lt;li&gt;New models: what new models we support&lt;/li&gt;
&lt;li&gt;New tools: what new tools we support&lt;/li&gt;
&lt;li&gt;astream_events: How we are using this new method to stream tokens and intermediate steps&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
]]&gt;</description>
      <link>https://www.lqdev.me/bookmarks/langchain-opengpts</link>
      <guid>https://www.lqdev.me/bookmarks/langchain-opengpts</guid>
      <pubDate>2024-01-31 21:30 -05:00</pubDate>
      <category>langchain</category>
      <category>gpt</category>
      <category>ai</category>
      <category>opengpt</category>
      <category>langgraph</category>
      <category>messagegraph</category>
    </item>
  </channel>
</rss>