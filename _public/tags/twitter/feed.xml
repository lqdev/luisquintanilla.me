<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>Luis Quintanilla - twitter</title>
    <link>https://www.lqdev.me/tags/twitter</link>
    <description>All content tagged with 'twitter' by Luis Quintanilla</description>
    <lastBuildDate>2024-05-26 17:00 -05:00</lastBuildDate>
    <language>en</language>
    <item>
      <title>False alarm - Link is in X bio</title>
      <description>&lt;![CDATA[&lt;p&gt;I may have spoken too early in my &lt;a href="https://www.lqdev.me/notes/no-link-in-bio-x-twitter"&gt;post about X not displaying bio links correctly&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Not sure if it was a glitch or what was going on, but I now see my domain correctly displayed as the bio link. All good.&lt;/p&gt;
&lt;p&gt;I'd be interested in knowing whether others have experienced something similar.&lt;/p&gt;
]]&gt;</description>
      <link>https://www.lqdev.me/notes/false-alarm-link-in-bio-x-twitter</link>
      <guid>https://www.lqdev.me/notes/false-alarm-link-in-bio-x-twitter</guid>
      <pubDate>2024-05-26 17:00 -05:00</pubDate>
      <category>x</category>
      <category>twitter</category>
      <category>website</category>
    </item>
    <item>
      <title>X (Twitter) - No more link in bio?</title>
      <description>&lt;![CDATA[&lt;p&gt;While making some updates to my X profile, I noticed the link displayed on my bio isn't the same one I configured in the form. Instead it's a t.co shortened link. I get I'm just a free user on the platform but that seems like an annoying change. I haven't found much details about the change, but I'd hope paying subscribers get the &amp;quot;perk&amp;quot; of having control over how the link on their bio displays.&lt;/p&gt;
&lt;p&gt;&lt;img src="http://i0.kym-cdn.com/entries/icons/original/000/019/304/old.jpg" class="img-fluid" alt="Simpsons Old Man Yells at Cloud Meme" /&gt;&lt;/p&gt;
]]&gt;</description>
      <link>https://www.lqdev.me/notes/no-link-in-bio-x-twitter</link>
      <guid>https://www.lqdev.me/notes/no-link-in-bio-x-twitter</guid>
      <pubDate>2024-05-26 15:48 -05:00</pubDate>
      <category>x</category>
      <category>twitter</category>
      <category>website</category>
    </item>
    <item>
      <title>We Don‚Äôt Need a New Twitter</title>
      <description>&lt;![CDATA[[reshare] &lt;blockquote class="blockquote"&gt;
&lt;p&gt;If Meta can succeed in capturing some of this peak-Twitter magic, while avoiding late-stage Twitter‚Äôs struggles, the company will perhaps even reclaim some of the cultural gravity that it squandered a decade ago when Facebook took its turn toward crazy-uncle irrelevance. But can Meta possibly succeed in building a saner, nicer Twitter?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote class="blockquote"&gt;
&lt;p&gt;Breaking news can spread quickly, as can clips that are funny in an original or strange way‚Äîbut these innocuous trends feel serendipitous, like a rainbow spanning storm clouds. To reach the Twitter masses, conspiracy, demagoguery, and cancellation are much more likely to succeed. The result is a Faustian bargain for our networked era: trusting the wisdom of crowds to identify what‚Äôs interesting can create an intensely compelling stream of shared content, but this content is likely to arrive drenched in rancor.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote class="blockquote"&gt;
&lt;p&gt;The obvious way Meta can attempt to escape this bargain is by moving Threads away from retransmission-based curation and toward algorithmic ranking. This will give the company more control over which discussions are amplified, but, in doing so, they will also lose the human-powered selectivity that makes Twitter so engaging.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote class="blockquote"&gt;
&lt;p&gt;If we look past this narrow discussion of Threads‚Äô challenges, however, a broader question arises: Why is it so important to create a better version of Twitter in the first place? Ignored amid the hand-wringing about the toxic turn taken by large-scale conversation platforms are the many smaller, less flashy sites and services that have long been supporting a more civilized form of digital interaction.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote class="blockquote"&gt;
&lt;p&gt;‚ÄúThe Internet has become the ultimate narrowcasting vehicle: everyone from UFO buffs to New York Yankee fans has a Website (or dozen) to call his own,‚Äù the journalist Richard Zoglin wrote in 1996. ‚ÄúA dot-com in every pot.‚Äù&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote class="blockquote"&gt;
&lt;p&gt;We‚Äôve gone from Zoglin‚Äôs dot-com in every pot to the social-media age‚Äôs vision of every pot being filled with slop &lt;a href="https://www.newyorker.com/culture/cultural-comment/tiktok-and-the-fall-of-the-social-media-giants"&gt;from the same platforms&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
]]&gt;</description>
      <link>https://www.lqdev.me/responses/no-new-twitter-newport</link>
      <guid>https://www.lqdev.me/responses/no-new-twitter-newport</guid>
      <pubDate>2023-08-28 20:46 -05:00</pubDate>
      <category>twitter</category>
      <category>socialmedia</category>
      <category>indieweb</category>
      <category>internet</category>
      <category>culture</category>
    </item>
    <item>
      <title>Twitter Circles: Top 150 friends</title>
      <description>&lt;![CDATA[&lt;p&gt;Twitter is testing a new feature called &lt;a href="https://www.theverge.com/2022/5/3/23055515/twitter-circle-close-friends-private-tweets-150-people"&gt;Twitter Circles&lt;/a&gt; where you can restrict the reach of your tweets to up to 150 people. I remember the days of MySpace where many relationships were made / broken as a result of being in someone's Top 8 Friends list &lt;span&gt;üòÜ&lt;/span&gt;&lt;/p&gt;
]]&gt;</description>
      <link>https://www.lqdev.me/notes/twitter-circles-myspace-top-friends</link>
      <guid>https://www.lqdev.me/notes/twitter-circles-myspace-top-friends</guid>
      <pubDate>05/03/2022 14:31 -05:00</pubDate>
      <category>twitter</category>
      <category>myspace</category>
      <category>socialmedia</category>
    </item>
    <item>
      <title>Welcome to the Fediverse</title>
      <description>&lt;![CDATA[&lt;p&gt;In light of recent developments on Twitter, I see more people looking for alternative platforms. Personally, I don't think anything beats the level of customization and control you get from using your own website and RSS for sharing ideas and publishing content. However, it's great to see so many new friends in the Fediverse on platforms like &lt;a href="https://joinmastodon.org/"&gt;Mastodon&lt;/a&gt;. I won't go into what the Fediverse is but you can check out the &lt;a href="https://joinfediverse.wiki/What_is_the_Fediverse%3F"&gt;Fediverse wiki&lt;/a&gt; for more info. In many ways the Fediverse will feel familiar, yet foreign. Many people have shared tips on getting started, but I'll share some of the ones I've personally used to organically curate my feed.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use hashtags. Similar to Twitter, hashtags are a good way of finding people and content related to the topic of interest.&lt;/li&gt;
&lt;li&gt;Follow &lt;a href="https://mstdn.social/@feditips"&gt;feditips&lt;/a&gt; and &lt;a href="https://mastodon.online/@FediFollows"&gt;FediFollows&lt;/a&gt;. As the names suggest, they provide good tips and suggest interesting accounts to follow in the Fediverse.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As an alternative if you're not ready to create an account, you can use RSS. I'm a big &lt;a href="https://www.lqdev.me/posts/rediscovering-rss-user-freedom/"&gt;fan of RSS&lt;/a&gt;. Appending &lt;code&gt;.rss&lt;/code&gt; to any account on platforms like Mastodon (for example &lt;a href="https://mastodon.online/@FediFollows.rss"&gt;https://mastodon.online/@FediFollows.rss&lt;/a&gt;) provides you with the RSS feed of an account's posts letting you subscribe to their content through your favorite RSS feed reader.&lt;/p&gt;
&lt;p&gt;Feel free to say hi at &lt;a href="https://toot.lqdev.tech/@lqdev"&gt;toot.lqdev.tech/@lqdev&lt;/a&gt;. See you in the Fediverse!&lt;/p&gt;
]]&gt;</description>
      <link>https://www.lqdev.me/notes/welcome-to-fediverse-tips</link>
      <guid>https://www.lqdev.me/notes/welcome-to-fediverse-tips</guid>
      <pubDate>04/27/2022 13:04 -05:00</pubDate>
      <category>fediverse</category>
      <category>mastodon</category>
      <category>twitter</category>
      <category>socialmedia</category>
      <category>decentralization</category>
    </item>
    <item>
      <title>Real-Time Sentiment Analysis with C#</title>
      <description>&lt;![CDATA[
###### This is strictly for use with the .NET Framework. With Mono it might be able to work on other platforms. `SimpleNetNlp` does not currently work with .NET Core/Standard

In this project, I will demonstate how to perform sentiment analysis on tweets using various C# libraries.

## Dependencies

- TweetInviAPI
- SimpleNetNlp
- SimpleNetNlp.Models.LexParser
- SimpleNetNlP.Models.Sentiment

## Create Console Application

In Visual Studio, Click File &gt; New &gt; New Project &gt; Console Application

All of the code below will be placed in the `Program` class.

## Creating A Stream

### Authenticate

Thanks to the `Tweetinvi` library, the authentication with the Twitter API is a breeze. Assuming that an application has been registered at [http://apps.twitter.com](http://apps.twitter.com), the `SetUserCredentials` method can be used and the `Consumer Key`, `Consumer Secret`,`Access Token` and `Access Token Secret` can be passed into it. This type of global authentication makes it easy to perform authenticated calls throughout the entire application.

```csharp
Auth.SetUserCredentials("consumer-key","consumer-secret","access-token","access-token-secret");
```

### Build Stream

Like the authentication, creating a stream is seamless.

We can create a stream by calling the `CreateFilteredStream` method.

```csharp
var stream = Stream.CreateFilteredStream();
```

We can then add conditions to filter on using the `AddTrack` method. In this case, I will be filtering for cryptocurrencies, ether, bitcoin, and litecoin.

```csharp
stream.AddTrack("cryptocurrencies");
stream.AddTrack("bitcoin");
stream.AddTrack("ether");
stream.AddTrack("Litecoin");
```

Additionally, we can filter by language. In my case, I will only be filtering on English. This can be done by using the `AddTweetLanguageFilter` method.

```csharp
stream.AddTweetLanguageFilter("en");
```

Once we have all the filters set up, we need to handle what will happen when a matching tweet is detected. This will be handled by an `EventHandler` called `MatchingTweetReceived`.

```csharp
stream.MatchingTweetReceived += OnMatchedTweet;
```

`MatchingTweetReceived` will be bound to the `OnMatchedTweet` method which I created.

```csharp
private static void OnMatchedTweet(object sender, MatchedTweetReceivedEventArgs args)
{
  //Do Stuff
}
```

The logic inside of this method will perform sentiment analysis and output the sentiment as well as the full text of the tweet.

## Data Cleaning

Tweets can contain many non-ascii characters. Therefore, we need to sanitize it as best as possible so that it can be processed by the sentiment analyzer. To help with that, I used regular expresions to replace non-ascii characters inside of the `sanitize` method.

```csharp
private static string sanitize(string raw)
{
  return Regex.Replace(raw, @"(@[A-Za-z0-9]+)|([^0-9A-Za-z \t])|(\w+:\/\/\S+)", " ").ToString();
}
```

## Sentiment Analysis

In order to perform sentiment analysis, we will be using the `SimpleNetNlp` library. This library is built on top of the Stanford CoreNLP library. In order to get the sentiment of a piece of text, we need to create a `Sentence` object which takes a string as a parameter and then get the `Sentiment` property. In our case, the parameter that will be used to instantiate a new `Sentence` object will be the sanitized text of a tweet.

```csharp
var sanitized = sanitize(args.Tweet.FullText);
string sentence = new Sentence(sanitized);
```

The code above will be placed inside of the `OnMatchedTweet` method.

## Produce Output

Now that we have everything set up, we can just output to the console the sentiment and raw text of the tweet. To do that, we can place the code below inside the `OnMatchedTweet` method.

```csharp
Console.WriteLine(sentence.Sentiment + "|" + args.Tweet);
```

The final `OnMatchedTweet` method looks as follows:

```csharp
private static void OnMatchedTweet(object sender, MatchedTweetReceivedEventArgs args)
{
    var sanitized = sanitize(args.Tweet.FullText); //Sanitize Tweet
    var sentence = new Sentence(sanitized); //Get Sentiment

    //Output Tweet and Sentiment
    Console.WriteLine(sentence.Sentiment + "|" + args.Tweet);
}
```
## Run

Once we run the application, our console application should look something like this:

![](http://cdn.lqdev.tech/files/images/sentiment-analysis-1.png)


## Conclusion

C# is not always the first language that comes to mind when doing analytics and machine learning. However, tasks such as sentiment analysis can be trivially performed thanks to libraries such as `Tweetinvi` and `SimpleNetNlp`. In its current state, this application is not very useful because it just outputs to the console sentiments and the respective tweets. In order to make it more useful, we can collect and aggregate the data someplace for more robust analysis. 
]]&gt;</description>
      <link>https://www.lqdev.me/posts/real-time-sentiment-analysis-csharp</link>
      <guid>https://www.lqdev.me/posts/real-time-sentiment-analysis-csharp</guid>
      <pubDate>2018-01-18 03:41:47 -05:00</pubDate>
      <category>data analysis</category>
      <category>sentiment analysis</category>
      <category>nlp</category>
      <category>machine learning</category>
      <category>csharp</category>
      <category>c#</category>
      <category>twitter</category>
      <category>api</category>
      <category>.net</category>
      <category>dotnet</category>
    </item>
  </channel>
</rss>