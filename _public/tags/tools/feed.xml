<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>Luis Quintanilla - tools</title>
    <link>https://www.lqdev.me/tags/tools</link>
    <description>All content tagged with 'tools' by Luis Quintanilla</description>
    <lastBuildDate>2025-06-05 20:05 -05:00</lastBuildDate>
    <language>en</language>
    <item>
      <title>Faircamp - A static site generator for audio producers</title>
      <description>&lt;![CDATA[[star] &lt;p&gt;This is such a cool project. Looks like it's super simple to get started with and it's packed with a ton of features so creators get to stay in their flow.&lt;/p&gt;
&lt;p&gt;I also like how creators are showcased.&lt;/p&gt;
]]&gt;</description>
      <link>https://www.lqdev.me/responses/faircamp-static-site-audio-producers</link>
      <guid>https://www.lqdev.me/responses/faircamp-static-site-audio-producers</guid>
      <pubDate>2025-06-05 20:05 -05:00</pubDate>
      <category>faircamp</category>
      <category>music</category>
      <category>socialweb</category>
      <category>indieweb</category>
      <category>staticsite</category>
      <category>technology</category>
      <category>tools</category>
      <category>openweb</category>
      <category>opensource</category>
    </item>
    <item>
      <title>Clock Tables - Org Mode, Plain Text, and AI</title>
      <description>&lt;![CDATA[&lt;p&gt;Org-mode appreciation post.&lt;/p&gt;
&lt;p&gt;I use plain text and org-mode for most things in my life, especially when it comes to task and life management.&lt;/p&gt;
&lt;p&gt;I won't rehash all the reasons Emacs and org-mode are amazing. There are tons of blog posts and videos out there that would do it more justice than I ever could.&lt;/p&gt;
&lt;p&gt;Over the last few years, Emacs has become my go-to text editor. Throughout all that time, I've continued to find new features that delight.&lt;/p&gt;
&lt;p&gt;The most recent is &lt;a href="https://orgmode.org/manual/The-clock-table.html"&gt;clock table&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I already use org-mode to track my to-dos and perform some sort of time-block planning by setting deadlines and scheduling tasks.&lt;/p&gt;
&lt;p&gt;Recently though, I've been wanting a way to see all of the things I've worked on over the past [ INSERT TIME PERIOD ]. More importantly, I'd like to have time associated with them to see where my time has gone and evaluate whether I'm spending time on the things I should be.&lt;/p&gt;
&lt;p&gt;I knew you could &lt;a href="https://orgmode.org/manual/Clocking-commands.html"&gt;clock in and clock out&lt;/a&gt; on tasks. However, I didn't know you could easily build a customized report that automatically updates. That's when I came across clock tables.&lt;/p&gt;
&lt;p&gt;Now, I have a way of visualizing all of the things I worked on during a week or month, and as I'm planning for the next week or month, I can adjust and reprioritize the things I'm working on.&lt;/p&gt;
&lt;p&gt;I know there are enterprise offerings like the Viva suite from Microsoft which provides detailed reports on how you spend your time.&lt;/p&gt;
&lt;p&gt;What excites me about org-mode though is that it's plain text. The clock table report that gets generated is a plain text table which makes it portable and easy to access using any text editor of your choice. It works best with Emacs, but that's not a requirement.&lt;/p&gt;
&lt;p&gt;On their own, clock tables are amazing.&lt;/p&gt;
&lt;p&gt;However, given how well language models work on plain text, they could be used as context for your queries. Imagine giving a language model as input an org file which contains:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A clock table&lt;/li&gt;
&lt;li&gt;A list of TODO tasks (with notes, priorities, deadlines, tags, properties, and other annotations)&lt;/li&gt;
&lt;li&gt;A high level list of goals you want to achieve&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Then, you could enter a prompt along the lines of: &amp;quot;Using the following clock-table and list of goals I want to achieve, provide me with recommendations of tasks I should work on for the next week. Ensure that they align with my goals, are top priority, and provide the highest return on my efforts&amp;quot;.&lt;/p&gt;
&lt;p&gt;Additionally, you might also provide your org-agenda view containing appointments and use the results from the first query as context for the following prompt: &amp;quot;Given the agenda view for the next week, schedule the top 3 tasks you recommended&amp;quot;.&lt;/p&gt;
&lt;p&gt;The result would be a list of TODO items containing schedule / active timestamps annotations which now show up on your org-agenda view.&lt;/p&gt;
&lt;p&gt;Today, almost every productivity application out there is working on building these kinds of AI features into their products. The difference is, in many cases, the formats used by those applications aren't plain text. This adds complexity to the data extraction and transformation pipelines required to get the data into the right format for a language model to process. With plain text, there's little to no transformations required.&lt;/p&gt;
&lt;p&gt;What's even better, I can extend org-mode and Emacs using elisp to do the things I just talked about.&lt;/p&gt;
&lt;p&gt;I'm no elisp expert, so I asked Copilot to generate an elisp function that takes an org-mode clock table as input and generates a written text summary of it. Here are the results:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-lisp"&gt;(defun org-clock-summary-to-chatgpt ()
  &amp;quot;Extracts clock table data and requests a summary from ChatGPT.&amp;quot;
  (interactive)
  (let* ((clock-table-data (org-clocktable-get-clocktable))
         (summary-text (org-clocktable-format-summary clock-table-data))
         (api-endpoint &amp;quot;https://api.openai.com/v1/engines/davinci/completions&amp;quot;)
         (api-key &amp;quot;YOUR_API_KEY&amp;quot;)) ; Replace with your actual API key

    ;; Construct the HTTP request and send it to ChatGPT
    (with-current-buffer
        (url-retrieve-synchronously api-endpoint
                                    `((&amp;quot;text&amp;quot; . ,summary-text)
                                      (&amp;quot;api_key&amp;quot; . ,api-key)))
      (goto-char (point-min))
      (search-forward &amp;quot;\n\n&amp;quot;)
      (let ((response-json (json-read)))
        (message &amp;quot;ChatGPT summary: %s&amp;quot; (cdr (assoc 'choices response-json)))))))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;All you elisp experts out there, let me know how it did.&lt;/p&gt;
&lt;p&gt;I know at least the API endpoint is wrong, but generally speaking, it seems to be doing the right thing. Such function could be extended to include org-agenda information, TODO items, and many other things that would use AI to augment the existing functionality of Emacs and org-mode to tailor them to my needs.&lt;/p&gt;
]]&gt;</description>
      <link>https://www.lqdev.me/notes/love-plain-text-org-mode-clocktable</link>
      <guid>https://www.lqdev.me/notes/love-plain-text-org-mode-clocktable</guid>
      <pubDate>2024-07-09 22:07 -05:00</pubDate>
      <category>emacs</category>
      <category>orgmode</category>
      <category>ai</category>
      <category>plaintext</category>
      <category>productivity</category>
      <category>tools</category>
      <category>technology</category>
      <category>gnu</category>
      <category>opensource</category>
      <category>gtd</category>
      <category>calendar</category>
      <category>agenda</category>
      <category>llm</category>
      <category>openai</category>
    </item>
    <item>
      <title>Quanto: a PyTorch quantization toolkit </title>
      <description>&lt;![CDATA[[reshare] &lt;blockquote class="blockquote"&gt;
&lt;p&gt;Quantization is a technique to reduce the computational and memory costs of evaluating Deep Learning Models by representing their weights and activations with low-precision data types like 8-bit integer (int8) instead of the usual 32-bit floating point (float32).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote class="blockquote"&gt;
&lt;p&gt;Today, we are excited to introduce quanto, a versatile pytorch quantization toolkit, that provides several unique features:&lt;br /&gt;
&lt;br&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;available in eager mode (works with non-traceable models)&lt;/li&gt;
&lt;li&gt;quantized models can be placed on any device (including CUDA and MPS),&lt;/li&gt;
&lt;li&gt;automatically inserts quantization and dequantization stubs,&lt;/li&gt;
&lt;li&gt;automatically inserts quantized functional operations,&lt;/li&gt;
&lt;li&gt;automatically inserts quantized modules (see below the list of supported modules),&lt;/li&gt;
&lt;li&gt;provides a seamless workflow for a float model, going from a dynamic to a static quantized model,&lt;/li&gt;
&lt;li&gt;supports quantized model serialization as a state_dict,&lt;/li&gt;
&lt;li&gt;supports not only int8 weights, but also int2 and int4,&lt;/li&gt;
&lt;li&gt;supports not only int8 activations, but also float8.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
]]&gt;</description>
      <link>https://www.lqdev.me/responses/quanto-pytorch-quantization-toolkit</link>
      <guid>https://www.lqdev.me/responses/quanto-pytorch-quantization-toolkit</guid>
      <pubDate>2024-03-19 22:00 -05:00</pubDate>
      <category>huggingface</category>
      <category>quantization</category>
      <category>pytorch</category>
      <category>tools</category>
      <category>ai</category>
    </item>
    <item>
      <title>OpenAI Transformer Debugger</title>
      <description>&lt;![CDATA[[reshare] &lt;blockquote class="blockquote"&gt;
&lt;p&gt;Transformer Debugger (TDB) is a tool developed by OpenAI's Superalignment team with the goal of supporting investigations into specific behaviors of small language models. The tool combines automated interpretability techniques with sparse autoencoders.&lt;br /&gt;
&lt;br&gt;
TDB enables rapid exploration before needing to write code, with the ability to intervene in the forward pass and see how it affects a particular behavior. It can be used to answer questions like, &amp;quot;Why does the model output token A instead of token B for this prompt?&amp;quot; or &amp;quot;Why does attention head H attend to token T for this prompt?&amp;quot; It does so by identifying specific components (neurons, attention heads, autoencoder latents) that contribute to the behavior, showing automatically generated explanations of what causes those components to activate most strongly, and tracing connections between components to help discover circuits.&lt;/p&gt;
&lt;/blockquote&gt;
]]&gt;</description>
      <link>https://www.lqdev.me/responses/openai-transformer-debugger</link>
      <guid>https://www.lqdev.me/responses/openai-transformer-debugger</guid>
      <pubDate>2024-03-17 21:05 -05:00</pubDate>
      <category>openai</category>
      <category>ai</category>
      <category>transformer</category>
      <category>debugger</category>
      <category>tools</category>
    </item>
    <item>
      <title>What I learned from looking at 900 most popular open source AI tools</title>
      <description>&lt;![CDATA[[reshare] &lt;blockquote class="blockquote"&gt;
&lt;p&gt;So many cool ideas are being developed by the community. Here are some of my favorites.&lt;br /&gt;
&lt;br&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Batch inference optimization: FlexGen, llama.cpp&lt;/li&gt;
&lt;li&gt;Faster decoder with techniques such as Medusa, LookaheadDecoding&lt;/li&gt;
&lt;li&gt;Model merging: mergekit&lt;/li&gt;
&lt;li&gt;Constrained sampling: outlines, guidance, SGLang&lt;/li&gt;
&lt;li&gt;Seemingly niche tools that solve one problem really well, such as einops and safetensors.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
]]&gt;</description>
      <link>https://www.lqdev.me/responses/learned-from-looking-900-oss-ai-tools-huyen</link>
      <guid>https://www.lqdev.me/responses/learned-from-looking-900-oss-ai-tools-huyen</guid>
      <pubDate>2024-03-14 22:13 -05:00</pubDate>
      <category>ai</category>
      <category>tools</category>
      <category>analysis</category>
      <category>openai</category>
      <category>github</category>
    </item>
    <item>
      <title>NightShade</title>
      <description>&lt;![CDATA[[reshare] &lt;blockquote class="blockquote"&gt;
&lt;p&gt;Nightshade, a tool that turns any image into a data sample that is unsuitable for model training. More precisely, Nightshade transforms images into &amp;quot;poison&amp;quot; samples, so that models training on them without consent will see their models learn unpredictable behaviors that deviate from expected norms, e.g. a prompt that asks for an image of a cow flying in space might instead get an image of a handbag floating in space.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="https://nightshade.cs.uchicago.edu/whatis.html"&gt;What is NightShade?&lt;/a&gt;&lt;/p&gt;
]]&gt;</description>
      <link>https://www.lqdev.me/responses/nightshade-ai-model-poisoning-tool</link>
      <guid>https://www.lqdev.me/responses/nightshade-ai-model-poisoning-tool</guid>
      <pubDate>2024-01-23 20:57 -05:00</pubDate>
      <category>research</category>
      <category>tools</category>
      <category>ai</category>
      <category>generativeai</category>
      <category>llm</category>
      <category>computervision</category>
      <category>cv</category>
    </item>
    <item>
      <title>Plain text</title>
      <description>&lt;![CDATA[&lt;h2&gt;Overview&lt;/h2&gt;
&lt;p&gt;This guide provides an overview of plain text and how it can be used for a variety of tasks and advantages over rich text and custom text formats.&lt;/p&gt;
&lt;h2&gt;What is plain text?&lt;/h2&gt;
&lt;p&gt;In general, plain text is text that isn't formatted and generally uses common characters.&lt;/p&gt;
&lt;h2&gt;Benefits of plain text&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Simplicity: Focus on the content rather than the formatting or medium&lt;/li&gt;
&lt;li&gt;Portability: Any text editor can create and display plain text. That means you're not locked in to any particular tool or service.&lt;/li&gt;
&lt;li&gt;Local-first: Because you can create plain text files using any phone or computer, it means your files belong to you and you have access to them any time regardless of network connectivity. While you can upload and sync your files with your preferred cloud storage provider for redundancy and backup, it's not a requirement.&lt;/li&gt;
&lt;li&gt;Longevity: Computers have been able to create and display plain text for decades. Since you don't need proprietary file formats or tools to create and consume plain text, it's likely many decades from now you'll be able to read plain text.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Additional plain markup and text formats&lt;/h2&gt;
&lt;p&gt;You can write plain text on its own. However, you can format your plain text to provide additional visual cues, information, and context. Some popular plain formats and markup languages include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://daringfireball.net/projects/markdown/"&gt;Markdown&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://orgmode.org/worg/org-syntax.html"&gt;Org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.latex-project.org/"&gt;LaTeX&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Editors&lt;/h2&gt;
&lt;p&gt;Below are a few popular plain text editors you can use to read and create plain text files:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.gnu.org/software/emacs/"&gt;Emacs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.vim.org/"&gt;vi/vim&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://code.visualstudio.com/"&gt;VS Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://apps.microsoft.com/detail/9msmlrh6lzf3?hl=en-us&amp;amp;gl=US"&gt;Notepad&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Use cases&lt;/h2&gt;
&lt;h3&gt;Note taking&lt;/h3&gt;
&lt;p&gt;The easiest way to start taking notes using plain text is to open any text editor of choice and start capturing your thoughts.&lt;/p&gt;
&lt;h3&gt;Productivity / Personal Knowledge Management&lt;/h3&gt;
&lt;p&gt;An extension to note taking is personal knowlege management and productivity. Whether it's scheduling appointments, journaling, tracking habits (exercise, reading, meditation), or managing to-do lists, you can use plain text for these tasks. Some tools and formats that can help with that include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://orgmode.org/"&gt;Emacs Org Mode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://todotxt.org/"&gt;todo.txt&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Email&lt;/h3&gt;
&lt;p&gt;While e-mail clients support HTML, in general e-mail communication is predomenantly text-based. Therefore, plain text is all you need. If you wanted to only use plain text, e-mail clients enable you to configure them to only support plain text. While your HTML e-mails may look weird, there are some advantages.&lt;/p&gt;
&lt;p&gt;The &lt;a href="https://useplaintext.email/"&gt;use plaintext email guide&lt;/a&gt; can provide guidance as to how to get started using plaintext only for e-mails&lt;/p&gt;
&lt;h3&gt;Personal finance&lt;/h3&gt;
&lt;p&gt;There are many apps for managing your personal finance. However, if you want to keep it simple, you can track your personal finances using plain text as well. Some tools that can help you do that include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://ledger-cli.org/"&gt;Ledger&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Databases&lt;/h3&gt;
&lt;p&gt;When you think of a database, you might think of a complicated system hosted in a server. While database systems are optimized for enterprise production workloads, at the end of the day, the purpose of a database is to store data. That means plain text can work for that too. Some tools that can help you here include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.gnu.org/software/recutils/"&gt;GNU Recutils&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Blogging and building websites&lt;/h3&gt;
&lt;p&gt;The more capable our computing devices have become, our software has suffered from inflation by becoming larger. However, larger doesn't mean the software is richer. If you're just trying to transmit information, you can upload your raw text files containing your blog posts or website to a server and they can be displayed in the browser. Examples of these sites include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://minim.blog/"&gt;minim.blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://250kb.club/"&gt;250kb club&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://512kb.club/"&gt;512kb club&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Often you can build these websites with the help of static site generators such as. The &lt;a href="https://jamstack.org/generators/"&gt;Static Site Generators catalog&lt;/a&gt; provides more details on popular ones.&lt;/p&gt;
&lt;p&gt;For hosting, you can do so for free using offerings like GitHub Pages. The &lt;a href="https://docs.github.com/en/pages/setting-up-a-github-pages-site-with-jekyll"&gt;Setting up a GitHub Pages site with Jekyll&lt;/a&gt; can help you get started there.&lt;/p&gt;
&lt;h2&gt;Additional Resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://plaintext-productivity.net"&gt;Plaintext Productivity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://plaintextproject.online/articles.html"&gt;The Plain Text Project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://doc.norang.ca/org-mode.html"&gt;Org Mode - Organize Your Life In Plain Text!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.markwk.com/plain-text-life.html"&gt;The Plain Text Life: Note Taking, Writing and Life Organization Using Plain Text Files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sive.rs/plaintext"&gt;Write plain text files&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
]]&gt;</description>
      <link>https://www.lqdev.me/resources/wiki/plaintext</link>
      <guid>https://www.lqdev.me/resources/wiki/plaintext</guid>
      <pubDate>10/14/2023 12:56 -05:00</pubDate>
      <category>plaintext</category>
      <category>productivity</category>
      <category>email</category>
      <category>notes</category>
      <category>personalknowledgemanagement</category>
      <category>pkm</category>
      <category>wiki</category>
      <category>calendar</category>
      <category>finance</category>
      <category>tools</category>
      <category>databases</category>
      <category>writing</category>
    </item>
    <item>
      <title>FlowiseAI - Drag and drop for LLM flows</title>
      <description>&lt;![CDATA[[bookmark] &lt;p&gt;&lt;img src="https://github.com/FlowiseAI/Flowise/raw/main/images/flowise.gif" class="img-fluid" alt="GIF of FlowiseAI LLM visual tool" /&gt;&lt;/p&gt;
]]&gt;</description>
      <link>https://www.lqdev.me/bookmarks/flowiseai-visual-llm-flow</link>
      <guid>https://www.lqdev.me/bookmarks/flowiseai-visual-llm-flow</guid>
      <pubDate>2023-09-25 20:54 -05:00</pubDate>
      <category>ai</category>
      <category>tools</category>
    </item>
    <item>
      <title>Perplexity: Interactive LLM visualization</title>
      <description>&lt;![CDATA[[bookmark] &lt;blockquote class="blockquote"&gt;
&lt;p&gt;I built this little tool to help me understand what it's like to be an autoregressive language model. For any given passage of text, it augments the original text with highlights and annotations that tell me how &amp;quot;surprising&amp;quot; each token is to the model, and which other tokens the model thought were most likely to occur in its place. Right now, the LM I'm using is the smallest version of GPT-2, with 124M parameters.&lt;/p&gt;
&lt;/blockquote&gt;
]]&gt;</description>
      <link>https://www.lqdev.me/bookmarks/perplexity-interactive-llm-visualizations</link>
      <guid>https://www.lqdev.me/bookmarks/perplexity-interactive-llm-visualizations</guid>
      <pubDate>2023-09-06 00:02 -05:00</pubDate>
      <category>ai</category>
      <category>llm</category>
      <category>visualization</category>
      <category>tools</category>
    </item>
    <item>
      <title>TIL: Firefox Task Manager</title>
      <description>&lt;![CDATA[&lt;p&gt;Today I learned about &lt;a href="https://support.mozilla.org/en-US/kb/task-manager-tabs-or-extensions-are-slowing-firefox"&gt;Firefox Task Manager&lt;/a&gt;. Typing &lt;code&gt;about:performance&lt;/code&gt; into the address bar brings up the task manager which lets you inspect the tabs and extensions consuming the most energy and resources.&lt;/p&gt;
&lt;p&gt;&lt;img src="http://cdn.lqdev.tech/files/images/firefox-task-manager.png" class="img-fluid" alt="Firefox Task Manager" /&gt;&lt;/p&gt;
]]&gt;</description>
      <link>https://www.lqdev.me/notes/til-firefox-task-manager</link>
      <guid>https://www.lqdev.me/notes/til-firefox-task-manager</guid>
      <pubDate>2022-12-01 11:24 -05:00</pubDate>
      <category>firefox</category>
      <category>browser</category>
      <category>tools</category>
      <category>web</category>
      <category>internet</category>
      <category>opensource</category>
    </item>
    <item>
      <title>Impressed by Azure Cloud Shell</title>
      <description>&lt;![CDATA[&lt;p&gt;I can probably count the number of times I've used the Azure Cloud Shell inside the Azure Portal with one hand. However, I recently had a need to use it and was impressed by the experience.&lt;/p&gt;
&lt;p&gt;I wanted to create an Azure Function app but didn't want to install all the tools required. Currently I'm running Manjaro on an ASUS L210MA. That's my daily driver and although the specs are incredibly low I like the portability. The Azure set of tools run on Linux but are easier to install on Debian distributions. The low specs plus the Arch distro didn't make me want to go through the process of installing the Azure tools locally for a throwaway app.&lt;/p&gt;
&lt;p&gt;That's when I thought about using Azure Cloud Shell. Setup was relatively quick and easy. It was also great to see the latest version of .NET, Azure Functions Core Tools, and Azure CLI were already installed. Even Git was already there. After creating the function app, I was able to make some light edits using the built-in Monaco editor. When I was ready to test the app, I was able to open up a port, create a proxy, and test the function locally. It's not a high-end machine so I won't be training machine learning models on it anytime soon. However, for experimentation and working with my Azure account it's more than I need.&lt;/p&gt;
]]&gt;</description>
      <link>https://www.lqdev.me/notes/impressed-az-cloud-shell</link>
      <guid>https://www.lqdev.me/notes/impressed-az-cloud-shell</guid>
      <pubDate>2022-10-13 22:45 -05:00</pubDate>
      <category>azure</category>
      <category>cloud</category>
      <category>tools</category>
      <category>development</category>
    </item>
    <item>
      <title>Neofetch</title>
      <description>&lt;![CDATA[&lt;h2&gt;Overview&lt;/h2&gt;
&lt;p&gt;Neofetch is a command-line system information tool. Neofetch displays information about your operating system, software and hardware.&lt;/p&gt;
&lt;h2&gt;Install using Pacman&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Open the terminal&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Run the following command&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;pacman -S neofetch
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Configure&lt;/h2&gt;
&lt;p&gt;The configuration file for neofetch is located at &lt;em&gt;$HOME/.config/neofetch/config.conf&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;For more information on configuration options, see the &lt;a href="https://github.com/dylanaraps/neofetch/wiki/Customizing-Info"&gt;Customizing info article&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Run&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Open the terminal and enter the following command:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;neofetch
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Run when terminal launches&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Open your &lt;em&gt;~/.bashrc&lt;/em&gt; file in your preferred text editor.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Add the following line to your file and save it.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;neofetch
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Refresh your terminal with the following command.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;source ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/dylanaraps/neofetch"&gt;Neofetch GitHub Repository&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
]]&gt;</description>
      <link>https://www.lqdev.me/resources/wiki/neofetch</link>
      <guid>https://www.lqdev.me/resources/wiki/neofetch</guid>
      <pubDate>08/25/2022 15:19 -05:00</pubDate>
      <category>technology</category>
      <category>linux</category>
      <category>tools</category>
      <category>terminal</category>
    </item>
    <item>
      <title>TOSDR: Terms of Service CliffNotes</title>
      <description>&lt;![CDATA[&lt;p&gt;I recently came accross the &lt;a href="https://tosdr.org/"&gt;Terms of Service, Didn't Read (TOSDR)&lt;/a&gt; website. Like most people, I'm guilty of clicking &amp;quot;I have read and agree to the terms of service&amp;quot; without actually doing so. TOSDR simplifies terms of service documents by highlighting the main points for many popular services. I'm not sure how maintenance and the frequency of that maintenance work. There's a rating systems which I also am not sure how it works. However, you are provided with the documents that were used to come up with the ratings and summaries, so you can look into it yourself. Overall, I think it's an incredibly useful tool to make sense of how your data is managed across these platforms.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/11130940/142041533-e79dc8f4-4ba2-42b3-bbfd-e2becab8f357.png" class="img-fluid" alt="Duck Duck Go and YouTube TOSDR service comparisons" /&gt;&lt;/p&gt;
]]&gt;</description>
      <link>https://www.lqdev.me/notes/terms-of-service-cliffnotes-tosdr</link>
      <guid>https://www.lqdev.me/notes/terms-of-service-cliffnotes-tosdr</guid>
      <pubDate>11/16/2021 13:10 -05:00</pubDate>
      <category>tos</category>
      <category>tools</category>
      <category>tosdr</category>
    </item>
    <item>
      <title>Proofread articles using Microsoft Edge's Immersive Reader and read aloud</title>
      <description>&lt;![CDATA[
This will be a relatively short post but it's something I just discovered and thought I'd share. Before publishing a post, I try to proofread and review the article to make sure spelling, grammar, and flow all make sense. Part of that process involves reading the article aloud. I'll miss things from time to time but generally it works well. 

I've known about read aloud in general, but have often found voices to be robotic and sound unnatural when they encounter words outside their vocabulary. However, I recently tried out the read aloud feature in Microsoft Edge and was blown away at how natural the voice sounds and even how well it enunciates technical terms like product and programming API names. Here's what it looks like when reading one of the posts on my site.

![Microsoft Edge Immersive Reader read aloud reading blog post](https://user-images.githubusercontent.com/11130940/134442715-e0af0c4a-a522-49a9-a0b1-ac658b284c68.png)

If you do any form of writing that can be displayed in Microsoft Edge, I highly encourage you to give read aloud a try. For more information, see [Use Immersive Reader in Microsoft Edge](https://support.microsoft.com/topic/use-immersive-reader-in-microsoft-edge-78a7a17d-52e1-47ee-b0ac-eff8539015e1).

Happy writing!]]&gt;</description>
      <link>https://www.lqdev.me/posts/proofread-read-aloud</link>
      <guid>https://www.lqdev.me/posts/proofread-read-aloud</guid>
      <pubDate>2021-09-22 18:00:00 -05:00</pubDate>
      <category>writing</category>
      <category>tools</category>
    </item>
    <item>
      <title>Blogging Tools</title>
      <description>&lt;![CDATA[
## TLDR

These are the tools I use to write this blog:

- **Editor**: [Visual Studio Code](https://code.visualstudio.com/)
- **Markup**: [Markdown](https://daringfireball.net/projects/markdown/)
- **Static Site Generator**: [Hexo](https://hexo.io/) 
- **Blog Theme**: [Cactus](https://github.com/probberechts/hexo-theme-cactus)
- **Hosting**: [Namecheap](https://www.namecheap.com/)

## Introduction

I have gotten a few questions regarding what I use to write this blog so I thought it would be a good idea to write a post about it. In this writeup I'll discuss what I use for writing posts as well as building and hosting the site. 

## Writing

### Editor

For writing, I use Visual Studio Code. Visual Studio Code is an open source, cross-platform text editor. One of the nice features it includes is Markdown Preview. Markdown Preview allows you to see how the content would look when rendered as a web page. Additionally, Visual Studio Code allows you to split panes. What that provides is the ability to write and preview the content side-by-side. 

![](http://cdn.lqdev.tech/files/images/blog-tools-1.PNG)

### Markup 

I write my content in Markdown. Markdown is a plain text formatting syntax that allows authors to write easy-to-read and easy-to-write plain text formats that are then converted to HTML. It can take a while to get used to the syntax especially when including images, links and code snippets but once you get comfortable with it, it becomes natural and no different than writing sentences in plain text. While this is not a requirement for everyone, since a fair amount of my content includes code snippets, Markdown makes it easy to include such content in the language of choice. 

## Website

### Static Site Generation

While Markdown helps me format my plain text, at some point it needs to be converted into HTML or some format that can be rendered on the web. To help with that, I use Hexo. Hexo is an open source blog framework that allows you to write content using Markdown or other languages and generates static files which have a theme applied to them. Hexo is built on JavaScript, therefore you'll need NodeJS to configure it. 

### Theme 

Hexo has numerous themes that can be used to style your site. The one I use is the `Cactus` theme. 

## Hosting

For hosting, I use Namecheap. There is no special reason for this other than I had a slot available in an existing hosting plan. My method of deployment is via FTP. Since my site is all static assets, I upload them into a folder that is publicly accessible. With that in mind, by having my site made up of static assets I have the flexibility of hosting it on an S3 bucket or Azure Storage. This is the method I'm looking to use for deployments and hosting in the near future. Here is a [link](https://docs.microsoft.com/en-us/azure/storage/blobs/storage-blob-static-website) that details how to host a static site on Azure Storage.]]&gt;</description>
      <link>https://www.lqdev.me/posts/blog-tools</link>
      <guid>https://www.lqdev.me/posts/blog-tools</guid>
      <pubDate>2018-11-18 00:07:36 -05:00</pubDate>
      <category>markdown</category>
      <category>vscode</category>
      <category>tools</category>
      <category>development</category>
      <category>blogging</category>
    </item>
    <item>
      <title>Scaffolding A Web Page In One Line</title>
      <description>&lt;![CDATA[
## Introduction

A few months ago, I saw VS Code released an update that had [Emmet](https://www.emmet.io/) abbreviations built in. At the time, I saw a demo and it looked like an interesting tool but I knew very little about it. This past week, while practicing `css` and scaffolding a blog-like web page for practice I decided to give Emmet a try. After reading some of the documentation and trying it out, within five minutes I was able to replicate what I had done manually with one line of "code". The entire process is described below. 

## What We'll Build

Displayed below is the scaffold of the webpage I built. As it can be seen, in the `body` element there is a `nav` element and four `div` elements that will contain our articles and their metadata.

```html
&lt;html&gt;
&lt;head&gt;
    &lt;title&gt;&lt;/title&gt;
    &lt;link rel="stylesheet" href=""&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;nav&gt;
        &lt;ul&gt;
            &lt;li class="nav-item"&gt;&lt;/li&gt;
            &lt;li class="nav-item"&gt;&lt;/li&gt;
            &lt;li class="nav-item"&gt;&lt;/li&gt;
        &lt;/ul&gt;
    &lt;/nav&gt;
    &lt;div&gt;
        &lt;div class="article"&gt;
            &lt;h2 class="article-title"&gt;&lt;/h2&gt;
            &lt;h6 class="article-date"&gt;&lt;/h6&gt;
            &lt;p class="article-description"&gt;&lt;/p&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div&gt;
        &lt;div class="article"&gt;
            &lt;h2 class="article-title"&gt;&lt;/h2&gt;
            &lt;h6 class="article-date"&gt;&lt;/h6&gt;
            &lt;p class="article-description"&gt;&lt;/p&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div&gt;
        &lt;div class="article"&gt;
            &lt;h2 class="article-title"&gt;&lt;/h2&gt;
            &lt;h6 class="article-date"&gt;&lt;/h6&gt;
            &lt;p class="article-description"&gt;&lt;/p&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div&gt;
        &lt;div class="article"&gt;
            &lt;h2 class="article-title"&gt;&lt;/h2&gt;
            &lt;h6 class="article-date"&gt;&lt;/h6&gt;
            &lt;p class="article-description"&gt;&lt;/p&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
```

## How We'll Build It

The `hmtl` above can be programatically built using the abbreviation below.

```text
html&gt;(head&gt;title+link)+(body&gt;(nav&gt;ul&gt;li.nav-item*3)+(div&gt;div.article&gt;h2.article-title+h6.article-date+p.article-description)*4
```

To break down some of the things that are going on here, we can start with the syntax. The `&gt;` character denotes that the item on the left is the parent of the item(s) on the right. Similarly, the `+` character is used to describe siblings. Similar to math operations, parentheses evaluate what's inside them. Elements themselves can contain additional data such as class names and ids. This data can be appended to the element name just like `css` with `.` for classes and `#` for ids. 

With that knowledge, we can see that we have an `html` root element with `head` and `body` children. The `head` element has a `title` and `link` child elements. The `body` element has a `nav` element with a `ul` child which contains three `li` elements. The `nav` element has a `div` sibling which contains four `div` children that serve as the containers for our articles and their metadata.  

## Adding some style

To help visualize what the page looks like we can add some `css`. 

```css
* {
    margin: 0;
}

nav {
    padding: 0;
    background-color: black;
    color: white;
}

.nav-item {
    margin: 20px;
    display: inline-block;
    font-weight: bold;
    font-size: 20px;
}

.nav-item:hover {
    opacity: 0.7;
}

.article {
    display: block;
    margin: 20px;
    padding-left: 5px;
    background-color: lightgray;
    border: black solid 2px;
}

.article-title {
    display: block;
    font-family: serif;
    font-size: 30px;
    text-decoration: underline;
    display: inline;
}

.article-date {
    font-size: 20px;
    font-family: fantasy;
    float: right;
    margin-right: 5px;
}

.article-description {
    display: block;
    font-size: 18px;
    font-family: sans-serif;
    margin-top: 5px;
}
```

## Result

After linking our `css` with the webpage as well as adding some content to the page, the result will look as follows. 

![](http://cdn.lqdev.tech/files/images/scaffoldawebpageoneline1.png)


```html
&lt;html&gt;
    &lt;head&gt;
        &lt;link rel="stylesheet" type="text/css" href="main.css"/&gt;
        &lt;title&gt;HTML CSS Practice&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;nav&gt;
            &lt;ul&gt;
                &lt;li class="nav-item"&gt;Home&lt;/li&gt;
                &lt;li class="nav-item"&gt;About&lt;/li&gt;
                &lt;li class="nav-item"&gt;Contact&lt;/li&gt;
            &lt;/ul&gt;
        &lt;/nav&gt;
        &lt;div&gt;
            &lt;div class="article"&gt;
                &lt;h2 class="article-title"&gt;Hello World&lt;/h2&gt;
                &lt;h6 class="article-date"&gt;January 8, 2017&lt;/h6&gt;
                &lt;p class="article-description"&gt;This is a short description of my program. There are more things than this.&lt;/p&gt;
            &lt;/div&gt;
            &lt;div class="article"&gt;
                &lt;h2 class="article-title"&gt;Second Post&lt;/h2&gt;
                &lt;h6 class="article-date"&gt;February 8, 2017&lt;/h6&gt;
                &lt;p class="article-description"&gt;I think that I got my feet wet a little bit. Maybe there are other things that I can write about&lt;/p&gt;
            &lt;/div&gt;
            &lt;div class="article"&gt;
                &lt;h2 class="article-title"&gt;Third Post&lt;/h2&gt;
                &lt;h6 class="article-date"&gt;March 8, 2017&lt;/h6&gt;
                &lt;p class="article-description"&gt;This is the third go around. I think I got pretty good at this design stuff.&lt;/p&gt;
            &lt;/div&gt;
            &lt;div class="article"&gt;
                &lt;h2 class="article-title"&gt;Fourth Post&lt;/h2&gt;
                &lt;h6 class="article-date"&gt;June 8, 2017&lt;/h6&gt;
                &lt;p class="article-description"&gt;I really like my description of the things that are happening here and there is another post on the way very soon.&lt;/p&gt;
            &lt;/div&gt;                        
        &lt;/div&gt;
    &lt;/body&gt;    
&lt;/html&gt;
```

###### Sources
[Emmet](https://www.emmet.io/)

]]&gt;</description>
      <link>https://www.lqdev.me/posts/scaffold-a-webpage-in-one-line</link>
      <guid>https://www.lqdev.me/posts/scaffold-a-webpage-in-one-line</guid>
      <pubDate>2018-03-10 16:07:00 -05:00</pubDate>
      <category>html</category>
      <category>web development</category>
      <category>development</category>
      <category>tools</category>
      <category>emmet</category>
    </item>
  </channel>
</rss>