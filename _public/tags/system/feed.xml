<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>Luis Quintanilla - system</title>
    <link>https://www.lqdev.me/tags/system</link>
    <description>All content tagged with 'system' by Luis Quintanilla</description>
    <lastBuildDate>03/10/2024 14:01 -05:00</lastBuildDate>
    <language>en</language>
    <item>
      <title>Garbage Collections NixOS</title>
      <description>&lt;![CDATA[&lt;h2&gt;Overview&lt;/h2&gt;
&lt;p&gt;One of the nice things about NixOS is, whenever you update the system, old configurations remain in place. That way if something were to go wrong, you can always revert back. However, there are tradeoffs. Each old configuration takes up space on your hard drive. If you're updating your system every week or every few weeks, this adds up. The following is a general guide on how to clean these up.&lt;/p&gt;
&lt;h2&gt;Delete old generations&lt;/h2&gt;
&lt;p&gt;This command deletes every generation, except the most current one.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;nix-env --delete-generations old
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you'd like to keep a few of the most recent ones. Say, from the last 14 days, you can pass an argument.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;nix-env --delete-generations 14d
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Run the garbage collector&lt;/h2&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;nix-store --gc
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Use the nix-collect-garbage utility&lt;/h2&gt;
&lt;p&gt;The following utility will delete older generations across all profiles on your system.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;nix-collect-garbage -d
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://nixos.org/manual/nix/stable/package-management/garbage-collection.html"&gt;NixOS Garbage Collection&lt;/a&gt;&lt;/p&gt;
]]&gt;</description>
      <link>https://www.lqdev.me/resources/wiki/nixos-garbage-collection</link>
      <guid>https://www.lqdev.me/resources/wiki/nixos-garbage-collection</guid>
      <pubDate>03/10/2024 14:01 -05:00</pubDate>
      <category>nixos</category>
      <category>system</category>
      <category>os</category>
      <category>linux</category>
    </item>
    <item>
      <title>Introducing Sudo for Windows</title>
      <description>&lt;![CDATA[[reshare] &lt;blockquote class="blockquote"&gt;
&lt;p&gt;Sudo for Windows is a new way for users to run elevated commands directly from an unelevated console session. It is an ergonomic and familiar solution for users who want to elevate a command without having to first open a new elevated console.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote class="blockquote"&gt;
&lt;p&gt;We are also excited to announce that we are open-sourcing this project here on GitHub!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="https://github.com/microsoft/sudo"&gt;GitHub Repo&lt;/a&gt;&lt;/p&gt;
]]&gt;</description>
      <link>https://www.lqdev.me/responses/introducing-sudo-windows</link>
      <guid>https://www.lqdev.me/responses/introducing-sudo-windows</guid>
      <pubDate>2024-02-13 21:51 -05:00</pubDate>
      <category>windows</category>
      <category>sudo</category>
      <category>system</category>
    </item>
    <item>
      <title>Fitch: CLI system information utility built with F#</title>
      <description>&lt;![CDATA[&lt;p&gt;I wasn't really planning on this, but here we are. I've been using &lt;a href="https://github.com/dylanaraps/neofetch"&gt;Neofetch&lt;/a&gt; on my PC to display system information whenever the terminal opens. However, in some cases, that would hang and it would take a while before I was able to use my terminal.&lt;/p&gt;
&lt;p&gt;I then ran into &lt;a href="https://github.com/unxsh/nitch"&gt;Nitch&lt;/a&gt; which is simple and fast. However, it was missing the local and public IP information Neofetch provides out of the box. Nitch is written using the &lt;a href="https://nim-lang.org/"&gt;Nim&lt;/a&gt; programming language. Originally, I had planned on extending Nitch and I figured out the code I needed to write to support IP information. However, my program wouldn't build and I was unable to find any information online to unblock myself.&lt;/p&gt;
&lt;p&gt;That's when I looked at the existing components in Nitch and found that it was basically just reading files from the &lt;code&gt;/proc&lt;/code&gt; and &lt;code&gt;/etc&lt;/code&gt; system directories. At that point, I decided to see if I could build my own utility using F#. A couple of hours later and the result was &lt;a href="https://www.lqdev.me/github/fitch"&gt;Fitch&lt;/a&gt;. This works well enough for my needs and in the future, I might publish it as a dotnet global tool to make it easy for others to use.&lt;/p&gt;
&lt;p&gt;&lt;img src="http://cdn.lqdev.tech/files/images/fitch-display.png" class="img-fluid" alt="Screeenshot of command line running Fitch F# System Utility" /&gt;&lt;/p&gt;
]]&gt;</description>
      <link>https://www.lqdev.me/notes/fitch-fsharp-cli-v0</link>
      <guid>https://www.lqdev.me/notes/fitch-fsharp-cli-v0</guid>
      <pubDate>2022-12-25 20:10 -05:00</pubDate>
      <category>dotnet</category>
      <category>fsharp</category>
      <category>linux</category>
      <category>system</category>
      <category>utilities</category>
      <category>cli</category>
      <category>fitch</category>
    </item>
  </channel>
</rss>