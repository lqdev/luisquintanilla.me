<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>Luis Quintanilla - dotnet</title>
    <link>https://www.lqdev.me/tags/dotnet</link>
    <description>All content tagged with 'dotnet' by Luis Quintanilla</description>
    <lastBuildDate>2025-05-02 15:19 -05:00</lastBuildDate>
    <language>en</language>
    <item>
      <title>Running RAG with ONNX Runtime GenAI for On-Prem Windows</title>
      <description>&lt;![CDATA[[reshare] &lt;p&gt;Really great to see these case studies and comparisons.&lt;/p&gt;
&lt;p&gt;A while back we published a blog post showcasing how experiences like the &lt;a href="https://devblogs.microsoft.com/dotnet/introducing-ai-dev-gallery-gateway-to-local-ai-development/"&gt;AI Dev Gallery&lt;/a&gt; make use of ONNX Runtime and the various AI building blocks in .NET to enable a diverse set of scenarios.&lt;/p&gt;
&lt;p&gt;For more ONNX Runtime GenAI focused C# content, you can also reference the post &lt;a href="https://devblogs.microsoft.com/dotnet/using-phi3-csharp-with-onnx-for-text-and-vision-samples-md/"&gt;Using Phi-3 &amp;amp; C# with ONNX for text and vision samples&lt;/a&gt;&lt;/p&gt;
]]&gt;</description>
      <link>https://www.lqdev.me/responses/rag-onnx-runtime-genai-windows</link>
      <guid>https://www.lqdev.me/responses/rag-onnx-runtime-genai-windows</guid>
      <pubDate>2025-05-02 15:19 -05:00</pubDate>
      <category>onnxruntime</category>
      <category>windows</category>
      <category>dotnet</category>
    </item>
    <item>
      <title>Languages &amp; Runtime Community Standup - Tensors in .NET</title>
      <description>&lt;![CDATA[[reshare] &lt;p&gt;Great session on Tensors in .NET by &lt;a href="https://bsky.app/profile/tannergooding.bsky.social"&gt;Tanner&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Tensors are the foundational data structure powering man AI workloads today.&lt;/p&gt;
&lt;p&gt;Introduced in .NET 9, &lt;a href="https://learn.microsoft.com/en-us/dotnet/core/whats-new/dotnet-9/overview#tensort"&gt;Tensors&lt;/a&gt; builds on top of earlier work like &lt;a href="https://devblogs.microsoft.com/dotnet/announcing-ml-net-3-0/#tensor-primitives-integration"&gt;TensorPrimitives&lt;/a&gt;, &lt;a href="https://devblogs.microsoft.com/dotnet/hardware-intrinsics-in-net-core/"&gt;hardware intrinsics&lt;/a&gt;, and &lt;a href="https://learn.microsoft.com/en-us/dotnet/standard/generics/math"&gt;generic math&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You can check out the recording below to learn more.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=VOEeNffChSg" title="Language Runtime Community Standup Tensors in .NET Thumbnail"&gt;&lt;img src="http://img.youtube.com/vi/VOEeNffChSg/0.jpg" class="img-fluid" alt="Language Runtime Community Standup Tensors in .NET Thumbnail" /&gt;&lt;/a&gt;&lt;/p&gt;
]]&gt;</description>
      <link>https://www.lqdev.me/responses/dotnet-language-runtime-standup-tensors</link>
      <guid>https://www.lqdev.me/responses/dotnet-language-runtime-standup-tensors</guid>
      <pubDate>2025-02-15 15:12 -05:00</pubDate>
      <category>ai</category>
      <category>tensor</category>
      <category>dotnet</category>
      <category>runtime</category>
    </item>
    <item>
      <title>Generative AI for Beginners (.NET) is now available</title>
      <description>&lt;![CDATA[[reshare] &lt;p&gt;If you're a .NET developer looking to get started with Generative AI, there's &lt;a href="https://devblogs.microsoft.com/dotnet/announcing-generative-ai-for-beginners-dotnet/"&gt;a new course for beginners&lt;/a&gt; that just launched.&lt;/p&gt;
&lt;p&gt;Through a series of self-paced lessons, you'll learn the foundations to help you start using AI to augment the capabilities of your .NET applications.&lt;/p&gt;
&lt;p&gt;Check out the &lt;a href="https://aka.ms/genainet"&gt;course&lt;/a&gt; and give us feedback!&lt;/p&gt;
]]&gt;</description>
      <link>https://www.lqdev.me/responses/generative-ai-for-beginners-dotnet-course</link>
      <guid>https://www.lqdev.me/responses/generative-ai-for-beginners-dotnet-course</guid>
      <pubDate>2025-02-15 12:14 -05:00</pubDate>
      <category>ai</category>
      <category>dotnet</category>
      <category>course</category>
      <category>generativeai</category>
    </item>
    <item>
      <title>AI Dev Gallery now in the Microsoft Store</title>
      <description>&lt;![CDATA[[reshare] &lt;p&gt;So excited to see the &lt;a href="https://apps.microsoft.com/detail/9n9pn1mm3bd5"&gt;AI Dev Gallery is now in the Microsoft Store&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Through various interactive samples, developers get to see how they might use AI for different tasks like text classification, object detection, and many others.&lt;/p&gt;
&lt;p&gt;Best of all, the models are all running locally and you get to see and export the C# code powering the samples to Visual Studio so you can continue tinkering on your own and integrate into your own applications.&lt;/p&gt;
&lt;p&gt;A few months ago, the team came on the .NET AI Community Standup to showcase the app. Since then, it's only kept improving and introducing new scenarios.&lt;/p&gt;
&lt;p&gt;You can check out the recording from that stream here.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=5H9TxzCQfNo" title="Thumbnail of AI Community Standup AI Dev Gallery"&gt;&lt;img src="http://img.youtube.com/vi/5H9TxzCQfNo/0.jpg" class="img-fluid" alt="Thumbnail of AI Community Standup AI Dev Gallery" /&gt;&lt;/a&gt;&lt;/p&gt;
]]&gt;</description>
      <link>https://www.lqdev.me/responses/ai-dev-gallery-windows-preview-ms-store</link>
      <guid>https://www.lqdev.me/responses/ai-dev-gallery-windows-preview-ms-store</guid>
      <pubDate>2025-02-15 12:02 -05:00</pubDate>
      <category>ai</category>
      <category>windows</category>
      <category>dotnet</category>
      <category>microsoft</category>
      <category>onnx</category>
    </item>
    <item>
      <title>Tinkering with DeepSeek R1, GitHub Models, and .NET on stream</title>
      <description>&lt;![CDATA[&lt;p&gt;I saw that the &lt;a href="https://azure.microsoft.com/en-us/blog/deepseek-r1-is-now-available-on-azure-ai-foundry-and-github/"&gt;DeepSeek R1 model is now on GitHub Models and Azure AI Foundry&lt;/a&gt;, so I decided to start a stream and play around with it in the GitHub Models playground as well as a .NET application.&lt;/p&gt;
&lt;p&gt;Here's the recording.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=8Z6iFALi8kM" title="YouTube Video Thumbnail Tinkering on Stream with DeepSeek R1, GitHub Models, and .NET"&gt;&lt;img src="http://img.youtube.com/vi/8Z6iFALi8kM/0.jpg" class="img-fluid" alt="YouTube Video Thumbnail Tinkering on Stream with DeepSeek R1, GitHub Models, .NET" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I rambled on stream since it's my stream of consciousness as I'm tinkering with these technologies.&lt;/p&gt;
&lt;p&gt;If you're mainly interested in the code, here's the GitHub repo: &lt;a href="https://github.com/lqdev/DeepSeekDotnetSample"&gt;lqdev/DeepSeekDotnetSample&lt;/a&gt;&lt;/p&gt;
]]&gt;</description>
      <link>https://www.lqdev.me/notes/tinkering-deepseek-r1-dotnet-github-models</link>
      <guid>https://www.lqdev.me/notes/tinkering-deepseek-r1-dotnet-github-models</guid>
      <pubDate>2025-01-29 19:59 -05:00</pubDate>
      <category>deepseek</category>
      <category>ai</category>
      <category>dotnet</category>
      <category>github</category>
      <category>azure</category>
      <category>livestream</category>
    </item>
    <item>
      <title>Build a YouTube chat app with .NET</title>
      <description>&lt;![CDATA[[reshare] &lt;p&gt;Great post from &lt;a href="https://jordanmatthiesen.me/"&gt;jordanmatthiesen.me&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote class="blockquote"&gt;
&lt;p&gt;Recently on a trip for a tech conference I created a YouTube chat app using .NET and AI. This is part of my exploration into creating a larger app for chatting about .NET AI development (leveraging docs, presentations, and sample code my team has been working on at Microsoft).&lt;/p&gt;
&lt;/blockquote&gt;
]]&gt;</description>
      <link>https://www.lqdev.me/responses/youtube-chat-app-ai-dotnet</link>
      <guid>https://www.lqdev.me/responses/youtube-chat-app-ai-dotnet</guid>
      <pubDate>2024-12-16 21:22 -05:00</pubDate>
      <category>dotnet</category>
      <category>ai</category>
      <category>youtube</category>
      <category>chat</category>
      <category>microsoft.extensions.ai</category>
      <category>openai</category>
    </item>
    <item>
      <title>Implement ActivityPub on a static site series by maho.dev</title>
      <description>&lt;![CDATA[[reshare] &lt;p&gt;I've been following along with this amazing series from &lt;a href="https://maho.dev/"&gt;Maho&lt;/a&gt; on implementing ActivityPub on static websites.&lt;/p&gt;
&lt;p&gt;As I think about what I want out of my website and the way I engage in the Fediverse, there's a lot of overlap.&lt;/p&gt;
&lt;p&gt;Today, what I mainly use my Mastodon instance for is:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Having a Fediverse presence on a self-hosted Mastodon instance.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.lqdev.me/posts/rss-to-mastodon-posse-azure-logic-apps/"&gt;Cross-posting posts on by website using the POSSE pattern&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Although I have learned a ton from self-hosting my own Mastodon instance, neither of the points listed above require me self-hosting or even having an account on someone else's instance.&lt;/p&gt;
&lt;p&gt;Yesterday, &lt;a href="https://www.lqdev.me/notes/using-domain-mastodon-discovery"&gt;I took the first step in linking my Fediverse presence to my domain&lt;/a&gt;. That fulfills my first requirement.&lt;/p&gt;
&lt;p&gt;I rarely post original content on Mastodon and for consumption, &lt;a href="https://www.lqdev.me/notes/subscribed-to-1042-feeds-newsblur"&gt;I already subscribe to accounts and tags via RSS&lt;/a&gt;. Therefore, the second requirement is one that can naturally occur without having to use a Mastodon instance as an intermediary. I can just post on my website and because my posts can show up in my outbox, there's no need to POSSE. I don't want my presence to be limited to Mastodon though, but since I plan on supporting media, reviews, and other types of posts, I expect my posts to be accessible across other platforms on the Fediverse like Pixelfed, Bookwyrm, and many others.&lt;/p&gt;
&lt;p&gt;Since my website and website features are built using .NET, Maho's guide simplifies my implementation. Because &lt;a href="https://www.lqdev.me/colophon"&gt;I'm not using any of the existing static site generators and rolled my own&lt;/a&gt;, that means that there's going to be some effort and customizations required on my end. It would no different from my &lt;a href="https://www.lqdev.me/posts/receive-webmentions-fsharp-az-functions-fsadvent/"&gt;custom Webmentions implementation&lt;/a&gt; though. My hope is that I will save time I often spend maintaining the server as well as money since I no longer need to rent a server to host my instance. At the same time, I get to learn and contribute to building a more open, decentralized, and personal web.&lt;/p&gt;
]]&gt;</description>
      <link>https://www.lqdev.me/responses/implement-activitypub-static-site-series-maho</link>
      <guid>https://www.lqdev.me/responses/implement-activitypub-static-site-series-maho</guid>
      <pubDate>2024-11-19 10:03 -05:00</pubDate>
      <category>acvititypub</category>
      <category>fediverse</category>
      <category>staticsite</category>
      <category>blogging</category>
      <category>indieweb</category>
      <category>openweb</category>
      <category>personalweb</category>
      <category>dotnet</category>
      <category>internet</category>
    </item>
    <item>
      <title>.NET Conf 2024 - Session Recordings</title>
      <description>&lt;![CDATA[[reshare] &lt;p&gt;The recordings are out for .NET Conf 2024 in case you missed any of the sessions.&lt;/p&gt;
&lt;p&gt;Here are the recordings from the sessions I participated in.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://youtu.be/7Rw_ciSh2Wk"&gt;Building AI Applications From Scratch: A Hands-On Guide for .NET Developers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://youtu.be/MdM8G2e7jOg"&gt;Building the Foundation: AI Fundamentals in .NET&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Also, there's a &lt;a href="https://www.youtube.com/playlist?list=PLdo4fOcmZ0oXU8g5XIKiOPX4tgIqG2Ddc"&gt;Premier Bonus playlist&lt;/a&gt; which has a ton of amazing bonus content.&lt;/p&gt;
]]&gt;</description>
      <link>https://www.lqdev.me/responses/dotnet-conf-2024-session-playlist</link>
      <guid>https://www.lqdev.me/responses/dotnet-conf-2024-session-playlist</guid>
      <pubDate>2024-11-15 11:52 -05:00</pubDate>
      <category>dotnet</category>
      <category>dotnetconf</category>
      <category>net9</category>
      <category>dotnet9</category>
      <category>programming</category>
      <category>dev</category>
    </item>
    <item>
      <title>Upgraded to .NET 9</title>
      <description>&lt;![CDATA[&lt;p&gt;Obligatory upgrade post. Just upgraded the website to .NET 9. As with all the previous years, it involved no code changes, and all I had to do was updade the version I'm using in my project file and GitHub Actions file.&lt;/p&gt;
]]&gt;</description>
      <link>https://www.lqdev.me/notes/website-upgraded-dotnet-9</link>
      <guid>https://www.lqdev.me/notes/website-upgraded-dotnet-9</guid>
      <pubDate>2024-11-14 00:38 -05:00</pubDate>
      <category>dotnet</category>
      <category>net9</category>
      <category>githubactions</category>
      <category>github</category>
      <category>indieweb</category>
      <category>upgrade</category>
    </item>
    <item>
      <title>Day 1 of .NET Conf</title>
      <description>&lt;![CDATA[[reshare] &lt;p&gt;Day 1 of .NET Conf was a lot of fun. Tons of great sessions. Here's the recording of all the sessions.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=hM4ifrqF_lQ" title=".NET Conf Day 1 LiveStream"&gt;&lt;img src="http://img.youtube.com/vi/hM4ifrqF_lQ/0.jpg" class="img-fluid" alt=".NET Conf Day 1 LiveStream" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you're interested in checking out my session with Jeremy, Building AI Applications From Scratch, here's a link to it.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/live/hM4ifrqF_lQt=23407" title=".NET Conf Day 1 LiveStream Countdown"&gt;&lt;img src="http://img.youtube.com/vi/hM4ifrqF_lQ/1.jpg" class="img-fluid" alt=".NET Conf Day 1 LiveStream Countdown" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Tomorrow, I'll also get a chance to share the stage with Tarek and Tanner to talk &lt;a href="https://www.dotnetconf.net/agenda#:%7E:text=Building%20the%20Foundation:%20AI%20Fundamentals%20in%20.NET"&gt;AI Fundamentals&lt;/a&gt;.&lt;/p&gt;
]]&gt;</description>
      <link>https://www.lqdev.me/responses/dotnetconf-2024-day-1-success</link>
      <guid>https://www.lqdev.me/responses/dotnetconf-2024-day-1-success</guid>
      <pubDate>2024-11-13 01:47 -05:00</pubDate>
      <category>dotnet</category>
      <category>dotnetconf</category>
      <category>dotnet9</category>
      <category>net9</category>
      <category>conference</category>
      <category>ai</category>
      <category>aspire</category>
      <category>microsoft</category>
    </item>
    <item>
      <title>.NET Conf 2024 Bound</title>
      <description>&lt;![CDATA[&lt;p&gt;It's that time of the year again. A new .NET release.&lt;/p&gt;
&lt;p&gt;Tons of great sessions at .NET Conf this year, which you can see in the &lt;a href="https://www.dotnetconf.net/"&gt;agenda&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I'll be taking part in two sessions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Building AI Applications from Scratch: A Hands-On Guide for .NET Developers&lt;/li&gt;
&lt;li&gt;Building the Foundation: AI Fundamentals in .NET&lt;/li&gt;
&lt;/ul&gt;
]]&gt;</description>
      <link>https://www.lqdev.me/notes/netconf-bound-2024</link>
      <guid>https://www.lqdev.me/notes/netconf-bound-2024</guid>
      <pubDate>2024-11-10 14:29 -05:00</pubDate>
      <category>dotnet</category>
      <category>dotnetconf</category>
      <category>conference</category>
      <category>ai</category>
      <category>dotnet9</category>
      <category>net9</category>
    </item>
    <item>
      <title>Digitize Analog Bookmarks using AI, .NET, and GitHub Models</title>
      <description>&lt;![CDATA[
## Introduction

This past year I've made more of an effort to read. I track books in my [/library](/library) page.

Although I have a [Nova Air 2 E-Note device](https://shop.boox.com/products/novaair2), given the choice, I prefer physical books. Despite the conveniene of an electronic note-taking device, theres something about analog that I find hard to quit. 

As I read books, especially non-fiction, I annotate them in various ways. Eventually, those annotations make their way into my library page.

Here's an example of those annotations for [Building A Second Brain by Thiago Forte](/reviews/building-a-second-brain).

The process of transferring notes is manual and tedious. I don't always have the discipline to transfer them at periodic intervals and what ends up happening is, I get to the end of the book without transferring any notes. To make space for new books, I donate it or resell the ones I've read. If I didn't take the time to transfer those notes, they're gone. [Slow Productivity](/reviews/slow-productivity-newport) is an example of that.

I want to find a better system that's low-maintenance for keeping more of these notes and retaining knowledge I've found valuable. 

Then it hit me, why not use AI? I know I could use OCR or even some of the AI models of yesteryear. The challenge is, those systems are error prone and given I don't always have the motivation to transfer notes manually, I have even less motivation to build and maintain such a system.

However, vision models have advanced significantly and when paired with language models, the barrier to entry for reasoning over image data has drastically decreased. 

That's what led to this post. In this post, I'll show how you can use AI models like GPT-4o Mini to extract the passages I've annotated in physical books from an image. I then format those passages in markdown to make them easy to directly copy and paste them onto the website. 

I know there's probably a ton of services that do this for you, but it's a lot more fun to build one from scratch. With that in mind, let's get started. 

You can find the source for the application in the [AIBookmarks GitHub repository](/github/AIBookmarks). 

Alternatively, I've configured the repo to use GitHub CodeSpaces, so you can launch the application there as well.

[![Open in GitHub Codespaces](https://github.com/codespaces/badge.svg)](https://codespaces.new/lqdev/AIBookmarks)

## Configure access to GitHub Models

I'll be using [GitHub Models](https://github.blog/news-insights/product-news/introducing-github-models/) as my AI model provider. GitHub Models provides developers with access to a catalog of AI models such as GPT-4o, Llama 3.2, Phi 3.5, and many others. Best of all, it's completely free, [though restrictions apply](https://docs.github.com/en/github-models/prototyping-with-ai-models#rate-limits).

I chose GitHub Models for the following reasons:

- Zero installation. Although I really like Ollama and some of the other local AI model providers, I didn't want to fill precious hard-drive space with AI models.
- It's free! Since I'm just prototyping, even with their limited capacity, it should be enough to prove out whether my scenario is feasible.
- They provide access to multi-modal models such as GPT-4o, Llama 3.2 Vision, and Phi 3.5 Vision, which can reason over text and images, which is what I need.
- I'm one of the GPU poor. My [Lenovo Thinkpad X1](https://www.lenovo.com/us/en/p/laptops/thinkpad/thinkpadx1/x1-titanium-g1/22tp2x1x1t1?orgRef=https%253A%252F%252Fduckduckgo.com%252F) couldn't handle running one of the vision models.

Getting set up with GitHub models is fairly easy. At minimum, it requires:

1. A GitHub Account.
1. A Personal Access Token. For more details, see the [GitHub documentation](https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens).

Once you have both of those, you can get started building your application.  

## Create a client

The sample application is a C# console application which targets .NET 9. However, the code shown here should work on the latest LTS version as well.

For this solution, I use the Azure AI Inference implementation of [Microsoft.Extensions.AI](https://www.nuget.org/packages/Microsoft.Extensions.AI.AzureAIInference/). [Microsoft.Extensions.AI](https://devblogs.microsoft.com/dotnet/introducing-microsoft-extensions-ai-preview/), M.E.AI for short, is a set of abstractions that provides a common set of interfaces for interacting with AI models.

Although we're using the Azure AI Inference client SDK implementation of M.E.AI, we can still use it to work with models from the GitHub Model catalog. 

```csharp
IChatClient client =
    new ChatCompletionsClient(
        endpoint: new Uri("https://models.inference.ai.azure.com"), 
        new AzureKeyCredential(Environment.GetEnvironmentVariable("GITHUB_TOKEN")))
        .AsChatClient("gpt-4o-mini");
```

## Load your images

In the repo, I have a set of sample images containing annotations. These are the images I'll send to the AI model for processing. 

The following is an sample from [The Creative Act by Rick Rubin](/reviews/creative-act-way-of-being-rubin).

![An image of a book with pencil markings](https://github.com/lqdev/AIBookmarks/raw/main/data/creative-act-1.jpg)

1. Load the files

    ```csharp
    var filePaths = Directory.GetFiles("data");
    ```

1. Create a collection to store extracted passages

    ```csharp
    var passages = new List&lt;AIBookmark&gt;();
    ```

## Process the images

Once you have the images loaded, it's time to proces them.

1. Start by setting the system prompt. This will provide the initial guidance for the extraction task.

    ```csharp
    var systemPrompt = 
        """
        You are an AI assistant that extracts underlined, highlighted, and marked passages from book page images.

        When passages have a natural continuation between pages, merge them and assign the page number where the first passage starts.
        """;
    ```

1. Then, iterate over each of the images and process them.

    ```csharp
    foreach(var path in filePaths)
    {
        var file = await File.ReadAllBytesAsync(path);
        var messages = new List&lt;ChatMessage&gt;
        {
            new ChatMessage(ChatRole.System, systemPrompt),
            new ChatMessage(ChatRole.User, new AIContent[] {
                new ImageContent(file, "image/jpeg"),
                new TextContent("Extract the marked passages from the image"),
            })
        };

        var response = await client.CompleteAsync&lt;List&lt;AIBookmark&gt;&gt;(messages, options: new ChatOptions {Temperature = 0.1f});

        passages.AddRange(response.Result);
    }
    ```

    This code:

    1. Loads the image as a `byte[]`.
    1. Composes a set of messages that include:

        - The system prompt
        - The image
        - The user prompt instructing the model to extract the marked passages from the image

    1. Sends the messages to the model for processing and returns a list of `AIBookmark`. An `AIBookmark` is a custom class I've defined as follows:

        ```csharp
        class AIBookmark
        {
            public string Text {get;set;}

            public int PageNumber {get;set;}
        }
        ```

        Some of the more recent AI models support structured output, which enforce a schema on AI model outputs. You can take a look at the [OpenAI documentation](https://openai.com/index/introducing-structured-outputs-in-the-api/) for more details. It's important to note though that the functionality is not exclusive to OpenAI models.

    1. Adds the extracted passages to the `passages` collection.

## Format the results

Once all of the files are processed by the AI model, additional processing is done to ensure that they're in the correct page order as well as formatted as markdown blockquotes. 

```csharp
var sortedPassages = 
    passages
        .OrderBy(p =&gt; p.PageNumber)
        .Select(p =&gt; $"&gt; {p.Text} (pg. {p.PageNumber})");
```

## Display the results

```csharp
foreach(var passage in sortedPassages)
{
    Console.WriteLine(passage);
    Console.WriteLine("");
}
```

For the images included in the repo's *data* directory, output might look like the following.

```markdown
&gt; This isn’t a matter of blind belief in yourself. It’s a matter of experimental faith. (pg. 278)

&gt; When we don’t yet know where we’re going, we don’t wait. We move forward in the dark. If nothing we attempt yields progress, we rely on belief and will. We may take several steps backward in the sequence to move ahead. (pg. 278)

&gt; If we try ten experiments and none of them work; we have a choice. We can take it personally, and think of ourselves as a failure and question our ability to solve the problem. (pg. 278)

&gt; Staying in it means a commitment to remain open to what’s around you. Paying attention and listening. Looking for connections and relationships in the outside world. Searching for beauty. Seeking stories. Noticing what you find interesting, what makes you lean forward. And knowing all of this is available to use next time you sit down to work, where the raw data gets put into form. (pg. 296)

&gt; Just as a surfer can’t control the waves, artists are at the mercy of the creative rhythms of nature. This is why it’s of such great importance to remain aware and present at all times. Watching and waiting. (pg. 296)

&gt; Maybe the best idea is the one you’re going to come up with this evening. (pg. 297)
```

## Improvements and next steps

Putting the application together took me less than an hour so this is far from done. However, it does provide me with a starting point and offers validation that this could be a way to more easily capture the knowledge I'm curating from physical books. 

Some improvements I can make here:

1. Update the system prompt with some samples to help guide the extraction. For example, in the output I shared, that last passage is not annotated. It just happens to be a mostly blank page with that quote in the center, therefore giving the illusion that the passage is important in some way.  
1. Add additional information to the AIBookmark class like `Index` so I can ensure order within a page is preserved. Right now page number is good enough, but I can't guarantee the correct order. An index property might help here.
1. Use a service with higher rate limits. The current rate limits wouldn't allow me to process a large number of images at once. Therefore, I'd need to use a service with higher limits. Alternatively, I could make this a job that runs in the background which abides by the rate limits but I also don't have to spend money on. Given I'm not using this for anything mission-critical, that'd be an acceptable solution as well. 
1. Refactor the solution so I can more easily swap between tasks. For example, sometimes I might want to use it with images from my bullet journal. Other times, I might want to use it with handwritten notes. Whatever the case may be, it'd be good to not have to rewrite the prompts every time. 

Some ways I see myself using this project:

1. Periodically collect images of annotated pages and save them to cloud storage. 
1. When I'm done with the book, drop all the images in the *data* directory.
1. Further enrich data by condensing repetitive passages and extracting key concepts.
1. Storing this knowledge into some sort of knowledge store to make it actionable. 

## Conclusion

Just for fun, Tyler released all of the lyrics to his [latest album](/responses/chromakopia-tyler-the-creator-released) as [images on X](https://twitter.com/tylerthecreator/status/1852105825650708651/photo/1). With a few tweaks, I was able to repurpose this solution to extract the text from them and that worked relatively well. 

Just with this simple solution, there's a ton of other applications I can think of in my daily life to help bridge my analog and digital lives. 

What other use cases do you see yourself using something like this for? [Let me know](/contact).

Happy coding!]]&gt;</description>
      <link>https://www.lqdev.me/posts/digitize-analog-bookmarks-with-ai-dotnet</link>
      <guid>https://www.lqdev.me/posts/digitize-analog-bookmarks-with-ai-dotnet</guid>
      <pubDate>2024-10-31 21:41 -05:00</pubDate>
      <category>ai</category>
      <category>dotnet</category>
      <category>github</category>
      <category>reading</category>
      <category>bookmarks</category>
      <category>analog</category>
      <category>digital</category>
      <category>reading</category>
      <category>notes</category>
    </item>
    <item>
      <title>Build your own self-hosted live streaming application with Owncast and .NET Aspire</title>
      <description>&lt;![CDATA[
Platforms come and go. As a result, I'm a strong advocate for [owning your data](https://indieweb.org/own_your_data) (when possible). Self-hosting is a way for you to do that. Owning your data could mean self-hosting [your website](https://buttondown.com/ownyourweb/archive/issue-06/), [password manager](https://bitwarden.com/blog/host-your-own-open-source-password-manager/), [media server](https://jellyfin.org/docs/), or [social media](https://docs.joinmastodon.org/user/run-your-own/). However, self-hosting comes with its own challenges, primarily cost (time and money) and in cases where software isn't provided as an appliance on your hosting provider of choice, some technical knowledge may be required. 

As I got more into self-hosting applications such as my [Mastodon instance](/mastodon), I came across Owncast.   

During peak COVID lockdowns, like many others, live streaming is one of the ways I passed the time. While Twitch and YouTube got the job done, self-hosting was always in the back of my mind.  

It's been a while since I've live-streamed, so I never really went through the process of evaluating the self-hosted route with Owncast. 

While browsing for something on YouTube the other day, I ran into some of my [old live-stream recordings](https://www.youtube.com/playlist?list=PLsdMoYmuvh9ZtgB8U7FECR_8wKMYXJNAm). This got me thinking again, how difficult would it be to put together my own live-streaming setup. 

This post is the result of that exploration. 

In this post, I'll modify a .NET Aspire Starter Application template and show how to set up a self-hosted live-streaming application using Owncast and .NET Aspire.  

You can find the source code in the [lqdev/BYOwncastAspire](/github/BYOwncastAspire) repository.

![BYOwnCastAspire Web Frontend](https://github.com/user-attachments/assets/bdd9f901-8d8f-45be-9e37-4dce8459e481)

## What is Owncast?

The Owncast website describes the project as, "...a free and open source live video and web chat server for use with existing popular broadcasting software."

![Owncast admin server page](https://github.com/user-attachments/assets/769ec2d8-a3d1-4ec3-8271-c2de6e11ddd3)

It goes on to further describe some of the reasons I like Owncast, which are:

- **Self-hosting** - I'm in complete control over the service and my data
- **Open-source** - I can freely use and contribute to the project. Free in this case meaning both as in freedom and pizza.
- **Builds on top of open standards like RMTP** - Software that supports the Real-Time Messaging Protocol (RMTP) like OBS can immediately be leveraged. 
- **Fediverse compatible** - Your content and network federated across [the Fediverse](https://joinfediverse.wiki/What_is_the_Fediverse%3F). 

To learn more, check out the [Owncast website](https://owncast.online/). 

## What is .NET Aspire?

The .NET Aspire documentation describes it as, "...an opinionated, cloud ready stack for building observable, production ready, distributed applications.​ .NET Aspire is delivered through a collection of NuGet packages that handle specific cloud-native concerns."

Personally, the parts of .NET Aspire that matter to me are:

- **App composition** - The .NET Aspire programming model makes it easy to define and compose a variety of resources such as .NET projects, containers, and much more in a single place. In many cases, for commonly used services, these resources are exposed in the form of [integrations](https://learn.microsoft.com/dotnet/aspire/fundamentals/integrations-overview). These integrations further simplify the composition of applications.  
- **Tooling (Dashboard)** - .NET Aspire provides a set of tools and templates. However, my favorite is the dashboard. The dashboard provides me with a single place to view my resources, their configurations, and logs. 

Although in this post, I don't cover deployment, there is also the provisioning component provided by .NET Aspire which in many cases can [simplify your application deployments](https://learn.microsoft.com/dotnet/aspire/deployment/overview). 

To learn more, check out the [.NET Aspire documentation](https://learn.microsoft.com/dotnet/aspire/get-started/aspire-overview). 

## Build your application

This application makes a few modifications to the [.NET Aspire Starter Application template](https://learn.microsoft.com/dotnet/aspire/fundamentals/setup-tooling?tabs=linux&amp;pivots=dotnet-cli#net-aspire-project-templates). 

The application consists of a few projects:

- **BYOwncastAspire.AppHost** - This project is the entrypoint for .NET Aspire applications. This is where we'll configure the Owncast server as a container resource. 
- **BYOwncastAspire.Web** - Blazor web application. Although Owncast provides its own page where viewers can tune into your stream, by having a separate web application, preferably your own personal website, you can further enrich and customize how and where you publish content. 
- **BYOwncastAspire.ServiceDefaults** - This project contains default configurations for telemetry, health checks, resiliency, etc. No changes or updates required here. 

### Configure Owncast

There are many ways to host an Owncast server, with one of them being a container. 

In the context of Aspire which has built-in container support, you can easily add Owncast as a resource in your application. 

From the [Owncast documentation](https://owncast.online/quickstart/container/), once you've pulled the Owncast container image, you can start it with the following command.

```bash
docker run -v `pwd`/data:/app/data -p 8080:8080 -p 1935:1935 owncast/owncast:latest
```

This translates to the following in the *Program.cs* of the *BYOwncastAspire.AppHost* project.

```csharp
var owncast = builder
    .AddContainer(name: "owncast", image:"owncast/owncast")
    .WithBindMount("./data","/app/data")
    .WithHttpEndpoint(port:8080,targetPort:8080,name:"admin")
    .WithHttpEndpoint(port:1935,targetPort:1935,name:"streaming")
    .WithExternalHttpEndpoints();
```

This code:

- Adds the owncast container image
- Mounts a local *data* directory to the */app/data* directory in the container
- Maps port `8080` for the Owncast admin server and `1935` for RMTP server.
- Exposes the endpoints publicly

### Embed your stream

Owncast provides the ability to [embed your video stream onto a website](https://owncast.online/docs/embed/). 

Although we don't need a frontend because one is already provided by Owncast, by embedding your stream on your website you can provide a single place for your viewers to consume your content. 

In this case, we can treat the *BYOwncastAspire.Web* project as our website. 

To embed your stream to the website, add the following code to your *Home.razor* page.

```csharp
&lt;iframe
  src="http://localhost:8080/embed/video"
  title="Owncast"
  height="350px" width="550px"
  referrerpolicy="origin"
  allowfullscreen&gt;
&lt;/iframe&gt;
```

In this case, we're pointing to the endpoint listening on port `8080` of our `localhost`. When you deploy the application, you'd replace `src` with your domain. 

## Start your application

That's all there is in terms of configuration. 

To start the application:

1. Open the terminal 
2. Navigate to the *BYOwncastAspire.AppHost* project and run the following command.

    ```bash
    dotnet run
    ```

This will launch you into the .NET Aspire dashboard. At this point, you can further customize your Owncast server as well as the website.  

![BYOwncastAspire .NET Aspire Dashboard Resource Page](https://github.com/user-attachments/assets/c20d84d8-925a-4f80-9058-622466cb08e9)

## What next?

Now that you have your application running, in its current form, this application is only meant to serve as a sample of what you can do with Owncast and .NET Aspire. 

Some next steps might include:

- [Change your admin password and customize your Owncast server](https://owncast.online/docs/configuration/)
- [Configure object storage](https://owncast.online/docs/storage/)
- [Set up your steaming software](https://owncast.online/docs/broadcasting/obs/)
- [Deploy your application](https://learn.microsoft.com/dotnet/aspire/deployment/azure/aca-deployment)
- [Extend the app's functionality by building custom plugins and extensions](https://owncast.online/thirdparty/)

The plugins and extensions are particularly interesting to me because there may even be opportunities to experiment and insert AI capabilities at various layers such as moderation, translation, accessibility, show notes, chat summaries, etc. 

## Conclusion

In this post, I showed how you can combine the powerful live-steaming features of Owncast with the app orchestration and tooling in .NET Aspire to create rich self-hosted live-steaming applications.

If you use this sample as a starting point for your own live-streaming or self-hosting explorations, [send me a message](/contact). I'd love to hear about it.  
]]&gt;</description>
      <link>https://www.lqdev.me/posts/build-your-own-live-streaming-app-owncast-dotnet-aspire</link>
      <guid>https://www.lqdev.me/posts/build-your-own-live-streaming-app-owncast-dotnet-aspire</guid>
      <pubDate>2024-10-20 14:01 -05:00</pubDate>
      <category>owncast</category>
      <category>dotnet</category>
      <category>indieweb</category>
      <category>fediverse</category>
      <category>aspire</category>
      <category>livestreaming</category>
      <category>twitch</category>
      <category>youtube</category>
      <category>blazor</category>
    </item>
    <item>
      <title>Join me at DEVintersection in Las Vegas - September 10-12</title>
      <description>&lt;![CDATA[[reshare] &lt;p&gt;I'm excited to be at DEVintersection again this year where I'll get a chance to meet old and new friends.&lt;/p&gt;
&lt;p&gt;I have a few sessions where I'll be talking about some of my favorite things, .NET and AI.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.devintersection.com/#!/session/An%20Introduction%20to%20AI%20in%20.NET/6788"&gt;Introduction to AI in .NET&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.devintersection.com/#!/session/Building%20AI%20Applications%20from%20Scratch:%20A%20Hands-On%20Guide%20for%20.NET%20Developers/6789"&gt;Building AI Applications from Scratch: A Hands-On Guide for .NET Developers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.devintersection.com/#!/session/Ask%20The%20Experts%20-%20Starting%20out%20on%20your%20.NET%20&amp;amp;%20AI%20explorations/7023"&gt;Ask The Experts - Starting out on your .NET &amp;amp; AI explorations&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Other sessions I recommend as well:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.devintersection.com/#!/session/Navigating%20the%20World%20of%20AI%20Models%20in%20.NET:%20From%20Local%20Development%20to%20the%20Cloud/7022"&gt;Navigating the World of AI Models in .NET: From Local Development to the Cloud&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.devintersection.com/#!/session/KEYNOTE%20-%20Practical%20Real-World%20AI%20for%20Developers/6986"&gt;KEYNOTE - Practical Real-World AI for Developers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.devintersection.com/#!/session/Making%20Web%20Applications%20Intelligent%20and%20Performant%20with%20Redis/6982"&gt;Making Web Applications Intelligent and Performant with Redis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.devintersection.com/#!/session/Building%20AI%20Copilots:%20Integrate%20Semantic%20Kernel,%20Azure%20OpenAI,%20and%20Azure%20Cosmos%20DB%20with%20.NET%20Aspire/6960"&gt;Building AI Copilots: Integrate Semantic Kernel, Azure OpenAI, and Azure Cosmos DB with .NET Aspire&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.devintersection.com/#!/session/Introduction%20to%20.NET%20Aspire/6964"&gt;Introduction to .NET Aspire&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There's so many more, but in the interest of not listing them all out, check out the &lt;a href="https://www.devintersection.com/#!/sessions"&gt;schedule&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;See you there!&lt;/p&gt;
]]&gt;</description>
      <link>https://www.lqdev.me/responses/devintersection-vegas-sept-2024</link>
      <guid>https://www.lqdev.me/responses/devintersection-vegas-sept-2024</guid>
      <pubDate>2024-09-04 20:10 -05:00</pubDate>
      <category>devintersection</category>
      <category>conference</category>
      <category>dotnet</category>
      <category>ai</category>
      <category>aspnet</category>
      <category>LAS</category>
      <category>lasvegas</category>
      <category>desert</category>
    </item>
    <item>
      <title>DevContainer configurations</title>
      <description>&lt;![CDATA[&lt;h2&gt;Overview&lt;/h2&gt;
&lt;p&gt;A collection of DevContainer configurations&lt;/p&gt;
&lt;h2&gt;Base Debian Image&lt;/h2&gt;
&lt;pre&gt;&lt;code class="language-json"&gt;{
    &amp;quot;name&amp;quot;: &amp;quot;lqdev.me Base Debian DevContainer&amp;quot;,
    &amp;quot;image&amp;quot;: &amp;quot;mcr.microsoft.com/devcontainers/base:debian&amp;quot;,
    &amp;quot;features&amp;quot;: {
        &amp;quot;ghcr.io/devcontainers/features/git:1&amp;quot;: {},
        &amp;quot;ghcr.io/devcontainers/features/docker-in-docker:2&amp;quot;: {}
    },
    &amp;quot;customizations&amp;quot;: {
        &amp;quot;vscode&amp;quot;: {
            &amp;quot;extensions&amp;quot;: [
                &amp;quot;ms-vscode-remote.vscode-remote-extensionpack&amp;quot;,
                &amp;quot;ms-azuretools.vscode-docker&amp;quot;,
                &amp;quot;GitHub.copilot&amp;quot;,
                &amp;quot;GitHub.copilot-chat&amp;quot;,
                &amp;quot;saoudrizwan.claude-dev&amp;quot;
            ]
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Python&lt;/h2&gt;
&lt;pre&gt;&lt;code class="language-json"&gt;{
    &amp;quot;name&amp;quot;: &amp;quot;lqdev.me Python DevContainer&amp;quot;,
    &amp;quot;image&amp;quot;: &amp;quot;mcr.microsoft.com/devcontainers/base:debian&amp;quot;,
    &amp;quot;features&amp;quot;: {
        &amp;quot;ghcr.io/devcontainers/features/git:1&amp;quot;: {},
        &amp;quot;ghcr.io/devcontainers/features/docker-in-docker:2&amp;quot;: {},
        &amp;quot;ghcr.io/devcontainers/features/python:1&amp;quot;: {
            &amp;quot;version&amp;quot;: &amp;quot;3.11&amp;quot;
        },
        &amp;quot;ghcr.io/va-h/devcontainers-features/uv:1&amp;quot;: {}
    },
    &amp;quot;customizations&amp;quot;: {
        &amp;quot;vscode&amp;quot;: {
            &amp;quot;extensions&amp;quot;: [
                &amp;quot;ms-vscode-remote.vscode-remote-extensionpack&amp;quot;,
                &amp;quot;ms-azuretools.vscode-docker&amp;quot;,
                &amp;quot;ms-python.python&amp;quot;,
                &amp;quot;GitHub.copilot&amp;quot;,
                &amp;quot;GitHub.copilot-chat&amp;quot;,
                &amp;quot;saoudrizwan.claude-dev&amp;quot;                
            ]
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Python (GPU)&lt;/h2&gt;
&lt;pre&gt;&lt;code class="language-json"&gt;{
    &amp;quot;name&amp;quot;: &amp;quot;lqdev.me Python (GPU) DevContainer&amp;quot;,
    &amp;quot;image&amp;quot;: &amp;quot;mcr.microsoft.com/devcontainers/base:debian&amp;quot;,
    &amp;quot;features&amp;quot;: {
        &amp;quot;ghcr.io/devcontainers/features/git:1&amp;quot;: {},
        &amp;quot;ghcr.io/devcontainers/features/docker-in-docker:2&amp;quot;: {},
        &amp;quot;ghcr.io/devcontainers/features/python:1&amp;quot;: {
            &amp;quot;version&amp;quot;: &amp;quot;3.11&amp;quot;
        },
        &amp;quot;ghcr.io/devcontainers/features/nvidia-cuda:1&amp;quot;: {},
        &amp;quot;ghcr.io/va-h/devcontainers-features/uv:1&amp;quot;: {}
    },
    &amp;quot;customizations&amp;quot;: {
        &amp;quot;vscode&amp;quot;: {
            &amp;quot;extensions&amp;quot;: [
                &amp;quot;ms-vscode-remote.vscode-remote-extensionpack&amp;quot;,
                &amp;quot;ms-azuretools.vscode-docker&amp;quot;,
                &amp;quot;ms-python.python&amp;quot;,
                &amp;quot;GitHub.copilot&amp;quot;,
                &amp;quot;GitHub.copilot-chat&amp;quot;,
                &amp;quot;saoudrizwan.claude-dev&amp;quot;                
            ]
        }
    },
    &amp;quot;runArgs&amp;quot;: [
        &amp;quot;--gpus&amp;quot;, 
        &amp;quot;all&amp;quot;
    ]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;.NET&lt;/h2&gt;
&lt;pre&gt;&lt;code class="language-json"&gt;{
    &amp;quot;name&amp;quot;: &amp;quot;lqdev.me .NET DevContainer&amp;quot;,
    &amp;quot;image&amp;quot;: &amp;quot;mcr.microsoft.com/devcontainers/base:debian&amp;quot;,
    &amp;quot;features&amp;quot;: {
        &amp;quot;ghcr.io/devcontainers/features/git:1&amp;quot;: {},
        &amp;quot;ghcr.io/devcontainers/features/docker-in-docker:2&amp;quot;: {},
        &amp;quot;ghcr.io/devcontainers/features/dotnet:2&amp;quot;: {
            &amp;quot;version&amp;quot;: &amp;quot;9.0&amp;quot;
        }
    },
    &amp;quot;customizations&amp;quot;: {
        &amp;quot;vscode&amp;quot;: {
            &amp;quot;extensions&amp;quot;: [
                &amp;quot;ms-vscode-remote.vscode-remote-extensionpack&amp;quot;,
                &amp;quot;ms-azuretools.vscode-docker&amp;quot;,
                &amp;quot;ms-dotnettools.csharp&amp;quot;,
                &amp;quot;Ionide.Ionide-fsharp&amp;quot;,
                &amp;quot;GitHub.copilot&amp;quot;,
                &amp;quot;GitHub.copilot-chat&amp;quot;,
                &amp;quot;saoudrizwan.claude-dev&amp;quot;,
                &amp;quot;ms-dotnettools.csdevkit&amp;quot;                                
            ]
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;.NET (GPU)&lt;/h2&gt;
&lt;pre&gt;&lt;code class="language-json"&gt;{
    &amp;quot;name&amp;quot;: &amp;quot;lqdev.me .NET (GPU) DevContainer&amp;quot;,
    &amp;quot;image&amp;quot;: &amp;quot;mcr.microsoft.com/devcontainers/base:debian&amp;quot;,
    &amp;quot;features&amp;quot;: {
        &amp;quot;ghcr.io/devcontainers/features/git:1&amp;quot;: {},
        &amp;quot;ghcr.io/devcontainers/features/docker-in-docker:2&amp;quot;: {},
        &amp;quot;ghcr.io/devcontainers/features/dotnet:2&amp;quot;: {
            &amp;quot;version&amp;quot;: &amp;quot;9.0&amp;quot;
        },
        &amp;quot;ghcr.io/devcontainers/features/nvidia-cuda:1&amp;quot;: {}
    },
    &amp;quot;customizations&amp;quot;: {
        &amp;quot;vscode&amp;quot;: {
            &amp;quot;extensions&amp;quot;: [
                &amp;quot;ms-vscode-remote.vscode-remote-extensionpack&amp;quot;,
                &amp;quot;ms-azuretools.vscode-docker&amp;quot;,
                &amp;quot;ms-dotnettools.csharp&amp;quot;,
                &amp;quot;Ionide.Ionide-fsharp&amp;quot;,
                &amp;quot;GitHub.copilot&amp;quot;,
                &amp;quot;GitHub.copilot-chat&amp;quot;,
                &amp;quot;saoudrizwan.claude-dev&amp;quot;,
                &amp;quot;ms-dotnettools.csdevkit&amp;quot;                
            ]
        }
    },
    &amp;quot;runArgs&amp;quot;: [
        &amp;quot;--gpus&amp;quot;, 
        &amp;quot;all&amp;quot;
    ]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Python and .NET&lt;/h2&gt;
&lt;pre&gt;&lt;code class="language-json"&gt;{
    &amp;quot;name&amp;quot;: &amp;quot;lqdev.me Python and .NET DevContainer&amp;quot;,
    &amp;quot;image&amp;quot;: &amp;quot;mcr.microsoft.com/devcontainers/base:debian&amp;quot;,
    &amp;quot;features&amp;quot;: {
        &amp;quot;ghcr.io/devcontainers/features/git:1&amp;quot;: {},
        &amp;quot;ghcr.io/devcontainers/features/docker-in-docker:2&amp;quot;: {},
        &amp;quot;ghcr.io/devcontainers/features/python:1&amp;quot;: {
            &amp;quot;version&amp;quot;: &amp;quot;3.11&amp;quot;
        },        
        &amp;quot;ghcr.io/devcontainers/features/dotnet:2&amp;quot;: {
            &amp;quot;version&amp;quot;: &amp;quot;9.0&amp;quot;
        },
        &amp;quot;ghcr.io/va-h/devcontainers-features/uv:1&amp;quot;: {}
    },
    &amp;quot;customizations&amp;quot;: {
        &amp;quot;vscode&amp;quot;: {
            &amp;quot;extensions&amp;quot;: [
                &amp;quot;ms-vscode-remote.vscode-remote-extensionpack&amp;quot;,
                &amp;quot;ms-azuretools.vscode-docker&amp;quot;,
                &amp;quot;ms-python.python&amp;quot;,
                &amp;quot;ms-dotnettools.csharp&amp;quot;,
                &amp;quot;Ionide.Ionide-fsharp&amp;quot;,
                &amp;quot;GitHub.copilot&amp;quot;,
                &amp;quot;GitHub.copilot-chat&amp;quot;,
                &amp;quot;saoudrizwan.claude-dev&amp;quot;,
                &amp;quot;ms-dotnettools.csdevkit&amp;quot;                
            ]
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Python and .NET (GPU)&lt;/h2&gt;
&lt;pre&gt;&lt;code class="language-json"&gt;{
    &amp;quot;name&amp;quot;: &amp;quot;lqdev.me Python and .NET (GPU) DevContainer&amp;quot;,
    &amp;quot;image&amp;quot;: &amp;quot;mcr.microsoft.com/devcontainers/base:debian&amp;quot;,
    &amp;quot;features&amp;quot;: {
        &amp;quot;ghcr.io/devcontainers/features/git:1&amp;quot;: {},
        &amp;quot;ghcr.io/devcontainers/features/docker-in-docker:2&amp;quot;: {},
        &amp;quot;ghcr.io/devcontainers/features/python:1&amp;quot;: {
            &amp;quot;version&amp;quot;: &amp;quot;3.11&amp;quot;
        },        
        &amp;quot;ghcr.io/devcontainers/features/dotnet:2&amp;quot;: {
            &amp;quot;version&amp;quot;: &amp;quot;9.0&amp;quot;
        },
        &amp;quot;ghcr.io/devcontainers/features/nvidia-cuda:1&amp;quot;: {},
        &amp;quot;ghcr.io/va-h/devcontainers-features/uv:1&amp;quot;: {}
    },
    &amp;quot;customizations&amp;quot;: {
        &amp;quot;vscode&amp;quot;: {
            &amp;quot;extensions&amp;quot;: [
                &amp;quot;ms-vscode-remote.vscode-remote-extensionpack&amp;quot;,
                &amp;quot;ms-azuretools.vscode-docker&amp;quot;,
                &amp;quot;ms-python.python&amp;quot;,
                &amp;quot;ms-dotnettools.csharp&amp;quot;,
                &amp;quot;Ionide.Ionide-fsharp&amp;quot;,
                &amp;quot;GitHub.copilot&amp;quot;,
                &amp;quot;GitHub.copilot-chat&amp;quot;,
                &amp;quot;saoudrizwan.claude-dev&amp;quot;,
                &amp;quot;ms-dotnettools.csdevkit&amp;quot;               
            ]
        }
    },
    &amp;quot;runArgs&amp;quot;: [
        &amp;quot;--gpus&amp;quot;, 
        &amp;quot;all&amp;quot;
    ]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Additional Resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://code.visualstudio.com/docs/devcontainers/containers"&gt;Developing inside a DevContainer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/devcontainers/images"&gt;Pre-built DevContainer images&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/devcontainers/features"&gt;Pre-built DevContainer features&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.github.com/en/codespaces/overview"&gt;GitHub Codespaces overview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/vscode"&gt;VS Code Extensions Marketplace&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
]]&gt;</description>
      <link>https://www.lqdev.me/resources/wiki/devcontainers-configurations</link>
      <guid>https://www.lqdev.me/resources/wiki/devcontainers-configurations</guid>
      <pubDate>06/29/2024 14:48 -05:00</pubDate>
      <category>devcontainer</category>
      <category>vscode</category>
      <category>codespaces</category>
      <category>development</category>
      <category>software</category>
      <category>tech</category>
      <category>programming</category>
      <category>python</category>
      <category>dotnet</category>
      <category>csharp</category>
      <category>fsharp</category>
      <category>docker</category>
      <category>git</category>
      <category>debian</category>
    </item>
    <item>
      <title>TIOBE Index for January 2024</title>
      <description>&lt;![CDATA[[bookmark] &lt;blockquote class="blockquote"&gt;
&lt;p&gt;For the first time in the history of the TIOBE index, C# has won the programming language of the year award. Congratulations! C# has been a top 10 player for more than 2 decades and now that it is catching up with the big 4 languages, it won the well-deserved award by being the language with the biggest uptick in one year (+1.43%).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Exciting to see F# almost break into the Top 20 at number 22 with 0.77%.&lt;/p&gt;
]]&gt;</description>
      <link>https://www.lqdev.me/bookmarks/tiobe-index-january-2024</link>
      <guid>https://www.lqdev.me/bookmarks/tiobe-index-january-2024</guid>
      <pubDate>2024-01-07 22:52 -05:00</pubDate>
      <category>programming</category>
      <category>dotnet</category>
      <category>technology</category>
      <category>fsharp</category>
      <category>csharp</category>
      <category>programminglanguages</category>
    </item>
    <item>
      <title>Computing website metrics using GitHub Actions</title>
      <description>&lt;![CDATA[
## Introduction 

I recently posted my [(We)blogging Rewind](/notes/weblogging-rewind-2023/) and [(We)blogging Rewind Continued](/notes/weblogging-rewind-2023-continued) for 2023. In these posts, I discuss some analysis I did of my posting behaviors over the past year on this website. I don't use platforms like Google Analytics to track visitors. I used to self-host a [GoatCounter](https://www.goatcounter.com/) instance but personally I don't really care about traffic so I got rid of that. There are some standard reports I get from my [CDN provider on Azure](https://learn.microsoft.com/azure/cdn/cdn-advanced-http-reports), but again I don't really care about those metrics. What I do care about though is my output and understanding what I'm publishing and the topics that were important to me at any given time. In the case of those blog posts, it was for the year 2023. Given that I had already done the analysis and had written the script, I thought, why not automate it and run it on a more regular basis to have monthly summaries. Since my blog and scripts are already on GitHub, it makes sense to create a GitHub Action workflow. In this post, I discuss in more details what my post analytics script does and how I configured my workflow in GitHub Actions to run the script on the first of every month.  

## The script

This script loads the various posts on my website and computes aggregate metrics based on post types and their metadata. You can find the full script at [stats.fsx](/resources/snippets/lqdev-me-website-post-metrics).

### Loading files

The following are convenience functions which I use as part of my website build process. 

In general these functions:

- Load the individual post files
- Parse the content and YAML metadata

```fsharp
let posts = loadPosts()
let notes = loadFeed ()
let responses = loadReponses ()
```

Instead of building new custom functions, I can repurpose them and apply additional transformations to compute aggregate statistics.

### Computing aggregate statistics

Once the posts are loaded, I apply transformations on the collections to compute aggregate metrics:

#### Annual post counts

The following are annual aggreagates of blog posts, notes, and responses. 

##### Blog posts

Takes the blog post collection, parses the published date, and computes counts by the year property. Then, it sorts them in descending order.

```fsharp
let postCountsByYear = 
    posts
    |&gt; Array.countBy (fun (x:Post) -&gt; DateTime.Parse(x.Metadata.Date) |&gt; _.Year)
    |&gt; Array.sortByDescending fst 
```

##### Notes

Takes the note collection, parses the published date, and computes counts by the year property. Then, it sorts them in descending order.

```fsharp
let noteCountsByYear = 
    notes
    |&gt; Array.countBy (fun (x:Post) -&gt; DateTime.Parse(x.Metadata.Date) |&gt; _.Year)
    |&gt; Array.sortByDescending fst
```

##### Responses

Takes the response collection, parses the published date, and computes counts by the year property. Then, it sorts them in descending order.

```fsharp
let responseCountsByYear = 
    responses
    |&gt; Array.countBy (fun (x:Response) -&gt; DateTime.Parse(x.Metadata.DatePublished) |&gt; _.Year)
    |&gt; Array.sortByDescending fst
```

#### Response counts by type

Takes the response collection, parses the published date, filters it for the current year, and computes counts by the post type (reply, bookmark, reshare, star).

```fsharp
let responsesByType = 
    responses
    |&gt; Array.filter(fun x -&gt; (DateTime.Parse(x.Metadata.DatePublished) |&gt; _.Year) = DateTime.UtcNow.Year)
    |&gt; Array.countBy(fun x -&gt; x.Metadata.ResponseType)
    |&gt; Array.sortByDescending(snd)
```

#### Tag counts (responses)

Takes the response collection, parses the published date, filters it for the current year, and computes counts by the tag name, and sorts in descending order using the count.


```fsharp
let responsesByTag = 
    responses
    |&gt; Array.filter(fun x -&gt; (DateTime.Parse(x.Metadata.DatePublished) |&gt; _.Year) = DateTime.UtcNow.Year)
    |&gt; Array.collect(fun x -&gt; 
            match x.Metadata.Tags with
            | null -&gt; [|"untagged"|]
            | [||] -&gt; [|"untagged"|]
            | _ -&gt; x.Metadata.Tags
        )
    |&gt; Array.countBy(fun x -&gt; x)
    |&gt; Array.sortByDescending(snd)
```

#### Domain counts (responses)
 
Takes the response collection, parses the published date, filters it for the current year, and computes counts by the target URL host name, and sorts it in descending order using the count.

```fsharp
let responsesByDomain = 
    responses
    |&gt; Array.filter(fun x -&gt; (DateTime.Parse(x.Metadata.DatePublished) |&gt; _.Year) = DateTime.UtcNow.Year)
    |&gt; Array.countBy(fun x -&gt; Uri(x.Metadata.TargetUrl).Host)
    |&gt; Array.sortByDescending(snd)
```

### Displaying counts

Since the `countBy` function is the one used to compute the counts, this produces a tuple. The tuple though could be `string` or `int`. Therefore, I set the collection of entry counts to use a generic `'a` for the first item in the tuple. I'm also able to control using `n` whether to display the entire collection by using `-1` as input or a limit when `n &gt;= 0`.

```fsharp
let printEntryCounts&lt;'a&gt; (title:string) (entryCounts:('a * int) array) (n:int) = 
    printfn $"{title}"

    match n with 
    | n when n = -1 -&gt; 
        entryCounts
        |&gt; Array.iter(fun x -&gt; printfn $"{fst x} {snd x}")
        |&gt; fun _ -&gt; printfn $""
    | n when n &gt;= 0 -&gt; 
        entryCounts
        |&gt; Array.take n
        |&gt; Array.iter(fun x -&gt; printfn $"{fst x} {snd x}")
        |&gt; fun _ -&gt; printfn $""
```

The result of running this script produces the following results:

```text
Blogs
2023 5
2022 7

Notes
2023 34
2022 36

Responses
2023 216
2022 146

Response Types
bookmark 151
reshare 48
reply 10
star 7

Response Tags
ai 104
llm 42
untagged 41
opensource 31
internet 17

Domains
github.com 15
huggingface.co 11
arxiv.org 10
openai.com 6
www.theverge.com 4
```

## The workflow file

The workflow file is a GitHub Actions workflow which you can find in my [website repo](https://github.com/lqdev/luisquintanilla.me/blob/main/.github/workflows/stats.yml).  

### Triggers

I don't really want the script to run every time I publish my website. Instead, I just want to have these aggregate values computed on a monthly basis. Optionally though, I'd like to be able to run ad-hoc reports and trigger this job manually.

The triggers in my workflow file look like the following:

```yaml
schedule: 
  - cron: '30 0 1 * *'
workflow_dispatch: 
```

Using cron job syntax, I use the `schedule` trigger to configure the script to run at 12:30 AM on the 1st day of every month.

The `workflow_dispatch` trigger is there so I can manually trigger this job.

## Steps

The steps in the workflow file are the following:

- Check out the repo

    ```yaml
    - uses: actions/checkout@v2
    ```


- Install the .NET 8 SDK

    ```yaml
    - name: Setup .NET SDK 8.x
      uses: actions/setup-dotnet@v1.9.0
      with: 
        dotnet-version: '8.0.x'    
    ```

- Restore dependencies

    ```yaml
    - name: Install dependencies
      run: dotnet restore    
    ```

- Build the project

    ```yaml
    - name: Build project
      run: dotnet build --no-restore  
    ```

- Run the script and display metrics

    ```yaml
    - name: Display Post Metrics
      run: dotnet fsi Scripts/stats.fsx
    ```

## Conclusion

If you have scripts that you run on a repo on a fairly regular basis, consider using GitHub Actions to automate the execution of these scripts. Happy coding! ]]&gt;</description>
      <link>https://www.lqdev.me/posts/website-metrics-github-actions</link>
      <guid>https://www.lqdev.me/posts/website-metrics-github-actions</guid>
      <pubDate>2023-12-24 13:24 -05:00</pubDate>
      <category>github</category>
      <category>cicd</category>
      <category>website</category>
      <category>blog</category>
      <category>blogging</category>
      <category>web</category>
      <category>internet</category>
      <category>fsharp</category>
      <category>dotnet</category>
    </item>
    <item>
      <title>lqdev.me Post Metrics</title>
      <description>&lt;![CDATA[&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;Generates an aggregate analysis of posts on &lt;a href="https://www.lqdev.me"&gt;lqdev.me / luisquintanilla.me&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;dotnet fsi stats.fsx 
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Snippet&lt;/h2&gt;
&lt;h3&gt;stats.fsx&lt;/h3&gt;
&lt;pre&gt;&lt;code class="language-fsharp"&gt;// Reference DLL
#r &amp;quot;../bin/Debug/net8.0/PersonalSite.dll&amp;quot;

// Add modules
open Domain
open Builder
open System

// Load posts
let posts = loadPosts()
let notes = loadFeed ()
let responses = loadReponses ()

// Organize posts by year
let postCountsByYear = 
    posts
    |&amp;gt; Array.countBy (fun (x:Post) -&amp;gt; DateTime.Parse(x.Metadata.Date) |&amp;gt; _.Year)
    |&amp;gt; Array.sortByDescending fst 

let noteCountsByYear = 
    notes
    |&amp;gt; Array.countBy (fun (x:Post) -&amp;gt; DateTime.Parse(x.Metadata.Date) |&amp;gt; _.Year)
    |&amp;gt; Array.sortByDescending fst

let responseCountsByYear = 
    responses
    |&amp;gt; Array.countBy (fun (x:Response) -&amp;gt; DateTime.Parse(x.Metadata.DatePublished) |&amp;gt; _.Year)
    |&amp;gt; Array.sortByDescending fst

// Organize responses by type
let responsesByType = 
    responses
    |&amp;gt; Array.filter(fun x -&amp;gt; (DateTime.Parse(x.Metadata.DatePublished) |&amp;gt; _.Year) = DateTime.UtcNow.Year)
    |&amp;gt; Array.countBy(fun x -&amp;gt; x.Metadata.ResponseType)
    |&amp;gt; Array.sortByDescending(snd)

// Organize responses by tag
let responsesByTag = 
    responses
    |&amp;gt; Array.filter(fun x -&amp;gt; (DateTime.Parse(x.Metadata.DatePublished) |&amp;gt; _.Year) = DateTime.UtcNow.Year)
    |&amp;gt; Array.collect(fun x -&amp;gt; 
            match x.Metadata.Tags with
            | null -&amp;gt; [|&amp;quot;untagged&amp;quot;|]
            | [||] -&amp;gt; [|&amp;quot;untagged&amp;quot;|]
            | _ -&amp;gt; x.Metadata.Tags
        )
    |&amp;gt; Array.countBy(fun x -&amp;gt; x)
    |&amp;gt; Array.sortByDescending(snd)

// Organize responses by host name (domain)
let responsesByDomain = 
    responses
    |&amp;gt; Array.filter(fun x -&amp;gt; (DateTime.Parse(x.Metadata.DatePublished) |&amp;gt; _.Year) = DateTime.UtcNow.Year)
    |&amp;gt; Array.countBy(fun x -&amp;gt; Uri(x.Metadata.TargetUrl).Host)
    |&amp;gt; Array.sortByDescending(snd)

// Utility function to display counts
let printEntryCounts&amp;lt;'a&amp;gt; (title:string) (entryCounts:('a * int) array) (n:int) = 
    printfn $&amp;quot;{title}&amp;quot;

    match entryCounts.Length with
    | 0 -&amp;gt; 
        printfn $&amp;quot;No entries&amp;quot;
        printfn $&amp;quot;&amp;quot;
    | a when a &amp;gt; 0 -&amp;gt; 
        match n with 
        | n when n = -1 || n &amp;gt; entryCounts.Length -&amp;gt; 
            entryCounts
            |&amp;gt; Array.iter(fun x -&amp;gt; printfn $&amp;quot;{fst x} {snd x}&amp;quot;)
            |&amp;gt; fun _ -&amp;gt; printfn $&amp;quot;&amp;quot;
        | n when n &amp;gt; 0 -&amp;gt; 
            entryCounts
            |&amp;gt; Array.take n
            |&amp;gt; Array.iter(fun x -&amp;gt; printfn $&amp;quot;{fst x} {snd x}&amp;quot;)
            |&amp;gt; fun _ -&amp;gt; printfn $&amp;quot;&amp;quot;

// Print yearly counts
printEntryCounts &amp;quot;Blogs&amp;quot; postCountsByYear 2

printEntryCounts &amp;quot;Notes&amp;quot; noteCountsByYear 2

printEntryCounts &amp;quot;Responses&amp;quot; responseCountsByYear 2

// Print response types
printEntryCounts &amp;quot;Response Types&amp;quot; responsesByType -1

// Print response tag counts
printEntryCounts &amp;quot;Response Tags&amp;quot; responsesByTag 5

// Print response by host name
printEntryCounts &amp;quot;Domains&amp;quot; responsesByDomain 5
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Expected Output&lt;/h2&gt;
&lt;pre&gt;&lt;code class="language-text"&gt;Blogs
2023 5
2022 7

Notes
2023 34
2022 36

Responses
2023 216
2022 146

Response Types
bookmark 151
reshare 48
reply 10
star 7

Response Tags
ai 104
llm 42
untagged 41
opensource 31
internet 17

Domains
github.com 15
huggingface.co 11
arxiv.org 10
openai.com 6
www.theverge.com 4
&lt;/code&gt;&lt;/pre&gt;
]]&gt;</description>
      <link>https://www.lqdev.me/resources/snippets/lqdev-me-website-post-metrics</link>
      <guid>https://www.lqdev.me/resources/snippets/lqdev-me-website-post-metrics</guid>
      <pubDate>12/23/2023 13:13 -05:00</pubDate>
      <category>analytics</category>
      <category>website</category>
      <category>blog</category>
      <category>blogging</category>
      <category>pkm</category>
      <category>indieweb</category>
      <category>dotnet</category>
      <category>windows</category>
      <category>linux</category>
      <category>mac</category>
    </item>
    <item>
      <title>Install .NET packages on NixOS from GitHub</title>
      <description>&lt;![CDATA[&lt;h2&gt;Overview&lt;/h2&gt;
&lt;p&gt;This guide shows how to build a .NET package from GitHub source. The project used to illustrate the process can be found on &lt;a href="https://github.com/lqdev/fitch"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Create derivation&lt;/h2&gt;
&lt;p&gt;The first thing you'll want to do is create a derivation for your package.&lt;/p&gt;
&lt;p&gt;Create a file for your package. In this case, I called mine &lt;em&gt;fitch.nix&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Since I'm building a .NET package from the GitHub source, I use &lt;code&gt;buildDotnetModule&lt;/code&gt;, &lt;code&gt;dotnetCorePackages&lt;/code&gt;, and &lt;code&gt;fetchFromGithub&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To get the rev, use the &lt;code&gt;git log&lt;/code&gt; command. It's the hash of the latest commit.&lt;/p&gt;
&lt;h2&gt;Fake SHA&lt;/h2&gt;
&lt;pre&gt;&lt;code class="language-nix"&gt;{
  fetchFromGitHub,
  buildDotnetModule,
  dotnetCorePackages
}:

buildDotnetModule {
  name = &amp;quot;fitch&amp;quot;;

  src = fetchFromGitHub {
    owner = &amp;quot;lqdev&amp;quot;;
    repo = &amp;quot;fitch&amp;quot;;
    rev = &amp;quot;e5fb91ddf57eb5611e0e313af29126e590cd149f&amp;quot;;
    sha256 = &amp;quot;&amp;quot;;
  };

  projectFile = &amp;quot;src/fitch.fsproj&amp;quot;;
  executables = &amp;quot;fitch&amp;quot;;
  dotnet-sdk = dotnetCorePackages.sdk_8_0;
  dotnet-runtime = dotnetCorePackages.runtime_8_0;
  nugetDeps = ./deps.nix;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At this point the sha256 will be empty because you'll get it later in the process.&lt;/p&gt;
&lt;h2&gt;Create default.nix&lt;/h2&gt;
&lt;pre&gt;&lt;code class="language-nix"&gt;let
  pkgs = import &amp;lt;nixpkgs&amp;gt; { };
in
{
  fitch = pkgs.callPackage ./fitch.nix { };
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Fetch dependencies&lt;/h2&gt;
&lt;p&gt;Create a file called &lt;code&gt;deps.nix&lt;/code&gt;. This will contain the dependencies you need for your application.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;touch deps.nix
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then, run &lt;code&gt;nix-build -A fitch.fetch-deps&lt;/code&gt;. This should fail because of the empty SHA.&lt;/p&gt;
&lt;h2&gt;Update SHA&lt;/h2&gt;
&lt;p&gt;The empty SHA will fail. However, the error message will contain the actual SHA value. Copy that and paste it into the sha256 property.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-nix"&gt;{
  lib    
  fetchFromGitHub,
  buildDotnetModule,
  dotnetCorePackages
}:

buildDotnetModule {
  name = &amp;quot;fitch&amp;quot;;

  src = fetchFromGitHub {
    owner = &amp;quot;lqdev&amp;quot;;
    repo = &amp;quot;fitch&amp;quot;;
    rev = &amp;quot;e5fb91ddf57eb5611e0e313af29126e590cd149f&amp;quot;;
    sha256 = &amp;quot;74xddAUGQNVliVs5o3zQQEAUAoF9r8iBmiiBr4qrUgw=&amp;quot;;
  };

  projectFile = &amp;quot;src/fitch.fsproj&amp;quot;;
  executables = &amp;quot;fitch&amp;quot;;
  dotnet-sdk = dotnetCorePackages.sdk_7_0;
  dotnet-runtime = dotnetCorePackages.runtime_7_0;
  nugetDeps = ./deps.nix;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Get dependencies&lt;/h2&gt;
&lt;p&gt;Now that you have the correct SHA, try getting the dependencies again. These dependencies are created in a series of steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Run the following command &lt;code&gt;sudo nix-build -A fitch.fetch-deps&lt;/code&gt;. The result of this command is an executable script called &lt;em&gt;result&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Run the &lt;em&gt;result&lt;/em&gt; script. &lt;code&gt;sudo ./result deps.nix&lt;/code&gt;. This will generate the lockfile called &lt;em&gt;deps.nix&lt;/em&gt; and is referenced by the &lt;code&gt;nugetDeps&lt;/code&gt; property.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Build package&lt;/h2&gt;
&lt;p&gt;Once everything is set up, run &lt;code&gt;nix-build -A fitch&lt;/code&gt;. This will package and install the package onto your system.&lt;/p&gt;
&lt;h2&gt;Add to configuration&lt;/h2&gt;
&lt;p&gt;To add the newly built package to your &lt;em&gt;configuration.nix&lt;/em&gt;, add it to your packages:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-nix"&gt;environment.systemPackages = with pkgs; [
    #...
    (callPackage ./fitch.nix {})
    #...
];
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then, run &lt;code&gt;nixos-rebuild switch&lt;/code&gt;. This should now install the package onto your PC.&lt;/p&gt;
&lt;h2&gt;(Optional) Initialize when shell starts&lt;/h2&gt;
&lt;p&gt;In my case, since I want fitch to run when the terminal starts, I edit my bash configuration in the &lt;em&gt;configuration.nix&lt;/em&gt; file.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-nix"&gt;programs.bash = {
    interactiveShellInit = &amp;quot;fitch&amp;quot;;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Sources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://ryantm.github.io/nixpkgs/languages-frameworks/dotnet/"&gt;Dotnet Nixpkgs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wuffs.org/blog/joining-the-nixos-pyramid-scheme"&gt;Joining the NixOS Pyramid Scheme&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nix.dev/tutorials/learning-journey/packaging-existing-software"&gt;Packaging existing software with Nix&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
]]&gt;</description>
      <link>https://www.lqdev.me/resources/wiki/nixos-dotnet-packages-source</link>
      <guid>https://www.lqdev.me/resources/wiki/nixos-dotnet-packages-source</guid>
      <pubDate>12/17/2023 17:56 -05:00</pubDate>
      <category>dotnet</category>
      <category>nixos</category>
      <category>linux</category>
      <category>sysadmin</category>
      <category></category>
    </item>
    <item>
      <title>Website upgraded to .NET 8</title>
      <description>&lt;![CDATA[&lt;p&gt;Obligatory yearly website update post. When I built this website, I started on .NET 5. 3 years later and although my code has changed to add new features, I haven't had to make any code changes to account for a new version of .NET. I love that I can get all the benefits of the new version without having to do any rewrites.&lt;/p&gt;
&lt;p&gt;&lt;img src="http://cdn.lqdev.tech/files/images/upgrade-dotnet-8.png" class="img-fluid" alt="GitHub PR showing upgrade to .NET 8" /&gt;&lt;/p&gt;
]]&gt;</description>
      <link>https://www.lqdev.me/notes/net8-website-update</link>
      <guid>https://www.lqdev.me/notes/net8-website-update</guid>
      <pubDate>2023-11-16 01:27 -05:00</pubDate>
      <category>dotnet</category>
      <category>indieweb</category>
    </item>
  </channel>
</rss>