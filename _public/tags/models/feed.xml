<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>Luis Quintanilla - models</title>
    <link>https://www.lqdev.me/tags/models</link>
    <description>All content tagged with 'models' by Luis Quintanilla</description>
    <lastBuildDate>2024-03-21 20:44 -05:00</lastBuildDate>
    <language>en</language>
    <item>
      <title>Mamba: Linear-Time Sequence Modeling with Selective State Spaces</title>
      <description>&lt;![CDATA[[reshare] &lt;blockquote class="blockquote"&gt;
&lt;p&gt;Foundation models, now powering most of the exciting applications in deep learning, are almost universally based on the Transformer architecture and its core attention module. Many subquadratic-time architectures such as linear attention, gated convolution and recurrent models, and structured state space models (SSMs) have been developed to address Transformers' computational inefficiency on long sequences, but they have not performed as well as attention on important modalities such as language. We identify that a key weakness of such models is their inability to perform content-based reasoning, and make several improvements. First, simply letting the SSM parameters be functions of the input addresses their weakness with discrete modalities, allowing the model to selectively propagate or forget information along the sequence length dimension depending on the current token. Second, even though this change prevents the use of efficient convolutions, we design a hardware-aware parallel algorithm in recurrent mode. We integrate these selective SSMs into a simplified end-to-end neural network architecture without attention or even MLP blocks (Mamba). Mamba enjoys fast inference (5Ã— higher throughput than Transformers) and linear scaling in sequence length, and its performance improves on real data up to million-length sequences. As a general sequence model backbone, Mamba achieves state-of-the-art performance across several modalities such as language, audio, and genomics. On language modeling, our Mamba-3B model outperforms Transformers of the same size and matches Transformers twice its size, both in pretraining and downstream evaluation.&lt;/p&gt;
&lt;/blockquote&gt;
]]&gt;</description>
      <link>https://www.lqdev.me/responses/mamba-linear-time-sequence-selective-state-spaces</link>
      <guid>https://www.lqdev.me/responses/mamba-linear-time-sequence-selective-state-spaces</guid>
      <pubDate>2024-03-21 20:44 -05:00</pubDate>
      <category>ai</category>
      <category>models</category>
      <category>mamba</category>
      <category>llm</category>
      <category>compute</category>
    </item>
    <item>
      <title>Diffusion Models From Scratch</title>
      <description>&lt;![CDATA[[bookmark] &lt;blockquote class="blockquote"&gt;
&lt;p&gt;Here, we'll cover the derivations from scratch to provide a rigorous understanding of the core ideas behind diffusion. What assumptions are we making? What properties arise as a result?&lt;br /&gt;
&lt;br&gt;
A reference [codebase] is written from scratch, which provides minimalist re-production of the MNIST example below. It clocks in at under 500 lines of code.&lt;br /&gt;
&lt;br&gt;
Each page takes up to an hour to read thoroughly. Approximately a lecture each.&lt;/p&gt;
&lt;/blockquote&gt;
]]&gt;</description>
      <link>https://www.lqdev.me/bookmarks/diffusion-models-from-scratch-duan</link>
      <guid>https://www.lqdev.me/bookmarks/diffusion-models-from-scratch-duan</guid>
      <pubDate>2024-03-17 21:03 -05:00</pubDate>
      <category>diffusion</category>
      <category>ai</category>
      <category>concepts</category>
      <category>models</category>
    </item>
    <item>
      <title>Diffusion models from scratch, from a new theoretical perspective</title>
      <description>&lt;![CDATA[[bookmark] &lt;blockquote class="blockquote"&gt;
&lt;p&gt;This tutorial aims to introduce diffusion models from an optimization perspective as introduced in our paper (joint work with Frank Permenter). It will go over both theory and code, using the theory to explain how to implement diffusion models from scratch. By the end of the tutorial, you will learn how to implement training and sampling code for a toy dataset, which will also work for larger datasets and models.&lt;/p&gt;
&lt;/blockquote&gt;
]]&gt;</description>
      <link>https://www.lqdev.me/bookmarks/diffusion-models-from-scratch-yuan</link>
      <guid>https://www.lqdev.me/bookmarks/diffusion-models-from-scratch-yuan</guid>
      <pubDate>2024-03-17 21:02 -05:00</pubDate>
      <category>diffusion</category>
      <category>ai</category>
      <category>concepts</category>
      <category>models</category>
    </item>
  </channel>
</rss>