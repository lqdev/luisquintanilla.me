<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>Luis Quintanilla - </title>
    <link>https://www.lqdev.me/tags/</link>
    <description>All content tagged with '' by Luis Quintanilla</description>
    <lastBuildDate>12/17/2023 17:56 -05:00</lastBuildDate>
    <language>en</language>
    <item>
      <title>Install .NET packages on NixOS from GitHub</title>
      <description>&lt;![CDATA[&lt;h2&gt;Overview&lt;/h2&gt;
&lt;p&gt;This guide shows how to build a .NET package from GitHub source. The project used to illustrate the process can be found on &lt;a href="https://github.com/lqdev/fitch"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Create derivation&lt;/h2&gt;
&lt;p&gt;The first thing you'll want to do is create a derivation for your package.&lt;/p&gt;
&lt;p&gt;Create a file for your package. In this case, I called mine &lt;em&gt;fitch.nix&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Since I'm building a .NET package from the GitHub source, I use &lt;code&gt;buildDotnetModule&lt;/code&gt;, &lt;code&gt;dotnetCorePackages&lt;/code&gt;, and &lt;code&gt;fetchFromGithub&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To get the rev, use the &lt;code&gt;git log&lt;/code&gt; command. It's the hash of the latest commit.&lt;/p&gt;
&lt;h2&gt;Fake SHA&lt;/h2&gt;
&lt;pre&gt;&lt;code class="language-nix"&gt;{
  fetchFromGitHub,
  buildDotnetModule,
  dotnetCorePackages
}:

buildDotnetModule {
  name = &amp;quot;fitch&amp;quot;;

  src = fetchFromGitHub {
    owner = &amp;quot;lqdev&amp;quot;;
    repo = &amp;quot;fitch&amp;quot;;
    rev = &amp;quot;e5fb91ddf57eb5611e0e313af29126e590cd149f&amp;quot;;
    sha256 = &amp;quot;&amp;quot;;
  };

  projectFile = &amp;quot;src/fitch.fsproj&amp;quot;;
  executables = &amp;quot;fitch&amp;quot;;
  dotnet-sdk = dotnetCorePackages.sdk_8_0;
  dotnet-runtime = dotnetCorePackages.runtime_8_0;
  nugetDeps = ./deps.nix;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At this point the sha256 will be empty because you'll get it later in the process.&lt;/p&gt;
&lt;h2&gt;Create default.nix&lt;/h2&gt;
&lt;pre&gt;&lt;code class="language-nix"&gt;let
  pkgs = import &amp;lt;nixpkgs&amp;gt; { };
in
{
  fitch = pkgs.callPackage ./fitch.nix { };
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Fetch dependencies&lt;/h2&gt;
&lt;p&gt;Create a file called &lt;code&gt;deps.nix&lt;/code&gt;. This will contain the dependencies you need for your application.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;touch deps.nix
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then, run &lt;code&gt;nix-build -A fitch.fetch-deps&lt;/code&gt;. This should fail because of the empty SHA.&lt;/p&gt;
&lt;h2&gt;Update SHA&lt;/h2&gt;
&lt;p&gt;The empty SHA will fail. However, the error message will contain the actual SHA value. Copy that and paste it into the sha256 property.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-nix"&gt;{
  lib    
  fetchFromGitHub,
  buildDotnetModule,
  dotnetCorePackages
}:

buildDotnetModule {
  name = &amp;quot;fitch&amp;quot;;

  src = fetchFromGitHub {
    owner = &amp;quot;lqdev&amp;quot;;
    repo = &amp;quot;fitch&amp;quot;;
    rev = &amp;quot;e5fb91ddf57eb5611e0e313af29126e590cd149f&amp;quot;;
    sha256 = &amp;quot;74xddAUGQNVliVs5o3zQQEAUAoF9r8iBmiiBr4qrUgw=&amp;quot;;
  };

  projectFile = &amp;quot;src/fitch.fsproj&amp;quot;;
  executables = &amp;quot;fitch&amp;quot;;
  dotnet-sdk = dotnetCorePackages.sdk_7_0;
  dotnet-runtime = dotnetCorePackages.runtime_7_0;
  nugetDeps = ./deps.nix;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Get dependencies&lt;/h2&gt;
&lt;p&gt;Now that you have the correct SHA, try getting the dependencies again. These dependencies are created in a series of steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Run the following command &lt;code&gt;sudo nix-build -A fitch.fetch-deps&lt;/code&gt;. The result of this command is an executable script called &lt;em&gt;result&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Run the &lt;em&gt;result&lt;/em&gt; script. &lt;code&gt;sudo ./result deps.nix&lt;/code&gt;. This will generate the lockfile called &lt;em&gt;deps.nix&lt;/em&gt; and is referenced by the &lt;code&gt;nugetDeps&lt;/code&gt; property.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Build package&lt;/h2&gt;
&lt;p&gt;Once everything is set up, run &lt;code&gt;nix-build -A fitch&lt;/code&gt;. This will package and install the package onto your system.&lt;/p&gt;
&lt;h2&gt;Add to configuration&lt;/h2&gt;
&lt;p&gt;To add the newly built package to your &lt;em&gt;configuration.nix&lt;/em&gt;, add it to your packages:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-nix"&gt;environment.systemPackages = with pkgs; [
    #...
    (callPackage ./fitch.nix {})
    #...
];
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then, run &lt;code&gt;nixos-rebuild switch&lt;/code&gt;. This should now install the package onto your PC.&lt;/p&gt;
&lt;h2&gt;(Optional) Initialize when shell starts&lt;/h2&gt;
&lt;p&gt;In my case, since I want fitch to run when the terminal starts, I edit my bash configuration in the &lt;em&gt;configuration.nix&lt;/em&gt; file.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-nix"&gt;programs.bash = {
    interactiveShellInit = &amp;quot;fitch&amp;quot;;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Sources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://ryantm.github.io/nixpkgs/languages-frameworks/dotnet/"&gt;Dotnet Nixpkgs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wuffs.org/blog/joining-the-nixos-pyramid-scheme"&gt;Joining the NixOS Pyramid Scheme&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nix.dev/tutorials/learning-journey/packaging-existing-software"&gt;Packaging existing software with Nix&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
]]&gt;</description>
      <link>https://www.lqdev.me/resources/wiki/nixos-dotnet-packages-source</link>
      <guid>https://www.lqdev.me/resources/wiki/nixos-dotnet-packages-source</guid>
      <pubDate>12/17/2023 17:56 -05:00</pubDate>
      <category>dotnet</category>
      <category>nixos</category>
      <category>linux</category>
      <category>sysadmin</category>
      <category></category>
    </item>
  </channel>
</rss>