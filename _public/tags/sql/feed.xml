<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>Luis Quintanilla - sql</title>
    <link>https://www.lqdev.me/tags/sql</link>
    <description>All content tagged with 'sql' by Luis Quintanilla</description>
    <lastBuildDate>2024-04-10 21:59 -05:00</lastBuildDate>
    <language>en</language>
    <item>
      <title>Using LLM to select the right SQL Query from candidates</title>
      <description>&lt;![CDATA[[bookmark] &lt;blockquote class="blockquote"&gt;
&lt;p&gt;Text-to-SQL models can generate a list of candidate SQL queries, and the best query is often in the candidate list, but not at the top of the list. An effective re-rank method can select the right SQL query from the candidate list and improve the model's performance. Previous studies on code generation automatically generate test cases and use them to re-rank candidate codes. However, automatic test case generation for text-to-SQL is an understudied field. We propose an automatic test case generation method that first generates a database and then uses LLMs to predict the ground truth, which is the expected execution results of the ground truth SQL query on this database. To reduce the difficulty for LLMs to predict, we conduct experiments to search for ways to generate easy databases for LLMs and design easy-to-understand prompts. Based on our test case generation method, we propose a re-rank method to select the right SQL query from the candidate list. Given a candidate list, our method can generate test cases and re-rank the candidate list according to their pass numbers on these test cases and their generation probabilities. The experiment results on the validation dataset of Spider show that the performance of some state-of-the-art models can get a 3.6% improvement after applying our re-rank method.&lt;/p&gt;
&lt;/blockquote&gt;
]]&gt;</description>
      <link>https://www.lqdev.me/bookmarks/llm-text-to-sql-right-candidates</link>
      <guid>https://www.lqdev.me/bookmarks/llm-text-to-sql-right-candidates</guid>
      <pubDate>2024-04-10 21:59 -05:00</pubDate>
      <category>ai</category>
      <category>research</category>
      <category>sql</category>
      <category>llm</category>
    </item>
    <item>
      <title>GPT in 500 lines of SQL</title>
      <description>&lt;![CDATA[[reshare] &lt;p&gt;&lt;a href="https://github.com/quassnoi/explain-extended-2024"&gt;GitHub Repo&lt;/a&gt;&lt;/p&gt;
]]&gt;</description>
      <link>https://www.lqdev.me/responses/gpt-500-lines-sql</link>
      <guid>https://www.lqdev.me/responses/gpt-500-lines-sql</guid>
      <pubDate>2024-02-24 12:06 -05:00</pubDate>
      <category>sql</category>
      <category>gpt</category>
      <category>ai</category>
      <category>llm</category>
    </item>
    <item>
      <title>SQL for Data Scientists in 100 Queries</title>
      <description>&lt;![CDATA[[bookmark] &lt;blockquote class="blockquote"&gt;
&lt;p&gt;notes and working examples that instructors can use to perform a lesson&lt;/p&gt;
&lt;/blockquote&gt;
]]&gt;</description>
      <link>https://www.lqdev.me/bookmarks/sql-for-data-scientists-100-queries</link>
      <guid>https://www.lqdev.me/bookmarks/sql-for-data-scientists-100-queries</guid>
      <pubDate>2024-02-06 20:07 -05:00</pubDate>
      <category>sql</category>
      <category>datascience</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Matrix Synapse Server Administration</title>
      <description>&lt;![CDATA[&lt;h2&gt;Overview&lt;/h2&gt;
&lt;p&gt;The following is a guide for managing &lt;a href="https://github.com/matrix-org/synapse"&gt;Matrix Synapse&lt;/a&gt; servers.&lt;/p&gt;
&lt;h2&gt;Upgrade&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Initialize Python virtual environment&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;source env/bin/activate
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Stop server&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;synctl stop
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Upgrade Synapse package&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;pip install --upgrade matrix-synapse[postgres]
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Restart server&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;synctl restart
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Deactivate Python virtual environment&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;deactivate
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Check version&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;curl http://localhost:8008/_synapse/admin/v1/server_version
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Clean up storage&lt;/h2&gt;
&lt;h3&gt;Delete old media&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Run the following command to clean local meadia older than 30 days.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;curl -X POST -H &amp;quot;Authorization: Bearer access_token&amp;quot; http://localhost:8008/_synapse/admin/v1/media/delete?before_ts=$(date +%s000 --date &amp;quot;30 days ago&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Start PSQL&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;psql
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Connect to database&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-sql"&gt;\c synapse
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Clean up unreferenced itemes&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;VACUUM FULL;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Delete items in database&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Start PSQL&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;psql
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Connect to database&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-sql"&gt;\c synapse
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Run the following SQL script&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-sql"&gt;DROP FUNCTION IF EXISTS synapse_clean_redacted_messages();
CREATE FUNCTION synapse_clean_redacted_messages()
    RETURNS void AS $$
    DECLARE
    BEGIN
        UPDATE events SET content = '{}' FROM redactions AS rdc
            WHERE events.event_id = rdc.redacts
            AND (events.type = 'm.room.encrypted' OR events.type = 'm.room.message');
    END;
$$ LANGUAGE 'plpgsql';

DROP FUNCTION IF EXISTS synapse_get_server_name();
CREATE FUNCTION synapse_get_server_name()
    RETURNS text AS $$
    DECLARE
        _someUser TEXT;
        _serverName TEXT;
    BEGIN
        select user_id from account_data limit 1 INTO _someUser;
        select regexp_replace(_someUser, '^.*:', ':') INTO _serverName;
        RETURN _serverName;
    END;
$$ LANGUAGE 'plpgsql';

DROP FUNCTION IF EXISTS synapse_get_unused_rooms();
CREATE FUNCTION synapse_get_unused_rooms()
    RETURNS TABLE(room_id TEXT) AS $$
    DECLARE
    BEGIN
        RETURN QUERY SELECT r.room_id FROM rooms AS r WHERE r.room_id NOT IN (
            SELECT DISTINCT(m.room_id) FROM room_memberships as m
                INNER JOIN current_state_events as c
                ON m.event_id = c.event_id
                AND m.room_id = c.room_id
                AND m.user_id = c.state_key
                WHERE c.type = 'm.room.member'
                AND m.membership = 'join'
                AND m.user_id LIKE concat('%', synapse_get_server_name())
        );
    END;
$$ LANGUAGE 'plpgsql';

DROP FUNCTION IF EXISTS synapse_clean_unused_rooms();
CREATE FUNCTION synapse_clean_unused_rooms()
    RETURNS void AS $$
    DECLARE
        _count INT;
    BEGIN
        CREATE TEMP TABLE synapse_clean_unused_rooms__tmp
            ON COMMIT DROP
            AS SELECT room_id FROM synapse_get_unused_rooms();

        SELECT COUNT(*) FROM synapse_clean_unused_rooms__tmp INTO _count;
        RAISE NOTICE 'synapse_clean_unused_rooms() Cleaning up % unused rooms', _count;

        DELETE FROM event_forward_extremities AS x WHERE x.room_id IN (SELECT y.room_id FROM synapse_clean_unused_rooms__tmp AS y);
        RAISE NOTICE 'DONE: event_forward_extremities';

        DELETE FROM event_backward_extremities AS x WHERE x.room_id IN (SELECT y.room_id FROM synapse_clean_unused_rooms__tmp AS y);
        RAISE NOTICE 'DONE: event_backward_extremities';

        DELETE FROM event_edges AS x WHERE x.room_id IN (SELECT y.room_id FROM synapse_clean_unused_rooms__tmp AS y);
        RAISE NOTICE 'DONE: event_edges';

        DELETE FROM room_depth AS x WHERE x.room_id IN (SELECT y.room_id FROM synapse_clean_unused_rooms__tmp AS y);
        RAISE NOTICE 'DONE: room_depth';

        DELETE FROM events AS x WHERE x.room_id IN (SELECT y.room_id FROM synapse_clean_unused_rooms__tmp AS y);
        RAISE NOTICE 'DONE: events';

        DELETE FROM event_json AS x WHERE x.room_id IN (SELECT y.room_id FROM synapse_clean_unused_rooms__tmp AS y);
        RAISE NOTICE 'DONE: event_json';

        DELETE FROM state_events AS x WHERE x.room_id IN (SELECT y.room_id FROM synapse_clean_unused_rooms__tmp AS y);
        RAISE NOTICE 'DONE: state_events';

        DELETE FROM current_state_events AS x WHERE x.room_id IN (SELECT y.room_id FROM synapse_clean_unused_rooms__tmp AS y);
        RAISE NOTICE 'DONE: current_state_events';

        DELETE FROM room_memberships AS x WHERE x.room_id IN (SELECT y.room_id FROM synapse_clean_unused_rooms__tmp AS y);
        RAISE NOTICE 'DONE: room_memberships';

        DELETE FROM destination_rooms AS x WHERE x.room_id IN (SELECT y.room_id FROM synapse_clean_unused_rooms__tmp AS y);
        RAISE NOTICE 'DONE: destination_rooms';

        DELETE FROM event_failed_pull_attempts AS x WHERE x.room_id IN (SELECT y.room_id FROM synapse_clean_unused_rooms__tmp AS y);
        RAISE NOTICE 'DONE: event_failed_pull_attempts';

        DELETE FROM rooms AS x WHERE x.room_id IN (SELECT y.room_id FROM synapse_clean_unused_rooms__tmp AS y);
        RAISE NOTICE 'DONE: rooms';

        DELETE FROM room_aliases AS x WHERE x.room_id IN (SELECT y.room_id FROM synapse_clean_unused_rooms__tmp AS y);
        RAISE NOTICE 'DONE: room_aliases';

        DELETE FROM state_groups AS x WHERE x.room_id IN (SELECT y.room_id FROM synapse_clean_unused_rooms__tmp AS y);
        RAISE NOTICE 'DONE: state_groups';

        DELETE FROM state_groups_state AS x WHERE x.room_id IN (SELECT y.room_id FROM synapse_clean_unused_rooms__tmp AS y);
        RAISE NOTICE 'DONE: state_groups_state';

        DELETE FROM receipts_graph AS x WHERE x.room_id IN (SELECT y.room_id FROM synapse_clean_unused_rooms__tmp AS y);
        RAISE NOTICE 'DONE: receipts_graph';

        DELETE FROM receipts_linearized AS x WHERE x.room_id IN (SELECT y.room_id FROM synapse_clean_unused_rooms__tmp AS y);
        RAISE NOTICE 'DONE: receipts_linearized';

        DELETE FROM room_tags AS x WHERE x.room_id IN (SELECT y.room_id FROM synapse_clean_unused_rooms__tmp AS y);
        RAISE NOTICE 'DONE: room_tags';

        DELETE FROM room_tags_revisions AS x WHERE x.room_id IN (SELECT y.room_id FROM synapse_clean_unused_rooms__tmp AS y);
        RAISE NOTICE 'DONE: room_tags_revisions';

        DELETE FROM room_account_data AS x WHERE x.room_id IN (SELECT y.room_id FROM synapse_clean_unused_rooms__tmp AS y);
        RAISE NOTICE 'DONE: room_account_data';

        DELETE FROM event_push_actions AS x WHERE x.room_id IN (SELECT y.room_id FROM synapse_clean_unused_rooms__tmp AS y);
        RAISE NOTICE 'DONE: event_push_actions';

        DELETE FROM pusher_throttle AS x WHERE x.room_id IN (SELECT y.room_id FROM synapse_clean_unused_rooms__tmp AS y);
        RAISE NOTICE 'DONE: pusher_throttle';

        DELETE FROM event_reports AS x WHERE x.room_id IN (SELECT y.room_id FROM synapse_clean_unused_rooms__tmp AS y);
        RAISE NOTICE 'DONE: event_reports';

        DELETE FROM stream_ordering_to_exterm AS x WHERE x.room_id IN (SELECT y.room_id FROM synapse_clean_unused_rooms__tmp AS y);
        RAISE NOTICE 'DONE: stream_ordering_to_exterm';

        DELETE FROM event_auth AS x WHERE x.room_id IN (SELECT y.room_id FROM synapse_clean_unused_rooms__tmp AS y);
        RAISE NOTICE 'DONE: event_auth';

        DELETE FROM appservice_room_list AS x WHERE x.room_id IN (SELECT y.room_id FROM synapse_clean_unused_rooms__tmp AS y);
        RAISE NOTICE 'DONE: appservice_room_list';
    END;
$$ LANGUAGE 'plpgsql';

SELECT synapse_clean_redacted_messages();
SELECT synapse_clean_unused_rooms();
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Clean up unreferenced tuples&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-sql"&gt;VACUUM FULL;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://matrix-org.github.io/synapse/latest/welcome_and_overview.html"&gt;Matrix Synapse Docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://matrix-org.github.io/synapse/latest/upgrade.html"&gt;Upgrading Synapse&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://matrix-org.github.io/synapse/v1.38/admin_api/media_admin_api.html"&gt;Admin Media API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/xwiki-labs/synapse_scripts"&gt;Synapse Scripts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
]]&gt;</description>
      <link>https://www.lqdev.me/resources/wiki/matrix-synapse-admin</link>
      <guid>https://www.lqdev.me/resources/wiki/matrix-synapse-admin</guid>
      <pubDate>06/11/2023 21:13 -05:00</pubDate>
      <category>messaging</category>
      <category>how-to</category>
      <category>matrix</category>
      <category>self-host</category>
      <category>synapse</category>
      <category>sql</category>
      <category>python</category>
    </item>
  </channel>
</rss>