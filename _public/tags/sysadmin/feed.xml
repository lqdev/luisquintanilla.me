<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>Luis Quintanilla - sysadmin</title>
    <link>https://www.lqdev.me/tags/sysadmin</link>
    <description>All content tagged with 'sysadmin' by Luis Quintanilla</description>
    <lastBuildDate>2024-11-18 17:34 -05:00</lastBuildDate>
    <language>en</language>
    <item>
      <title>Mastodon instance working again</title>
      <description>&lt;![CDATA[&lt;p&gt;After about a month of not being able to access my Mastodon instance, I'm so excited to have it working again!&lt;/p&gt;
&lt;p&gt;Not sure what I did wrong with my upgrade to 4.3.0. Fortunately, the issues appears to have been on the frontend and the fix wasn't too involved.&lt;/p&gt;
&lt;p&gt;Upgrading to the latest 4.3.1 fixed the issue I ran into during my last upgrade.&lt;/p&gt;
&lt;p&gt;Thanks to my &lt;a href="https://www.lqdev.me/posts/rss-to-mastodon-posse-azure-logic-apps/"&gt;POSSE setup&lt;/a&gt;, I've been able to continue posting to my website and syndicating to Mastodon. Unfortunately, since the frontend wasn't working, I was unable to access my notifications. Because the mobile apps make use of the web frontend to log in, I couldn't use the mobile app either.&lt;/p&gt;
]]&gt;</description>
      <link>https://www.lqdev.me/notes/mastodon-working-again-v-4-3-1</link>
      <guid>https://www.lqdev.me/notes/mastodon-working-again-v-4-3-1</guid>
      <pubDate>2024-11-18 17:34 -05:00</pubDate>
      <category>mastodon</category>
      <category>fediverse</category>
      <category>sysadmin</category>
      <category>selfhost</category>
      <category>socialmedia</category>
      <category>social</category>
      <category>microblog</category>
      <category>indieweb</category>
      <category>posse</category>
    </item>
    <item>
      <title>Upgrade NixOS versions</title>
      <description>&lt;![CDATA[&lt;h2&gt;Overview&lt;/h2&gt;
&lt;p&gt;This guide provides general guidance on upgrading between NixOS versions&lt;/p&gt;
&lt;h2&gt;Check which version you're currently running&lt;/h2&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;cat /etc/lsb_release
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Get list of channels&lt;/h2&gt;
&lt;p&gt;This provides the URL used to download packages for nixos release&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;nix-channel --list | grep nixos
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Add / Replace Software Channel&lt;/h2&gt;
&lt;p&gt;To get on the latest version, you need to update the &lt;code&gt;nixos&lt;/code&gt; channel to the latest version.&lt;/p&gt;
&lt;p&gt;You can find a list of versions in this &lt;a href="https://channels.nixos.org/"&gt;repository&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For example, if you wanted to upgrade to the latest 24.05 version, you'd use the following command:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;nix-channel --add https://channels.nixos.org/nixos-24.05 nixos
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The general format is: &lt;code&gt;nix-channel --add &amp;lt;CHANNEL_URL&amp;gt; nixos&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;Rebuild your system&lt;/h2&gt;
&lt;p&gt;Once you've configured the channel for the latest version, switch to it just like you would when upgading sofware packages.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;nixos-rebuild switch --upgrade
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the operation completes, you'll want to check which version is running as mentioned in previous instructions.&lt;/p&gt;
&lt;h2&gt;Additional Resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://nlewo.github.io/nixos-manual-sphinx/installation/upgrading.xml.html"&gt;Upgrading Nix OS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
]]&gt;</description>
      <link>https://www.lqdev.me/resources/wiki/nix-upgrade-versions</link>
      <guid>https://www.lqdev.me/resources/wiki/nix-upgrade-versions</guid>
      <pubDate>2024-07-14 14:49 -05:00</pubDate>
      <category>linux</category>
      <category>sysadmin</category>
      <category>nixos</category>
      <category>nix</category>
      <category>os</category>
    </item>
    <item>
      <title>Mastodon Server Cleanup</title>
      <description>&lt;![CDATA[&lt;h2&gt;Overview&lt;/h2&gt;
&lt;p&gt;General commands for cleaning up resources on Mastodon servers&lt;/p&gt;
&lt;h2&gt;Setup&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Stop services&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;sudo systemctl stop mastodon-sidekiq mastodon-streaming mastodon-web
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Restart postgresql&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;sudo systemctl restart postgresql
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Log into mastodon user&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;sudo su - mastodon
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Go to &lt;code&gt;live&lt;/code&gt; directory&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;cd /home/mastodon/live
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Check media usage&lt;/h2&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;RAILS_ENV=production ./bin/tootctl media usage
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Remove media&lt;/h2&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;RAILS_ENV=production ./bin/tootctl media remove
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Remove media headers&lt;/h2&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;RAILS_ENV=production ./bin/tootctl media remove --prune-profiles
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Remove preview cards&lt;/h2&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;RAILS_ENV=production ./bin/tootctl preview_cards remove
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Restart services&lt;/h2&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;sudo systemctl restart mastodon-sidekiq mastodon-streaming mastodon-web
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.joinmastodon.org/admin/tootctl/"&gt;Using the Admin CLI&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
]]&gt;</description>
      <link>https://www.lqdev.me/resources/wiki/mastodon-server-cleanup</link>
      <guid>https://www.lqdev.me/resources/wiki/mastodon-server-cleanup</guid>
      <pubDate>07/14/2024 03:24 -05:00</pubDate>
      <category>mastodon</category>
      <category>linux</category>
      <category>socialmedia</category>
      <category>sysadmin</category>
    </item>
    <item>
      <title>Install .NET packages on NixOS from GitHub</title>
      <description>&lt;![CDATA[&lt;h2&gt;Overview&lt;/h2&gt;
&lt;p&gt;This guide shows how to build a .NET package from GitHub source. The project used to illustrate the process can be found on &lt;a href="https://github.com/lqdev/fitch"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Create derivation&lt;/h2&gt;
&lt;p&gt;The first thing you'll want to do is create a derivation for your package.&lt;/p&gt;
&lt;p&gt;Create a file for your package. In this case, I called mine &lt;em&gt;fitch.nix&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Since I'm building a .NET package from the GitHub source, I use &lt;code&gt;buildDotnetModule&lt;/code&gt;, &lt;code&gt;dotnetCorePackages&lt;/code&gt;, and &lt;code&gt;fetchFromGithub&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To get the rev, use the &lt;code&gt;git log&lt;/code&gt; command. It's the hash of the latest commit.&lt;/p&gt;
&lt;h2&gt;Fake SHA&lt;/h2&gt;
&lt;pre&gt;&lt;code class="language-nix"&gt;{
  fetchFromGitHub,
  buildDotnetModule,
  dotnetCorePackages
}:

buildDotnetModule {
  name = &amp;quot;fitch&amp;quot;;

  src = fetchFromGitHub {
    owner = &amp;quot;lqdev&amp;quot;;
    repo = &amp;quot;fitch&amp;quot;;
    rev = &amp;quot;e5fb91ddf57eb5611e0e313af29126e590cd149f&amp;quot;;
    sha256 = &amp;quot;&amp;quot;;
  };

  projectFile = &amp;quot;src/fitch.fsproj&amp;quot;;
  executables = &amp;quot;fitch&amp;quot;;
  dotnet-sdk = dotnetCorePackages.sdk_8_0;
  dotnet-runtime = dotnetCorePackages.runtime_8_0;
  nugetDeps = ./deps.nix;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At this point the sha256 will be empty because you'll get it later in the process.&lt;/p&gt;
&lt;h2&gt;Create default.nix&lt;/h2&gt;
&lt;pre&gt;&lt;code class="language-nix"&gt;let
  pkgs = import &amp;lt;nixpkgs&amp;gt; { };
in
{
  fitch = pkgs.callPackage ./fitch.nix { };
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Fetch dependencies&lt;/h2&gt;
&lt;p&gt;Create a file called &lt;code&gt;deps.nix&lt;/code&gt;. This will contain the dependencies you need for your application.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;touch deps.nix
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then, run &lt;code&gt;nix-build -A fitch.fetch-deps&lt;/code&gt;. This should fail because of the empty SHA.&lt;/p&gt;
&lt;h2&gt;Update SHA&lt;/h2&gt;
&lt;p&gt;The empty SHA will fail. However, the error message will contain the actual SHA value. Copy that and paste it into the sha256 property.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-nix"&gt;{
  lib    
  fetchFromGitHub,
  buildDotnetModule,
  dotnetCorePackages
}:

buildDotnetModule {
  name = &amp;quot;fitch&amp;quot;;

  src = fetchFromGitHub {
    owner = &amp;quot;lqdev&amp;quot;;
    repo = &amp;quot;fitch&amp;quot;;
    rev = &amp;quot;e5fb91ddf57eb5611e0e313af29126e590cd149f&amp;quot;;
    sha256 = &amp;quot;74xddAUGQNVliVs5o3zQQEAUAoF9r8iBmiiBr4qrUgw=&amp;quot;;
  };

  projectFile = &amp;quot;src/fitch.fsproj&amp;quot;;
  executables = &amp;quot;fitch&amp;quot;;
  dotnet-sdk = dotnetCorePackages.sdk_7_0;
  dotnet-runtime = dotnetCorePackages.runtime_7_0;
  nugetDeps = ./deps.nix;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Get dependencies&lt;/h2&gt;
&lt;p&gt;Now that you have the correct SHA, try getting the dependencies again. These dependencies are created in a series of steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Run the following command &lt;code&gt;sudo nix-build -A fitch.fetch-deps&lt;/code&gt;. The result of this command is an executable script called &lt;em&gt;result&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Run the &lt;em&gt;result&lt;/em&gt; script. &lt;code&gt;sudo ./result deps.nix&lt;/code&gt;. This will generate the lockfile called &lt;em&gt;deps.nix&lt;/em&gt; and is referenced by the &lt;code&gt;nugetDeps&lt;/code&gt; property.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Build package&lt;/h2&gt;
&lt;p&gt;Once everything is set up, run &lt;code&gt;nix-build -A fitch&lt;/code&gt;. This will package and install the package onto your system.&lt;/p&gt;
&lt;h2&gt;Add to configuration&lt;/h2&gt;
&lt;p&gt;To add the newly built package to your &lt;em&gt;configuration.nix&lt;/em&gt;, add it to your packages:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-nix"&gt;environment.systemPackages = with pkgs; [
    #...
    (callPackage ./fitch.nix {})
    #...
];
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then, run &lt;code&gt;nixos-rebuild switch&lt;/code&gt;. This should now install the package onto your PC.&lt;/p&gt;
&lt;h2&gt;(Optional) Initialize when shell starts&lt;/h2&gt;
&lt;p&gt;In my case, since I want fitch to run when the terminal starts, I edit my bash configuration in the &lt;em&gt;configuration.nix&lt;/em&gt; file.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-nix"&gt;programs.bash = {
    interactiveShellInit = &amp;quot;fitch&amp;quot;;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Sources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://ryantm.github.io/nixpkgs/languages-frameworks/dotnet/"&gt;Dotnet Nixpkgs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wuffs.org/blog/joining-the-nixos-pyramid-scheme"&gt;Joining the NixOS Pyramid Scheme&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nix.dev/tutorials/learning-journey/packaging-existing-software"&gt;Packaging existing software with Nix&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
]]&gt;</description>
      <link>https://www.lqdev.me/resources/wiki/nixos-dotnet-packages-source</link>
      <guid>https://www.lqdev.me/resources/wiki/nixos-dotnet-packages-source</guid>
      <pubDate>12/17/2023 17:56 -05:00</pubDate>
      <category>dotnet</category>
      <category>nixos</category>
      <category>linux</category>
      <category>sysadmin</category>
      <category></category>
    </item>
    <item>
      <title>Have you tried turning it off and on again? - Mastodon edition</title>
      <description>&lt;![CDATA[&lt;p&gt;My Mastodon instance crashed this morning due to a combination of the usual running out of space issue and me being too lazy to remember to remove federated media regularly from my instance BEFORE it crashes. Now I know you can schedule this with CRON jobs but for some reason I've never been able to configure that correctly nor have I been motivated to get to the bottom of it.&lt;/p&gt;
&lt;p&gt;Anyway, I went through the usual dance of starting up my services and &lt;a href="https://www.lqdev.me/resources/wiki/mastodon-server-cleanup"&gt;using the CLI to clean up my instance&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;However, none of my commands worked because it couldn't connect to the database. A quick look at the status showed the database and all my services were running which led me to go down a troubleshooting rabbit hole with no end in sight and little guidance as to what might be the problem.&lt;/p&gt;
&lt;p&gt;Eventually, before gave up I thought, &amp;quot;my instance is down anyway, couldn't I just turn it off and on again?&amp;quot; I did exactly that and when it restarted I was able to continue with my cleanup tasks as normal.&lt;/p&gt;
&lt;p&gt;So as a reminder, if all else fails, try turning it off and on again.&lt;/p&gt;
]]&gt;</description>
      <link>https://www.lqdev.me/notes/turning-off-on-mastodon-edition</link>
      <guid>https://www.lqdev.me/notes/turning-off-on-mastodon-edition</guid>
      <pubDate>2023-12-15 15:53 -05:00</pubDate>
      <category>mastodon</category>
      <category>sysadmin</category>
      <category>selfhost</category>
      <category>fediverse</category>
    </item>
    <item>
      <title>Upgraded to Mastodon 4.2.0</title>
      <description>&lt;![CDATA[&lt;p&gt;Good thing I'd upgraded to 4.1.7 just a few weeks ago, so getting to 4.2.0 was relatively easy. The &lt;a href="https://www.lqdev.me/resources/wiki/mastodon-server-upgrades/"&gt;wiki&lt;/a&gt; where I'm tracking updates makes it easy to quickly remember the general process. I haven't tried all of the new features, but it's nice to see there's a new onboarding flow to the Web UI which should make it easier to get started for new folks.&lt;/p&gt;
]]&gt;</description>
      <link>https://www.lqdev.me/notes/upgraded-mastodon-4-2-0</link>
      <guid>https://www.lqdev.me/notes/upgraded-mastodon-4-2-0</guid>
      <pubDate>2023-09-24 20:31 -05:00</pubDate>
      <category>mastodon</category>
      <category>fediverse</category>
      <category>sysadmin</category>
      <category>socialmedia</category>
      <category>decentralization</category>
      <category>internet</category>
      <category>web</category>
    </item>
    <item>
      <title>First Steps with NixOS</title>
      <description>&lt;![CDATA[
## Introduction

For the longest time, when using Linux distributions, I chose those that were Debian-based. I still do for servers. However, on the dekstop I switched to [Manjaro](https://manjaro.org/), which is Arch-based, about two years ago. Two years is a long time without distro-hopping, so I was long overdue. I've been following the [NixOS](https://nixos.org/) project for some time but since I was happy with my setup, I didn't consider making the switch. However, a month ago, I decided to [dip my toes](/notes/maybe-switching-nixos). I installed NixOS on a flash drive and started tinkering with it. In this post, I'll provide some of my initial impressions and things I find appealing about the OS.

## Declarative configuration

One of the first things I did when I booted into my new NixOS installation was get familiar with the [configuration file](https://nixos.wiki/wiki/Overview_of_the_NixOS_Linux_distribution#Declarative_Configuration). The configuration file is authored using the [Nix programming language](https://nix.dev/tutorials/first-steps/nix-language) and it's the place where you configure your entire system, including services, packages, and desktop environments. The best way I can describe it is a Dockerfile for your desktop. If interested, you can find my [config file](/resources/snippets/nixos-configuration/) on the scripts section of this website. 


There's a few advantages to this approach:

1. **Configurations are stored in a single place** - The advantage to this is, I don't have to figure out where the configuration files for each of the components of my system are. I can manage everything in one place. A perfect example where the configuration file goes beyond what I expected was being able to include my bash configuration. Typically, I'd have that configuration in my `bashrc` file. With NixOS, I can just include that in the configuration file as follows:


    ```nix
    programs.bash = {
        shellAliases = {
            emacs="emacs -nw";
        };
    };
    ```

1. **Enables composition** - Because the configuration file is effectively a script, I can modularize the difference pieces. For example, if I wanted to split out my service and package configurations into separate files, I can do so and reference those individual files from my configuration file, separating concerns while still keeping my system configuration simple. 
1. **Version control** - Because the configuration file is just like any other plain text file, it means I can check it into the version control system or cloud service of my choice and manage it that way. In doing so, not only can I roll back using the built-in NixOS mechanisms, but I have another layer of security in case I need to recover that file. 

Now, because I can define everything about my system in the configuration file, this means I can seamlessly rebuild my entire system using this single file in a reproducible manner.

## Reproducible builds

I got to experience first-hand how the configuration file can simplify out-of-box-experiences and system configurations. Initially, I did not install NixOS on my main hard drive. All of my configuration and learning took place on a flash drive. Once I got my configuration to a place I was satisfied, it was time to take the plunge and reimage my PC. In the past, when I've done something similar, I've had to document everything I did when configuring my system. That's where posts like [Setting up a new Ubuntu PC](/posts/setting-up-new-ubuntu-pc/) come from. With NixOS, all I needed to do was replace my configuration file with the one I configured on the flash drive. Then, when I ran `nixos-rebuild switch`, my system was configured exactly like the one on the flash drive. 

## Risk-free software evaluations

This is something I haven't tried yet, but I could easily see it coming in handy. Sometimes I might need a piece of software to do one thing or maybe I want to see whether it'll solve a problem I'm facing. In order to try it out and use it, I need to install it globally. This can cause changes to my system permanently that I don't want. With NixOS, you can create [ad-hoc shell environments](https://nix.dev/tutorials/first-steps/ad-hoc-shell-environments#ad-hoc-shell-environments). These environments make temporary changes to your system, so you can evaluate a piece of software or use it that one time. Then, when you exit the environment, the software is no longer installed in your system.

## Large package selection

A [large package selection](https://search.nixos.org/packages) to choose from is something I got used to with Manjaro. Being an Arch-based distribution, I had access to the [Arch User Repository (AUR)](https://aur.archlinux.org/). Moving to NixOS, it's nice to know that in this area, NixOS offers great support. Additionally, NixOS has built-in support for [Flatpak](https://nixos.wiki/wiki/Flatpak)

## Still exploring

There's still a few things I don't really get. For example, when installing the .NET SDK, I wanted to have side-by-side installs of the latest STS (7.0) and LTS (6.0). However, including the package names in my configuration file didn't work as expected. Instead I had to use the following convention.

```nix
(with dotnetCorePackages; combinePackages [
    dotnet-sdk
    dotnet-sdk_7
])
```

As I learn more, this will probably make more sense but for now it's a mystery. 

## Conclusion

Overall, I'm happy with NixOS and I can see myself using it for the long-term. Hopefully longer than two years. I'm not a gamer so I can't say how well it does in that front. For web browsing and software development though, I really like what NixOS has to offer. If some of the things I mentioned above sound interesting, I'd encourage you to install it on a flash drive and start tinkering with it. ]]&gt;</description>
      <link>https://www.lqdev.me/posts/first-steps-nixos</link>
      <guid>https://www.lqdev.me/posts/first-steps-nixos</guid>
      <pubDate>2023-08-22 18:03 -05:00</pubDate>
      <category>nixos</category>
      <category>linux</category>
      <category>os</category>
      <category>nix</category>
      <category>sysadmin</category>
      <category>floss</category>
    </item>
    <item>
      <title>Matrix Synapse REALLY needs an Admin UI</title>
      <description>&lt;![CDATA[&lt;p&gt;Spent the day playing sysadmin and removed about 50GB worth of data from my Matrix Synapse instance. Like Mastodon, most of that data wasn't even mine. Most of it comes is remote data from other users in large rooms. I really like Matrix and the ability to host my own messaging server that provides end-to-end encryption as well as federation with other instances. However, not having a straight-forward way of managing my server and cleaning up resources is painful.&lt;/p&gt;
&lt;p&gt;Anyway, if anyone is interested, here are some resources that have helped me in this process.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.lqdev.me/resources/wiki/matrix-synapse-admin"&gt;Matrix Synapse Server Administration&lt;/a&gt;&lt;/p&gt;
]]&gt;</description>
      <link>https://www.lqdev.me/notes/matrix-synapse-needs-admin-ui</link>
      <guid>https://www.lqdev.me/notes/matrix-synapse-needs-admin-ui</guid>
      <pubDate>2023-06-11 21:32 -05:00</pubDate>
      <category>matrix</category>
      <category>selfhost</category>
      <category>synapse</category>
      <category>opensource</category>
      <category>sysadmin</category>
      <category>messaging</category>
    </item>
    <item>
      <title>Removing avatars and headers in Mastodon</title>
      <description>&lt;![CDATA[&lt;p&gt;The next version of Mastodon can't come soon enough.&lt;/p&gt;
&lt;p&gt;About 20GB of disk space on my instance are being taken up by media from remote users. And this is for a single user instance! I can't imagine how it must be on other instances with multiple accounts.&lt;/p&gt;
&lt;p&gt;&lt;img src="http://cdn.lqdev.tech/files/images/mastodon-media-usage.png" class="img-fluid" alt="Command line displaying disk space used by Mastodon for media" /&gt;&lt;/p&gt;
&lt;p&gt;A recent &lt;a href="https://github.com/mastodon/mastodon/pull/22149"&gt;PR&lt;/a&gt; should make things much better though by allowing you to remove these files.&lt;/p&gt;
&lt;p&gt;The only thing you need to do is pass the &lt;code&gt;--prune-profiles&lt;/code&gt; flag to the &lt;code&gt;media remove&lt;/code&gt; CLI command.&lt;/p&gt;
&lt;p&gt;The PR is already merged so hopefully that means it's coming the next release.&lt;/p&gt;
]]&gt;</description>
      <link>https://www.lqdev.me/notes/mastodon-prune-profiles-media-vnext</link>
      <guid>https://www.lqdev.me/notes/mastodon-prune-profiles-media-vnext</guid>
      <pubDate>2022-12-26 17:00 -05:00</pubDate>
      <category>mastodon</category>
      <category>fediverse</category>
      <category>selfhost</category>
      <category>sysadmin</category>
    </item>
    <item>
      <title>Upgraded to Mastodon v4.0.2</title>
      <description>&lt;![CDATA[&lt;p&gt;Upgrading my server to 4.0.2 wasn't bad, especially considering I was coming from a 3.x version. Also posting this to make sure that there have been no changes to the API and my website can still post to Mastodon on my behalf.&lt;/p&gt;
]]&gt;</description>
      <link>https://www.lqdev.me/notes/upgraded-mastodon-v4-0-2</link>
      <guid>https://www.lqdev.me/notes/upgraded-mastodon-v4-0-2</guid>
      <pubDate>2022-12-26 16:03 -05:00</pubDate>
      <category>mastodon</category>
      <category>selfhost</category>
      <category>fediverse</category>
      <category>upgade</category>
      <category>sysadmin</category>
    </item>
    <item>
      <title>Windows 10 Intel Display Driver Blank Screen Fix</title>
      <description>&lt;![CDATA[
Recently my Dell Inspiron P57G was experiencing issues when entering sleep mode. When trying to wake the PC, a blank screen was coming on. After some research, I concluded it was due to bugs with the most recent version of the display driver. These were the steps I took to remediate the issue. 

1. Go to [Dell Support](http://www.dell.com/support/home/us/en/04?app=drivers&amp;c=us&amp;l=en&amp;~ck=mn) page and find the Intel HD Graphics 510 515 520 530 540 Driver.
2. Click 'Other Versions'
3. Download the most recent driver prior to 08/13/2017.
4. Follow the installation instructions and restart the PC.
    - If prompted to overwrite newer drivers, select 'Yes'

After restart, either force the PC to sleep or let it sleep on its own. The problem should've been fixed. 



]]&gt;</description>
      <link>https://www.lqdev.me/posts/windows-10-intel-display-driver-blank-screen</link>
      <guid>https://www.lqdev.me/posts/windows-10-intel-display-driver-blank-screen</guid>
      <pubDate>2017-12-09 14:27:31 -05:00</pubDate>
      <category>sysadmin</category>
      <category>drivers</category>
      <category>pc issues</category>
    </item>
    <item>
      <title>HP ProBook 430 G1 Ubuntu BIOS Upgrade</title>
      <description>&lt;![CDATA[
I recently got an HP ProBook 430 G1 which came preinstalled with Windows 10. I have several Windows 10 devices, but needed a Linux system while on the go. I had given my HP Chromebook a try using Crouton. This worked okay. However, I was limited by the specs of the Chromebook and wanted something with more power for development purposes. Therefore, I erased Windows 10 on the ProBook and installed Ubuntu. The PC worked well. My only problem with it was that I found my battery meter was inaccurate and would reach a percentage in the 60’s before suddenly dropping to zero and shutting down. This was not something I could have, especially during the middle of a work session where I might lose some/all of my work.

Immediately, I assumed it had something to do with drivers/BIOS being out of date. To my surprise, BIOS updates were only available for Windows. Fortunately, through some research I was able to find a solution that allowed me to update my BIOS and fix my battery problems.

## Prerequisites:

1. Make sure PC is connected to the charger
2. 4GB USB Drive

## Procedure:

1. Format USB drive. (FAT32 required)
2. Create folder inside USB drive called Hewlett-Packard\BIOS\New
3. Download latest BIOS .exe file from HP Support website
4. Unzip .exe file. While 7Zip is not required, I found this to work well.
5. Copy .bin file to Hewlett-Packard\BIOS\New folder
6. Copy entire BIOSUpdate folder to Hewlett-Packard folder.
7. Restart PC
8. Continuously press F10 to enter BIOS Setup
9. Select Update System BIOS menu option
10. Select Update BIOS Using Local Media option
11. Select Accept

At this point, the installation process will take effect and the PC will restart itself at which point the your BIOS should be up to date.
]]&gt;</description>
      <link>https://www.lqdev.me/posts/hp-probook-430g1-ubuntu-bios-upgrade</link>
      <guid>https://www.lqdev.me/posts/hp-probook-430g1-ubuntu-bios-upgrade</guid>
      <pubDate>2017-12-09 12:57:12 -05:00</pubDate>
      <category>sysadmin</category>
      <category>ubuntu</category>
      <category>bios</category>
    </item>
    <item>
      <title>Setting Up A New Ubuntu PC</title>
      <description>&lt;![CDATA[
# Users

This assumes that you are currently the root user.

Enter the adduser to command to create a new user.

```bash
adduser &lt;username&gt;
```

Immediately, you will be prompted for a password. Enter the password and continue the process. 

## Adding Root Privileges

This is only applicable when granting root priviliges to the newly created user. 

Enter the usermod command to add the new user to the sudo (root) group

```bash
usermod -aG sudo &lt;username&gt;
```

The user should now have root priviliges. 

To test that it worked log in as that user and try to run a command with sudo

```bash
su - &lt;username&gt;
sudo ls -la /root
```

# Emacs

By default, Ubuntu usually comes preloaded or has the default 24.x version of Emacs. I often like to use Emacs along with org-mode and to take full advantage, especially as it pertains to working with source code I have found version 25.x is much better suited for the task. While there are many ways to go about it, installing it via package manager appears to be the easiest. 

## Add repository to PPA

```bash
sudo add-apt-repository ppa:kelleyk/emacs
```

## Update the packages

```bash
sudo apt update
```

## Install Emacs. 
### Text-Only Interface

```bash
sudo apt-get install emacs25-nox
```

### GUI Interface

```bash
sudo apt-get install emacs25
```

## Backup files

Sometimes Emacs keeps a backup file by default. This can cause a lot of clutter in the current directory where work is being performed. There is a way to disable this.

Navigate to `~/.emacs.d/` and edit the `init.el` file and add the following line.

```lisp
(setq make-backup-files nil)
```

# Java

Make sure that your packages and repositories are up to date

```bash
sudo apt-get update
```

## OpenJDK

```bash
sudo apt-get install default-jdk
```

## Oracle JDK
### Add PPA Repository
```bash
sudo add-apt-repository ppa:webupd8team/java
sudo apt-get update
```

### Install the installer

```bash
sudo apt-get install oracle-java8-installer
```


#### Sources
[Users](https://www.digitalocean.com/community/tutorials/how-to-create-a-sudo-user-on-ubuntu-quickstart)  
[Emacs](http://ubuntuhandbook.org/index.php/2017/04/install-emacs-25-ppa-ubuntu-16-04-14-04/)  
[Java](https://www.digitalocean.com/community/tutorials/how-to-install-java-with-apt-get-on-ubuntu-16-04)
]]&gt;</description>
      <link>https://www.lqdev.me/posts/setting-up-new-ubuntu-pc</link>
      <guid>https://www.lqdev.me/posts/setting-up-new-ubuntu-pc</guid>
      <pubDate>2017-12-09 12:49:19 -05:00</pubDate>
      <category>linux</category>
      <category>ubuntu</category>
      <category>java</category>
      <category>sysadmin</category>
      <category>emacs</category>
    </item>
  </channel>
</rss>