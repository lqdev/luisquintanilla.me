<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>Luis Quintanilla - fediverse</title>
    <link>https://www.lqdev.me/tags/fediverse</link>
    <description>All content tagged with 'fediverse' by Luis Quintanilla</description>
    <lastBuildDate>2025-09-12 19:51 -05:00</lastBuildDate>
    <language>en</language>
    <item>
      <title>Mastodon Launching Quote Posts</title>
      <description>&lt;![CDATA[[reshare] &lt;blockquote class="blockquote"&gt;
&lt;p&gt;Starting next week, you’ll see an option to quote another user by selecting the repost — or “boost” — button, allowing you to add your thoughts to someone else’s post.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote class="blockquote"&gt;
&lt;p&gt;Mastodon is bringing quote posts to mastodon.online and mastodon.social first, but will roll out the feature more broadly with the Mastodon 4.5 update.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote class="blockquote"&gt;
&lt;p&gt;It also worked on a technical &lt;a href="https://codeberg.org/fediverse/fep/src/branch/main/fep/044f/fep-044f.md"&gt;specification&lt;/a&gt; for quote posting in the fediverse and hopes that other platforms will adopt it.&lt;/p&gt;
&lt;/blockquote&gt;
]]&gt;</description>
      <link>https://www.lqdev.me/responses/masdoton-launches-quote-posts</link>
      <guid>https://www.lqdev.me/responses/masdoton-launches-quote-posts</guid>
      <pubDate>2025-09-12 19:51 -05:00</pubDate>
      <category>mastodon</category>
      <category>fediverse</category>
      <category>socialweb</category>
    </item>
    <item>
      <title>Ghost 6.0</title>
      <description>&lt;![CDATA[[reshare] &lt;blockquote class="blockquote"&gt;
&lt;p&gt;In Ghost 6.0 we're introducing another new distribution channel: The social web. Now, millions of people can discover, follow, like and reply to your posts from any supported social web client - including Bluesky, Mastodon, Threads, Flipboard, Ghost, WordPress, Surf, WriteFreely, and many more.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote class="blockquote"&gt;
&lt;p&gt;Just as people can visit your Ghost website in any browser, subscribe with any feed reader, or receive newsletters in any email client, they can now follow your Ghost publication from any social web client.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote class="blockquote"&gt;
&lt;p&gt;Unlike closed platforms with restrictive algorithms, open web protocols create a direct connection between you and your subscribers which you have full control over.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote class="blockquote"&gt;
&lt;p&gt;If you've been around on the web for while, and you can remember back that far... you might even call it the return of the blogosphere.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Love the introduction of social components to the Ghost platform. I'm so ready for the return of the blogosphere and the return to open protocols.&lt;/p&gt;
]]&gt;</description>
      <link>https://www.lqdev.me/responses/ghost-6-changelog</link>
      <guid>https://www.lqdev.me/responses/ghost-6-changelog</guid>
      <pubDate>2025-08-18 19:24 -05:00</pubDate>
      <category>ghost</category>
      <category>fediverse</category>
      <category>socialweb</category>
      <category>publishing</category>
    </item>
    <item>
      <title>FediCon 2025 Videos</title>
      <description>&lt;![CDATA[[bookmark] ]]&gt;</description>
      <link>https://www.lqdev.me/bookmarks/fedicon-2025-videos</link>
      <guid>https://www.lqdev.me/bookmarks/fedicon-2025-videos</guid>
      <pubDate>2025-08-18 18:53 -05:00</pubDate>
      <category>fediverse</category>
      <category>fedicon2025</category>
      <category>conference</category>
    </item>
    <item>
      <title>FediUrbanism — Johanna Botari — FediCon 2025</title>
      <description>&lt;![CDATA[[reshare] &lt;p&gt;I really enjoyed this talk by &lt;a href="https://cosocial.ca/@johannab"&gt;@johannab&lt;/a&gt; on the concept of FediUrbanism.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://spectra.video/w/f7GBsBf3nAhF8WfTMWUEXm" title="Thumbnail of FediUrbanism Talk Recording"&gt;&lt;img src="https://spectra.video/lazy-static/previews/40a5e4bd-f8d7-438a-b35c-0c81e753ddbd.jpg" class="img-fluid" alt="Thumbnail of FediUrbanism Talk Recording" /&gt;&lt;/a&gt;&lt;/p&gt;
]]&gt;</description>
      <link>https://www.lqdev.me/responses/fediurbanism-fedicon-2025</link>
      <guid>https://www.lqdev.me/responses/fediurbanism-fedicon-2025</guid>
      <pubDate>2025-08-18 18:36 -05:00</pubDate>
      <category>fediurbanism</category>
      <category>fedicon2025</category>
      <category>fediverse</category>
      <category>thirdspace</category>
      <category>community</category>
    </item>
    <item>
      <title>Deploy Owncast to Azure Container Apps with Persistent Storage</title>
      <description>&lt;![CDATA[&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;This guide shows how to deploy Owncast to Azure Container Apps with persistent storage, scale-to-zero capability, and proper SQLite compatibility to minimize costs while ensuring reliable operation.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Key Features:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ultra-cost-optimized configuration (~$0.60/month for 4 hours of streaming)&lt;/li&gt;
&lt;li&gt;Full data persistence (users, chat, federation, configuration)&lt;/li&gt;
&lt;li&gt;Scale-to-zero capability when not streaming&lt;/li&gt;
&lt;li&gt;SQLite + Azure Files compatibility fixes&lt;/li&gt;
&lt;li&gt;RTMP + HTTP dual-port configuration for OBS Studio&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Prerequisites&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Azure CLI installed and logged in&lt;/li&gt;
&lt;li&gt;An Azure subscription&lt;/li&gt;
&lt;li&gt;A resource group created&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Step 1: Create Required Resources&lt;/h2&gt;
&lt;h3&gt;Create Storage Account for Persistent Data&lt;/h3&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;# Set variables (choose cheapest regions)
RESOURCE_GROUP=&amp;quot;your-resource-group&amp;quot;
LOCATION=&amp;quot;centralus&amp;quot;  # Often cheaper than eastus
STORAGE_ACCOUNT=&amp;quot;owncaststorage$(date +%s)&amp;quot;  # Must be globally unique
CONTAINER_APP_ENV=&amp;quot;owncast-env&amp;quot;
CONTAINER_APP_NAME=&amp;quot;owncast-app&amp;quot;

# Create MINIMAL cost storage account
az storage account create \
  --name $STORAGE_ACCOUNT \
  --resource-group $RESOURCE_GROUP \
  --location $LOCATION \
  --sku Standard_LRS \
  --kind StorageV2 \
  --access-tier Cool \
  --allow-blob-public-access false \
  --https-only true \
  --min-tls-version TLS1_2

# Create file share with minimal provisioned size
az storage share create \
  --name &amp;quot;owncast-data&amp;quot; \
  --account-name $STORAGE_ACCOUNT \
  --quota 1  # Start with 1GB, scales automatically
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Create Container Apps Environment&lt;/h3&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;# Create the Container Apps environment
az containerapp env create \
  --name $CONTAINER_APP_ENV \
  --resource-group $RESOURCE_GROUP \
  --location $LOCATION
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Step 2: Configure Storage Mount&lt;/h2&gt;
&lt;p&gt;Get the storage account key and create the storage mount:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;# Get storage account key
STORAGE_KEY=$(az storage account keys list \
  --account-name $STORAGE_ACCOUNT \
  --resource-group $RESOURCE_GROUP \
  --query &amp;quot;[0].value&amp;quot; -o tsv)

# Create storage mount in the environment
az containerapp env storage set \
  --name $CONTAINER_APP_ENV \
  --resource-group $RESOURCE_GROUP \
  --storage-name &amp;quot;owncast-storage&amp;quot; \
  --azure-file-account-name $STORAGE_ACCOUNT \
  --azure-file-account-key $STORAGE_KEY \
  --azure-file-share-name &amp;quot;owncast-data&amp;quot; \
  --access-mode ReadWrite
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Step 3: Deploy Owncast Container App&lt;/h2&gt;
&lt;p&gt;Create the container app with persistent storage:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;az containerapp create \
  --name $CONTAINER_APP_NAME \
  --resource-group $RESOURCE_GROUP \
  --environment $CONTAINER_APP_ENV \
  --image &amp;quot;owncast/owncast:latest&amp;quot; \
  --target-port 8080 \
  --ingress external \
  --min-replicas 0 \
  --max-replicas 1 \
  --cpu 0.5 \
  --memory 1Gi \
  --volume-mount &amp;quot;data:/app/data&amp;quot; \
  --volume-name &amp;quot;data&amp;quot; \
  --volume-storage-name &amp;quot;owncast-storage&amp;quot; \
  --volume-storage-type AzureFile
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Step 4: Configure Dual-Port Ingress (HTTP + RTMP)&lt;/h2&gt;
&lt;p&gt;For Owncast to work properly, you need both HTTP (8080) and RTMP (1935) ports. This requires a &lt;strong&gt;Virtual Network (VNet)&lt;/strong&gt; integration:&lt;/p&gt;
&lt;h3&gt;Create VNet and Subnet&lt;/h3&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;# Create MINIMAL virtual network (smallest possible address space)
az network vnet create \
  --name &amp;quot;owncast-vnet&amp;quot; \
  --resource-group $RESOURCE_GROUP \
  --location $LOCATION \
  --address-prefix &amp;quot;10.0.0.0/24&amp;quot;  # Smaller than default /16

# Create minimal subnet
az network vnet subnet create \
  --name &amp;quot;container-apps-subnet&amp;quot; \
  --resource-group $RESOURCE_GROUP \
  --vnet-name &amp;quot;owncast-vnet&amp;quot; \
  --address-prefix &amp;quot;10.0.0.0/27&amp;quot;  # Only 32 IPs instead of /23 (512 IPs)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Recreate Container Apps Environment with VNet&lt;/h3&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;# Get subnet ID
SUBNET_ID=$(az network vnet subnet show \
  --name &amp;quot;container-apps-subnet&amp;quot; \
  --vnet-name &amp;quot;owncast-vnet&amp;quot; \
  --resource-group $RESOURCE_GROUP \
  --query id -o tsv)

# Delete existing environment and recreate with VNet
az containerapp env delete \
  --name $CONTAINER_APP_ENV \
  --resource-group $RESOURCE_GROUP \
  --yes

# Create Container Apps environment with workload profiles DISABLED (cheapest option)
az containerapp env create \
  --name $CONTAINER_APP_ENV \
  --resource-group $RESOURCE_GROUP \
  --location $LOCATION \
  --infrastructure-subnet-resource-id $SUBNET_ID \
  --enable-workload-profiles false  # Forces consumption-only pricing
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Deploy Container App with MINIMAL Resources&lt;/h3&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;az containerapp create \
  --name $CONTAINER_APP_NAME \
  --resource-group $RESOURCE_GROUP \
  --environment $CONTAINER_APP_ENV \
  --image &amp;quot;owncast/owncast:latest&amp;quot; \
  --target-port 8080 \
  --exposed-port 1935 \
  --ingress external \
  --transport auto \
  --min-replicas 0 \
  --max-replicas 1 \
  --cpu 0.25 \
  --memory 0.5Gi \
  --volume-mount &amp;quot;data:/app/data&amp;quot; \
  --volume-name &amp;quot;data&amp;quot; \
  --volume-storage-name &amp;quot;owncast-storage&amp;quot; \
  --volume-storage-type AzureFile
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Cost-Optimized Resource Allocation:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;CPU&lt;/strong&gt;: 0.25 cores (minimum allowed, sufficient for small streams)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Memory&lt;/strong&gt;: 0.5Gi (minimum allowed, will work for basic streaming)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Scaling&lt;/strong&gt;: Aggressive scale-to-zero with max 1 replica&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Ultra Low-Cost Alternative YAML Configuration&lt;/h2&gt;
&lt;p&gt;For maximum cost optimization, use this YAML approach with the smallest possible resource allocation. This configuration includes critical SQLite compatibility fixes for Azure Files:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-yaml"&gt;# owncast-production-ready.yaml
properties:
  configuration:
    ingress:
      external: true
      targetPort: 8080
      additionalPortMappings:
      - external: true
        targetPort: 1935
        exposedPort: 1935
        transport: tcp
    secrets: []
  template:
    containers:
    - image: owncast/owncast:latest
      name: owncast-app
      resources:
        cpu: 0.25
        memory: 0.5Gi
      volumeMounts:
      - mountPath: /app/data
        volumeName: data
      env:
      - name: OWNCAST_RTMP_PORT
        value: &amp;quot;1935&amp;quot;
      - name: OWNCAST_WEBSERVER_PORT  
        value: &amp;quot;8080&amp;quot;
      - name: OWNCAST_DATABASE_FILE
        value: &amp;quot;/app/data/db/owncast.db&amp;quot;
      - name: OWNCAST_DATABASE_JOURNAL_MODE
        value: &amp;quot;DELETE&amp;quot;
      - name: OWNCAST_LOG_DIRECTORY
        value: &amp;quot;/app/data/logs&amp;quot;
      - name: OWNCAST_DATA_DIRECTORY
        value: &amp;quot;/app/data&amp;quot;
      - name: OWNCAST_HLS_DIRECTORY
        value: &amp;quot;/app/data/hls&amp;quot;
    scale:
      minReplicas: 0
      maxReplicas: 1
      rules:
      - name: &amp;quot;http-rule&amp;quot;
        http:
          metadata:
            concurrentRequests: &amp;quot;10&amp;quot;
    volumes:
    - name: data
      storageType: AzureFile
      storageName: owncast-storage
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Deploy with:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;az containerapp create \
  --name $CONTAINER_APP_NAME \
  --resource-group $RESOURCE_GROUP \
  --yaml owncast-production-ready.yaml
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Critical Configuration Notes&lt;/h2&gt;
&lt;h3&gt;SQLite + Azure Files Compatibility Fix&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt;: The default Owncast configuration can cause &amp;quot;database is locked&amp;quot; errors when using Azure Files storage due to SQLite's WAL (Write-Ahead Logging) mode being incompatible with network file systems. The configuration above includes these critical fixes:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Database Subdirectory&lt;/strong&gt;: &lt;code&gt;OWNCAST_DATABASE_FILE=/app/data/db/owncast.db&lt;/code&gt; - Places database in a subdirectory which improves Azure Files compatibility&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Journal Mode Override&lt;/strong&gt;: &lt;code&gt;OWNCAST_DATABASE_JOURNAL_MODE=DELETE&lt;/code&gt; - Forces SQLite to use DELETE mode instead of WAL mode to prevent file locking issues&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Full Data Mount&lt;/strong&gt;: Mounts entire &lt;code&gt;/app/data&lt;/code&gt; directory for complete persistence of logs, database, and HLS content&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;What Gets Persisted&lt;/h3&gt;
&lt;p&gt;With this configuration, the following data persists across container restarts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;User accounts and chat history&lt;/strong&gt; (critical for community continuity)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Stream keys and admin credentials&lt;/strong&gt; (prevents reconfiguration)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ActivityPub federation data&lt;/strong&gt; (maintains Mastodon/Fediverse followers)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Server customization and branding&lt;/strong&gt; (logos, site name, descriptions)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;API tokens and webhook configurations&lt;/strong&gt; (third-party integrations)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Complete logs and HLS video segments&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Without proper persistence, you would lose all users, followers, and configuration on every container restart.&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;Cost Optimization Features&lt;/h2&gt;
&lt;h3&gt;Scale-to-Zero Configuration&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Min Replicas&lt;/strong&gt;: Set to 0 to completely scale down when not in use&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Max Replicas&lt;/strong&gt;: Set to 1 (Owncast doesn't need horizontal scaling)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Scale Rules&lt;/strong&gt;: Container Apps will automatically scale up when requests arrive&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Resource Limits (Ultra Cost-Optimized)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;CPU&lt;/strong&gt;: 0.25 cores (absolute minimum, sufficient for 1-2 viewer streams)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Memory&lt;/strong&gt;: 0.5Gi (minimum allowed by Azure Container Apps)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Storage&lt;/strong&gt;: Cool tier with 1GB initial quota (auto-scales as needed)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Network&lt;/strong&gt;: Minimal VNet addressing to reduce overhead&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;OBS Configuration&lt;/h2&gt;
&lt;p&gt;After deployment, configure OBS for streaming:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Server Settings&lt;/strong&gt;: Use &lt;code&gt;rtmp://your-app-url:1935/live&lt;/code&gt; (note: &lt;code&gt;rtmp://&lt;/code&gt; not &lt;code&gt;https://&lt;/code&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Stream Key&lt;/strong&gt;: Use the key from Owncast admin panel (Configuration &amp;gt; Server Setup &amp;gt; Stream Keys)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Owncast Web Interface&lt;/strong&gt;: Access at &lt;code&gt;https://your-app-url&lt;/code&gt; (port 8080 is handled automatically by ingress)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Persistent Data&lt;/strong&gt;: All Owncast configuration, database, and uploaded files are stored in Azure Files and persist across container restarts and scale-to-zero events. &lt;strong&gt;Critical&lt;/strong&gt;: Uses SQLite DELETE journal mode to prevent &amp;quot;database is locked&amp;quot; errors with Azure Files.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Cold Start&lt;/strong&gt;: When scaling from zero, there will be a 10-15 second cold start delay as the container initializes. This is normal and acceptable for personal streaming.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;VNet Requirement&lt;/strong&gt;: For dual-port access (HTTP + RTMP), you &lt;strong&gt;must&lt;/strong&gt; use a Virtual Network integration. This is a requirement for exposing additional TCP ports in Azure Container Apps.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Database Compatibility&lt;/strong&gt;: The configuration includes specific environment variables (&lt;code&gt;OWNCAST_DATABASE_JOURNAL_MODE=DELETE&lt;/code&gt;) to ensure SQLite works properly with Azure Files network storage. Without these settings, you'll experience database crashes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Security Configuration&lt;/strong&gt;: After deployment, immediately change the default admin credentials:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Navigate to &lt;code&gt;https://your-app-url/admin&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Default login: &lt;code&gt;admin&lt;/code&gt; / &lt;code&gt;abc123&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Go to Configuration &amp;gt; Server Setup and change the admin password&lt;/li&gt;
&lt;li&gt;Create/copy stream keys from Configuration &amp;gt; Server Setup &amp;gt; Stream Keys tab&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Custom Domain&lt;/strong&gt;: You can configure a custom domain using:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;az containerapp hostname add \
  --name $CONTAINER_APP_NAME \
  --resource-group $RESOURCE_GROUP \
  --hostname &amp;quot;your-domain.com&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;SSL Certificate&lt;/strong&gt;: Azure Container Apps provides automatic SSL certificates for custom domains.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Monitoring and Troubleshooting&lt;/h2&gt;
&lt;p&gt;Check your deployment:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;# Get the URL
az containerapp show \
  --name $CONTAINER_APP_NAME \
  --resource-group $RESOURCE_GROUP \
  --query properties.configuration.ingress.fqdn

# Test RTMP port connectivity (should return TcpTestSucceeded: True)
Test-NetConnection -ComputerName &amp;quot;your-app-url&amp;quot; -Port 1935 -InformationLevel Detailed

# Test web interface
curl -I https://your-app-url/

# View logs
az containerapp logs show \
  --name $CONTAINER_APP_NAME \
  --resource-group $RESOURCE_GROUP
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Common Issues and Solutions&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Problem&lt;/strong&gt;: Container logs show &amp;quot;database is locked&amp;quot; errors and crashes
&lt;strong&gt;Solution&lt;/strong&gt;: Ensure you're using the configuration above with &lt;code&gt;OWNCAST_DATABASE_JOURNAL_MODE=DELETE&lt;/code&gt; and database in a subdirectory&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Problem&lt;/strong&gt;: OBS shows &amp;quot;Failed to connect to server&amp;quot;&lt;br /&gt;
&lt;strong&gt;Solution&lt;/strong&gt;: Verify RTMP port 1935 is accessible using &lt;code&gt;Test-NetConnection&lt;/code&gt; and ensure you're using VNet integration&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Problem&lt;/strong&gt;: Admin panel won't load or shows errors
&lt;strong&gt;Solution&lt;/strong&gt;: Database persistence issues - check that the &lt;code&gt;/app/data&lt;/code&gt; mount is working and SQLite journal mode is set correctly&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Problem&lt;/strong&gt;: Container scales to zero but doesn't start properly
&lt;strong&gt;Solution&lt;/strong&gt;: Cold start delay is normal (10-15 seconds). If it doesn't start, check environment variable configuration&lt;/p&gt;
&lt;h2&gt;Cost Estimation (Ultra-Optimized)&lt;/h2&gt;
&lt;p&gt;With these optimizations, your monthly costs should be:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;When Streaming (4 hours/month example):&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Compute&lt;/strong&gt;: ~$0.50/month (0.25 CPU + 0.5Gi RAM × 4 hours)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Container Apps Environment&lt;/strong&gt;: ~$0.00 (consumption plan, no dedicated resources)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Networking&lt;/strong&gt;: ~$0.05/month (minimal VNet overhead)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;When Idle (Scale-to-Zero):&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Compute&lt;/strong&gt;: $0.00 (scaled to zero)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Environment&lt;/strong&gt;: $0.00 (consumption plan)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Always-On Costs:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Storage&lt;/strong&gt;: ~$0.05-0.10/month (1-2GB in Cool tier)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;VNet&lt;/strong&gt;: ~$0.00 (no gateways or dedicated resources)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Total Monthly Cost: ~$0.60-0.65/month&lt;/strong&gt; (assuming 4 hours of streaming)&lt;/p&gt;
&lt;h3&gt;Performance Expectations at Minimal Resources:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;0.25 CPU + 0.5Gi RAM&lt;/strong&gt;: Suitable for 480p-720p streams with 1-5 concurrent viewers&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Scale-up Path&lt;/strong&gt;: Monitor performance and increase to 0.5 CPU + 1Gi if needed&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cold Start&lt;/strong&gt;: ~10-15 seconds when scaling from zero (acceptable for personal streaming)&lt;/li&gt;
&lt;/ul&gt;
]]&gt;</description>
      <link>https://www.lqdev.me/resources/snippets/owncast-optimized-azure-deployment-guide</link>
      <guid>https://www.lqdev.me/resources/snippets/owncast-optimized-azure-deployment-guide</guid>
      <pubDate>2025-08-14 13:35 -05:00</pubDate>
      <category>owncast</category>
      <category>fediverse</category>
      <category>azure</category>
      <category>livestream</category>
    </item>
    <item>
      <title>Tumblr’s move to WordPress and fediverse integration is ‘on hold’</title>
      <description>&lt;![CDATA[[reply] &lt;p&gt;That's unfortunate. Having Tumblr as your frontend for posting and curating feeds, with WordPress as the backend and integrated with decentralized networks like the Fediverse for distribution would've been amazing. It sounds like Tumblr is still strategic to Automattic and as more people move away from the centralized social platforms and towards their own corners of the internet, having these differente building blocks in place will be even more important.&lt;/p&gt;
]]&gt;</description>
      <link>https://www.lqdev.me/responses/tumblr-wordpress-fediverse-integration-pause</link>
      <guid>https://www.lqdev.me/responses/tumblr-wordpress-fediverse-integration-pause</guid>
      <pubDate>2025-06-30 20:21 -05:00</pubDate>
      <category>tumblr</category>
      <category>wordpress</category>
      <category>fediverse</category>
      <category>automattic</category>
    </item>
    <item>
      <title>FediForum Day One Recap</title>
      <description>&lt;![CDATA[
Just wrapped up a successful first day of FediForum.

The vibes and energy were high. Tons of great conversations and projects around the social web.

A few emerging themes I noticed:

- Identity
- Portability / Interoperability
- Feeds
- Commerce

Ian Forrester kicked us off with his Public Service &amp; The Fediverse keynote [(Slides)](https://docs.google.com/presentation/d/1HuQF_sI19zwByM793uvdl7BECneRmni_H9uOG-oFkdM/edit?slide=id.g420c517061_0_0#slide=id.g420c517061_0_0). 

One of the ideas that struck a chord of public service integrated into the fediverse. More specifically the interest that sparked in me was that publishing and social shouldn't be two separate things. Following the POSSE principle from the IndieWeb. You publish on your own site and then it's syndicated elsewhere. 

This was interesting enough for me I even hosted a session on the topic, I think it was called Tightening the Loop between CMS and the Fediverse. It was my first unconference, so I appreciated the way the agenda was built. Announce your topic, see whether there's interest, put it on the agenda, chat with fellow participants. Super easy.

## Identity &amp; Portability

These are such a huge topic but for the purpose of this post, I'm lumping them together.

[https://bounce-migrate.appspot.com/](https://bounce.so) is one of the projects aiming to make portability easy. What's so interesting is they're making it easy to migrate across protocols. So if you're in one network like ATProto (Bluesky), migrating to the Fediverse should be relatively seamless with https://bounce.so. 

Some great discussions that emerged on the topic as well include:

- **Reputation** - How do you build a web of trust?
- **Compartmentalization and Deduplication** - A single identity or multiple identities? When "following" someone, which of their feeds takes priority?

## Feeds

Talk of feeds was everywhere. I made a note to myself throughout the conference.

&gt; It's amazing how big the feeds theme is. Feed ownership, customization, and sharing. All powered by open protocols.

- [Bonfire releases 1.0](https://bonfirenetworks.org/posts/bonfire_social_rc/) - Congrats to the Bonfire team on this milestone. I haven't tried Bonfire myself, but the Circles feature caught my attention. It made me reminiscent of Google+.
- [Surf.Social is now in beta](https://https://surf.social) - As an avid user and curator of RSS feeds, I'd heard about Surf before but hadn't really looked into it. The beta release was announced at the conference and I quickly was able to sign up and download it. Kudos to the team on this milestone and thanks for being so responsive to my request to join the beta. I did almost no waiting in the waitlist. Once I have a chance to try it out and get familiar with it, I'll share some thoughts.
- [Channels](https://home.channel.org/) from the folks at [Newsmast Foundation](https://www.newsmastfoundation.org/) looks like an interesting way to curate and customize feeds. 
[Bring Your Own Timeline Algorithm](https://huggingface.co/spaces/mozilla-ai/byota) leverages semantic search to help you seamlessly leverage the power of algorithmic feeds but doing so under your control. Cool use of AI. 

There were a few unconference sessions on the topic as well. 

## Commerce

It was great to see folks talking about enabling creators to earn a living on open platforms and the social web. 

I believe [Bandwagon.fm](https://bandwagon.fm/home) showed of an implementation of a payments and subscription system built on top of [Emmisary](https://emissary.dev/), a social web toolkit.

## Additional Resources

Here's a list of other links and projects I was exposed to during the conference.

- [FediForum Advisory Board and Organizers](https://fediforum.org/people/)
- [An Internet of Many Autonomous Communities](https://blog.rudyfraser.com/an-internet-of-many-autonomous-communities/)
- [FediMeteo - Weather updates in your Fediverse Timeline](https://fedimeteo.com/)
- [Public Interest Technology Group (PITG)](https://pitg.network/)
- [Coalition for Content Provenance and Authenticity (C2PA)](https://c2pa.org/)
- [A New Social](https://www.anew.social/)
- [WeDistribute FediForum Live Coverage](https://wedistribute.org/2025/06/fediforum-june-2025/)
- [BBC Human Values](https://bbc.github.io/humanvalues/)
- [The Indie Beat Radio](https://theindiebeat.fm/)
- [Tie Yourself to a Federated Mastodon](https://pluralistic.net/2024/11/02/ulysses-pact/#tie-yourself-to-a-federated-mast)
- [The No Network Effect](https://snarfed.org/2013-04-13_the-no-network-effect)

As always, Cory Doctorow was great way to close out the first day. I even learned a new term, tron-pilled. Which means as a creator of a platform, you're on the side of the users.  

Looking forward to tomorrow's sessions!]]&gt;</description>
      <link>https://www.lqdev.me/posts/fediforum-day-1-jun-2025</link>
      <guid>https://www.lqdev.me/posts/fediforum-day-1-jun-2025</guid>
      <pubDate>2025-06-05 17:20 -05:00</pubDate>
      <category>fediforum</category>
      <category>socialweb</category>
      <category>community</category>
      <category>fediverse</category>
      <category>openweb</category>
    </item>
    <item>
      <title>Announcing Distributed.Press Social Inbox 1.0</title>
      <description>&lt;![CDATA[[reshare] &lt;p&gt;I hadn't heard of &lt;a href="https://distributed.press/"&gt;Distributed Press&lt;/a&gt; and this is an older post (from 2023), but the idea is interesting.&lt;/p&gt;
&lt;blockquote class="blockquote"&gt;
&lt;p&gt;Hypha and Sutty are thrilled to announce the release of the Social Inbox, a new feature of Distributed.Press that integrates a website’s comment section with federated social media platforms like Mastodon. With the Social Inbox enabled, websites obtain their own account on the Fediverse, allowing it to automatically send out new posts to followers at the time of publication. When other users reply to posts, you can approve them to be published to the site as comments. The Social Inbox allows readers to directly engage with your posts where they already are, and gives publishers the ability to incorporate public dialogue into their websites.&lt;/p&gt;
&lt;/blockquote&gt;
]]&gt;</description>
      <link>https://www.lqdev.me/responses/announcing-distributed-press-social-inbox</link>
      <guid>https://www.lqdev.me/responses/announcing-distributed-press-social-inbox</guid>
      <pubDate>2025-05-10 20:47 -05:00</pubDate>
      <category>decentralization</category>
      <category>indieweb</category>
      <category>social</category>
      <category>fediverse</category>
      <category>dweb</category>
    </item>
    <item>
      <title>Discourse and the Fediverse</title>
      <description>&lt;![CDATA[[star] &lt;blockquote class="blockquote"&gt;
&lt;p&gt;Two years ago, we started working on a plugin that brings Discourse and the Fediverse closer together. Discourse communities are online spaces that facilitate open collaboration and communication. The Fediverse offers ways to expand the reach of Discourse communities and help them build bridges with people active in other spaces, all while keeping the conversation civil, meaningful and focused. This post will describe how the ActivityPub plugin works and how you can enable your Discourse community to connect with other communities or Fediverse users.&lt;/p&gt;
&lt;/blockquote&gt;
]]&gt;</description>
      <link>https://www.lqdev.me/responses/discourse-fediverse</link>
      <guid>https://www.lqdev.me/responses/discourse-fediverse</guid>
      <pubDate>2025-05-09 22:20 -05:00</pubDate>
      <category>discourse</category>
      <category>fediverse</category>
      <category>social</category>
      <category>openweb</category>
      <category>opensource</category>
      <category>forum</category>
    </item>
    <item>
      <title>socialweb.network</title>
      <description>&lt;![CDATA[[reshare] &lt;blockquote class="blockquote"&gt;
&lt;p&gt;Your gateway to decentralized social networking protocols, resources, and community&lt;/p&gt;
&lt;/blockquote&gt;
]]&gt;</description>
      <link>https://www.lqdev.me/responses/socialweb-network</link>
      <guid>https://www.lqdev.me/responses/socialweb-network</guid>
      <pubDate>2025-05-09 20:49 -05:00</pubDate>
      <category>fediverse</category>
      <category>social</category>
      <category>openweb</category>
      <category>decentralized</category>
      <category>community</category>
      <category>indieweb</category>
    </item>
    <item>
      <title>Fediverse House 2025 Roundup</title>
      <description>&lt;![CDATA[[star] &lt;blockquote class="blockquote"&gt;
&lt;p&gt;No Walls, Just Vibes at SXSW’s Fediverse House&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote class="blockquote"&gt;
&lt;p&gt;Fediverse House was SXSW’s first physical gathering dedicated entirely to the constellation of interoperable social platforms powered by protocols like ActivityPub and AT Protocol. (We know “Fediverse” isn’t quite accurate to describe the whole ecosystem; in this case, it was just a convenient, fun way to name the space.)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote class="blockquote"&gt;
&lt;p&gt;It didn’t matter which platform you preferred or which protocol you were building on; everyone was focused on the singular goal of building a better internet.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote class="blockquote"&gt;
&lt;p&gt;...the real power move for creators is ownership and control of their work and livelihoods.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote class="blockquote"&gt;
&lt;p&gt;...identity portability is a radical shift, and...decentralization could lead to more humane social spaces.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dot-social.simplecast.com/"&gt;DotSocial Podcast&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://flipboard.video/c/fediverse.house/videos"&gt;Fediverse House PeerTube Channel&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
]]&gt;</description>
      <link>https://www.lqdev.me/responses/fediverse-house-2025-roundup</link>
      <guid>https://www.lqdev.me/responses/fediverse-house-2025-roundup</guid>
      <pubDate>2025-05-09 20:36 -05:00</pubDate>
      <category>fediverse</category>
      <category>conference</category>
      <category>indieweb</category>
      <category>openweb</category>
    </item>
    <item>
      <title>Gen Z Leading Tumblr Revival</title>
      <description>&lt;![CDATA[[reshare] &lt;blockquote class="blockquote"&gt;
&lt;p&gt;Thanks to Gen Z, the site has found new life. As of 2025, Gen Z makes up 50% of Tumblr’s active monthly users and accounts for 60% of new sign-ups&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Don't call it a comeback.&lt;/p&gt;
&lt;blockquote class="blockquote"&gt;
&lt;p&gt;User numbers spiked in January during the near-ban of TikTok and jumped again last year when Brazil temporarily banned X.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote class="blockquote"&gt;
&lt;p&gt;To keep up with the momentum, Tumblr introduced Reddit-style Communities in December, letting users connect over shared interests like photography and video games. In January, it debuted Tumblr TV—a TikTok-like feature that serves as both a GIF search engine and a short-form video platform.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote class="blockquote"&gt;
&lt;p&gt;But perhaps Tumblr’s greatest strength is that it isn’t TikTok or Facebook.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote class="blockquote"&gt;
&lt;p&gt;For its users...that’s part of the appeal.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Tumblr's been through a rough ride, but at the core there's a lot of nice things to like about it. In previous posts, I talked about some opportunities for Tumblr as a result of &lt;a href="https://www.lqdev.me/responses/shipping-wordpress-tumblr/"&gt;replatforming on top of WordPress&lt;/a&gt; and its expressed intent for &lt;a href="https://www.lqdev.me/responses/tumblr-still-working-fediverse-integration/"&gt;ActivityPub integration&lt;/a&gt;. In doing so, not only would it enable an intuitive front-end for publishing different kinds of posts, but it would also provide opportunities for self-hosting and a more federated and decentralized social platform.&lt;/p&gt;
&lt;p&gt;I'm excited to see where this goes.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.businessinsider.com/gen-z-flocking-tumblr-millennials-musk-zuckerberg-safe-space-2025-4"&gt;Related post from Business Insider's Amanda Hoover&lt;/a&gt; on the topic.&lt;/p&gt;
]]&gt;</description>
      <link>https://www.lqdev.me/responses/gen-z-tumblr-revival</link>
      <guid>https://www.lqdev.me/responses/gen-z-tumblr-revival</guid>
      <pubDate>2025-04-08 06:05 -05:00</pubDate>
      <category>tumblr</category>
      <category>automattic</category>
      <category>socialmedia</category>
      <category>genz</category>
      <category>activitypub</category>
      <category>fediverse</category>
    </item>
    <item>
      <title>Bringing Static Sites to the Fediverse - Enhancements and Implementations</title>
      <description>&lt;![CDATA[[reshare] &lt;p&gt;Awesome post from my friend &lt;a href="https://maho.dev/"&gt;maho.dev&lt;/a&gt;&lt;/p&gt;
&lt;blockquote class="blockquote"&gt;
&lt;p&gt;I’ve introduced customizable templates for note generation. This enhancement allows the full content of a blog post to be included directly in ActivityPub notes, moving beyond mere link sharing—a practice often associated with bots—and leveraging the full potential of the Fediverse.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is cool. I'd like something better for my POSSE setup. Might give this a try.&lt;/p&gt;
]]&gt;</description>
      <link>https://www.lqdev.me/responses/bringing-static-sites-fediverse-enhancements-implementations-maho</link>
      <guid>https://www.lqdev.me/responses/bringing-static-sites-fediverse-enhancements-implementations-maho</guid>
      <pubDate>2025-03-18 21:08 -05:00</pubDate>
      <category>fediverse</category>
      <category>indieweb</category>
      <category>activitypub</category>
    </item>
    <item>
      <title>A Guide to Implementing ActivityPub in a Static Site (or Any Website) - Part 8</title>
      <description>&lt;![CDATA[[reshare] &lt;p&gt;Part 8 of &lt;a href="https://www.maho.dev/2024/02/a-guide-to-implement-activitypub-in-a-static-site-or-any-website/"&gt;&amp;quot;A guide to implement ActivityPub in a static site (or any website)&amp;quot;&lt;/a&gt; by &lt;a href="https://www.maho.dev/"&gt;maho.dev&lt;/a&gt; recently dropped.&lt;/p&gt;
&lt;p&gt;This part goes over how to add replies and comments to your static site.&lt;/p&gt;
]]&gt;</description>
      <link>https://www.lqdev.me/responses/guide-implementing-activitypub-static-site-pt-8</link>
      <guid>https://www.lqdev.me/responses/guide-implementing-activitypub-static-site-pt-8</guid>
      <pubDate>2025-02-02 18:23 -05:00</pubDate>
      <category>fediverse</category>
      <category>indieweb</category>
      <category>activitypub</category>
      <category>personalweb</category>
      <category>internet</category>
      <category>opensource</category>
    </item>
    <item>
      <title>Simulcasting to Owncast and YouTube</title>
      <description>&lt;![CDATA[&lt;p&gt;About a week ago, I was telling &lt;a href="https://maho.dev/"&gt;maho.dev&lt;/a&gt; about Owncast and my &lt;a href="https://www.lqdev.me/posts/deploy-owncast-azure"&gt;self-hosted setup&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;During our chat, the question of simulcasting came up.&lt;/p&gt;
&lt;p&gt;Using the &lt;a href="https://obsproject.com/forum/resources/obs-studio-stream-to-multiple-platforms-or-channels-at-once.932/"&gt;guidance from the OBS community&lt;/a&gt; as a starting point, I decided to try it out for myself.&lt;/p&gt;
&lt;p&gt;It didn't work as-is but after using an AI assistant to help me tweak the ffmpeg command, I was able to get it working.&lt;/p&gt;
&lt;p&gt;I posted the command to my &lt;a href="https://www.lqdev.me/resources/wiki/owncast"&gt;Wiki&lt;/a&gt; and plan on writing a more detailed post at a later time.&lt;/p&gt;
]]&gt;</description>
      <link>https://www.lqdev.me/notes/owncast-simulcast-youtube</link>
      <guid>https://www.lqdev.me/notes/owncast-simulcast-youtube</guid>
      <pubDate>2025-01-30 20:25 -05:00</pubDate>
      <category>owncast</category>
      <category>obs</category>
      <category>youtube</category>
      <category>livestream</category>
      <category>fediverse</category>
      <category>opensource</category>
    </item>
    <item>
      <title>Owncast</title>
      <description>&lt;![CDATA[&lt;h2&gt;Overview&lt;/h2&gt;
&lt;p&gt;Owncast is a free and open source live video and web chat server for use with existing popular broadcasting software.&lt;/p&gt;
&lt;h2&gt;Simulcast&lt;/h2&gt;
&lt;p&gt;By default, when you set up streaming software, it will only stream to your Owncast instance. If you want to simultaneously broadcast to various services, you'll have to either use something like Restream or you can also use FFMPEG.&lt;/p&gt;
&lt;h3&gt;YouTube&lt;/h3&gt;
&lt;p&gt;With your brodcast stream started, use the following FFMPEG command to simulcast to YouTube.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;ffmpeg -v verbose -re -i https://YOUR-OWNCAST-SERVER/hls/stream.m3u8 -c:v libx264 -c:a aac -f flv rtmp://a.rtmp.youtube.com/live2/YOUR-STREAM-KEY
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This command will copy the video and audio feeds from your HLS Owncast live stream and forward them to YouTube.&lt;/p&gt;
&lt;h2&gt;Ressources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://owncast.online/"&gt;Owncast&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://obsproject.com/forum/resources/obs-studio-stream-to-multiple-platforms-or-channels-at-once.932/"&gt;OBS Studio: Stream to multiple platforms or channels at once&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
]]&gt;</description>
      <link>https://www.lqdev.me/resources/wiki/owncast</link>
      <guid>https://www.lqdev.me/resources/wiki/owncast</guid>
      <pubDate>01/30/2025 20:19 -05:00</pubDate>
      <category>owncast</category>
      <category>fediverse</category>
      <category>livestream</category>
    </item>
    <item>
      <title>First live stream using Owncast done</title>
      <description>&lt;![CDATA[&lt;p&gt;Earlier today I tested out my &lt;a href="https://www.lqdev.me/posts/deploy-owncast-azure/"&gt;self-hosted Owncast setup&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=3opjC7fEAJs" title="Video Thumbnail from live stream"&gt;&lt;img src="http://img.youtube.com/vi/3opjC7fEAJs/0.jpg" class="img-fluid" alt="Video Thumbnail from live stream" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Overall, I think it went well considering I was using the built-in camera and mic on my laptop. Despite sharing my screen, using the browser, broadcasting and recording the stream, the laptop seemed to handle it just fine. I didn't get a chance to test writing and running code which is going to make up a bulk of the content on stream.&lt;/p&gt;
&lt;p&gt;The flow on OBS is straightforward and simple. I might automate it either using my Stream Deck or just mapping hotkeys. It's simple enough that I only need to transition between a few scenes.&lt;/p&gt;
&lt;p&gt;As far as hosting the recordings, the process of uploading to YouTube was straightforward. It took a little over 10 minutes, but that's something that I can just do in the background so not really worried about that. For the time being, I think I'll just use YouTube to host the videos and mark them as unlisted. No particular reason behind that other than I only want YouTube to serve as my video host. The main place I plan on showcasing and organizing videos is on my website.&lt;/p&gt;
&lt;p&gt;For the time being, I'll just create notes like these. Eventually though, I'd like to have a video post type which shows up on my feed. The post card will only display the video but the detailed view, I'd like for it to be like my &lt;a href="https://www.lqdev.me/resources/presentations/hello-world"&gt;presentation pages&lt;/a&gt;. Except, instead of a presentation, it'd contain the video, show notes, maybe the transcript, and links mentioned during the stream. Also, I'd like video posts to have their own RSS feed just like other posts on this page so folks who are interested in following along can via their RSS reader.&lt;/p&gt;
&lt;p&gt;A few other things I want to figure out are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Setting up a custom domain that points to my Owncast server rather than the default one provided by Azure Container Apps.&lt;/li&gt;
&lt;li&gt;Displaying and managing chat outside of the built-in Owncast frontend.&lt;/li&gt;
&lt;/ul&gt;
]]&gt;</description>
      <link>https://www.lqdev.me/notes/first-owncast-stream</link>
      <guid>https://www.lqdev.me/notes/first-owncast-stream</guid>
      <pubDate>2025-01-20 18:33 -05:00</pubDate>
      <category>owncast</category>
      <category>livestream</category>
      <category>selfhost</category>
      <category>opensource</category>
      <category>fediverse</category>
      <category>video</category>
      <category>azure</category>
    </item>
    <item>
      <title>Embedded Owncast live stream into my website</title>
      <description>&lt;![CDATA[&lt;p&gt;The live stream page on my site is up.&lt;/p&gt;
&lt;p&gt;If you go to &lt;a href="https://www.lqdev.me/live"&gt;/live&lt;/a&gt;, you'll see the stream.&lt;/p&gt;
&lt;p&gt;Still not sure what stream schedule will look like, but I'm thinking maybe I'll do a test one on Monday.&lt;/p&gt;
]]&gt;</description>
      <link>https://www.lqdev.me/notes/created-owncast-livestream-page</link>
      <guid>https://www.lqdev.me/notes/created-owncast-livestream-page</guid>
      <pubDate>2025-01-18 19:20 -05:00</pubDate>
      <category>owncast</category>
      <category>indieweb</category>
      <category>livestream</category>
      <category>fediverse</category>
      <category>opensource</category>
      <category>website</category>
    </item>
    <item>
      <title>Deploy your own Owncast server</title>
      <description>&lt;![CDATA[
I'm a fan of learning in public. One way I do that is writing these types of posts. Another is live-streaming. It's been about four years since the last time I streamed. You can check out some of those recordings on my [YouTube channel](/youtube) if you're interested.

Lately, I've been wanting to get back into live-streaming, but like many parts of my digital presence, it's an area I want ownership over. That means, I don't want to use Twitch, YouTube, Kick, or any other streaming platform. I want to self-host my own livestream server. 

For years, I've been following [Owncast](https://owncast.online/). I'm a big fan. Aside from being open-source and allowing me to self-host, it has [Fediverse](https://owncast.online/docs/social/) and [IndieAuth](https://owncast.online/docs/chat/chat-authentication/#indieauth) integrations.

Because I don't plan to monetize my streams, I want to make sure I keep my costs down. Owncast offers a container deployment option. That means, I can deploy my application to [Azure Container Apps](https://learn.microsoft.com/azure/container-apps/overview) using a [consumption plan](https://learn.microsoft.com/azure/container-apps/plans#consumption). By doing so, I only pay for compute and networking when I'm streaming. The rest of the time, I can scale down the application to zero and I'm not charged for it. 

In this post, I'll go over how to set up a self-hosted Owncast instance on Azure Container Apps and once deployed, how to configure it with [OBS](https://obsproject.com/). 

## Deploy owncast server

The deployment is fairly straightforward. You can use the ["Provide a virtual network to an Azure Container Apps environment"](https://learn.microsoft.com/azure/container-apps/vnet-custom?tabs=bash&amp;pivots=azure-portal) tutorial. I'd recommend going through the portal if you don't want to install the Azure CLI or are not comfortable with the command line. 

The few configurations that tutorial doesn't guide you through is setting up your container and ingress since those are application specific. 

After you configure your environment and virtual network in the *Basics* tab, continue your setup using the steps below. 

### Container

To set up Owncast, you can use the [public docker image](https://hub.docker.com/r/owncast/owncast/tags).

When you get to the *Container* tab in the setup process, fill in the fields with the following values:

| Field | Value |
| --- | --- |
| Name | Enter a name for your container |
| Image source | Docker Hub or other registies |
| Image type | Public |
| Registry login server | docker.io |
| Image and tag | owncast/owncast:latest |
| Command override | You can leave this blank |
| Arguments override | You can leave this blank |
| Deployment stack | Generic |
| Workload profile | Consumption |
| CPU and Memory | 2 CPU Cores, 4Gi Memory |

### Ingress 

By setting up ingress on your deployment, you'll expose the ports Owncast listens on. 

The reason you need a virtual network is because Owncast listens on two ports:

- **8080** - The web application and admin portal
- **1935** - The RMTP server used for streaming

By default, Azure Container Apps only allows you to expose one port. For more details, see the [Azure Container Apps documentation](https://learn.microsoft.com/azure/container-apps/ingress-overview#additional-tcp-ports). 

In the *Ingress* tab, check the box that says **Enabled**.

Then, fill in the fields with the following values:

| Field | Value |
| --- | --- |
| Ingress traffic | Accepting traffic from anywhere |
| Ingress type | HTTP |
| Transport | Auto |
| Insecure connections | Leave unchecked |
| Target port | 8080 |
| Session affinity | Leave unchecked | 

Expand the Additional TCP ports section and configure the RMTP port

| Field | Value |
| --- | --- |
| Target port | 1935 |
| Exposed port | 1935 |
| Ingress traffic | Accepting traffic from anywhere |

Once you've configured ingress, you can select on **Review + create**.

Review your configurations in the *Review + create* tab. If everything looks good, select **Create**. 

## **IMPORTANT** Change admin password

Once your application deploys, make sure to change your admin password. 

1. In the portal, go to your container app resource and copy your application URL.

    ![Screenshot of Azure Container Apps resource in Azure Portal highlighting Application URL](http://cdn.lqdev.tech/files/images/portal-container-resource.png)

    Make sure to keek your application URL around since you'll also be using it when configuring OBS. 

1. Access the admin portal at the following URL - `&lt;YOUR-APPLICATION-URL&gt;/admin`. Replace `&lt;YOUR-APPLICATION-URL&gt;` with your application URL.
1. Log in with the default credentials.

| Field | Value |
| Username | admin |
| Password | abc123 |

1. In the Owncast admin portal, select **Configuration &gt; Server Setup**
1. Change your admin password.

For more details, see the [Owncast documentation](https://owncast.online/docs/configuration/). 

## Create stream key

Once you've changed your admin password, create a stream key. This will enable you to log into your server through OBS and begin streaming. 

1. In the Owncast admin portal, select **Configuration &gt; Server Setup**
1. Select the **Stream Keys** tab.
1. Copy the default stream key or create a new one.

## Configure OBS

Now that everything is configured, it's time to set up OBS. 

To do so, [follow the guidance in the Owncast documentattion](https://owncast.online/docs/broadcasting/obs/).

Replace the server address with your application URL and use the stream key you copied or created. Note that the protocol is not `http` or `https`. **Use `rmtp`**.

That's it! If everything is configured correctly, you should be able to select **Start Streaming** in OBS. 

Go to your Owncast instance using your application URL and in a few seconds, your broadcast should start. 

## Conclusion

I want to end by thanking the Owncast contributors and community for making self-hosting a live-streaming server so easy. 

My plan in the next couple of weeks is to:

1. Embed my stream on my website. Most likely, I'll make it a dedicated page. Something like `lqdev.me/live` or something like that.
1. Do a few pilot streams to make sure my stream quality and configurations are all set up correctly.
1. Evaluate what the costs are for this solution and whethere it's sustainable.

If all goes as expected, I'll start streaming more regularly. As mentioned, I want to keep my costs down and video hosting is expensive, so I'll use YouTube to post recordings. I'll also keep backups though in case any of those videos get taken down, I can always have a local copy still available. ]]&gt;</description>
      <link>https://www.lqdev.me/posts/deploy-owncast-azure</link>
      <guid>https://www.lqdev.me/posts/deploy-owncast-azure</guid>
      <pubDate>2025-01-09 20:47 -05:00</pubDate>
      <category>owncast</category>
      <category>azure</category>
      <category>selfhost</category>
      <category>fediverse</category>
      <category>obs</category>
      <category>livestream</category>
    </item>
    <item>
      <title>Got an Owncast instance deployed to Azure!</title>
      <description>&lt;![CDATA[&lt;p&gt;A few months ago, I started tinkering with Owncast. In that case, I was figuring out how I could use .NET Aspire and Blazor to &lt;a href="https://www.lqdev.me/posts/build-your-own-live-streaming-app-owncast-dotnet-aspire/"&gt;configure an Owncast server and embed the stream on a website&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Although I didn't go all the way through creating the deployment, doing so with &lt;a href="https://learn.microsoft.com/dotnet/aspire/deployment/azure/aca-deployment"&gt;Aspire would've been fairly straightforward&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Since I already have a website, all I care about deploying is the Owncast server.&lt;/p&gt;
&lt;p&gt;After spending about an hour on it today, I was able deploy and Owncast server to Azure Container Apps using the &lt;a href="https://learn.microsoft.com/en-us/azure/container-apps/vnet-custom?tabs=bash&amp;amp;pivots=azure-portal"&gt;virtual network environment setup tutorial&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The hardest part was figuring out that I needed to set up a virtual network in order to publicly expose multiple ports.&lt;/p&gt;
&lt;p&gt;Once the server was up and running, configuring OBS was relatively easy as well.&lt;/p&gt;
&lt;p&gt;&lt;img src="http://cdn.lqdev.tech/files/images/owncast-obs-azure-container-apps-deployment.png" class="img-fluid" alt="AI Generated image of two aliens enjoying a beer in the middle of the desert by a campfire on a starry night" /&gt;&lt;/p&gt;
&lt;p&gt;I'll try to put together a more detailed writeup so I remember what I did for next time as well as help others who may be interested in self-hosting their own livestream server.&lt;/p&gt;
]]&gt;</description>
      <link>https://www.lqdev.me/notes/owncast-azure-container-apps-deployment</link>
      <guid>https://www.lqdev.me/notes/owncast-azure-container-apps-deployment</guid>
      <pubDate>2025-01-07 19:52 -05:00</pubDate>
      <category>owncast</category>
      <category>livestream</category>
      <category>azure</category>
      <category>selfhost</category>
      <category>fediverse</category>
      <category>obs</category>
      <category>containers</category>
      <category>aca</category>
    </item>
  </channel>
</rss>