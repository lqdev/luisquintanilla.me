<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>Luis Quintanilla - Snippets</title>
    <link>https://www.lqdev.me/resources/snippets</link>
    <description>Code snippets by Luis Quintanilla</description>
    <lastBuildDate>2025-08-14 13:35 -05:00</lastBuildDate>
    <language>en</language>
    <item>
      <title>Deploy Owncast to Azure Container Apps with Persistent Storage</title>
      <description>&lt;![CDATA[&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;This guide shows how to deploy Owncast to Azure Container Apps with persistent storage, scale-to-zero capability, and proper SQLite compatibility to minimize costs while ensuring reliable operation.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Key Features:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ultra-cost-optimized configuration (~$0.60/month for 4 hours of streaming)&lt;/li&gt;
&lt;li&gt;Full data persistence (users, chat, federation, configuration)&lt;/li&gt;
&lt;li&gt;Scale-to-zero capability when not streaming&lt;/li&gt;
&lt;li&gt;SQLite + Azure Files compatibility fixes&lt;/li&gt;
&lt;li&gt;RTMP + HTTP dual-port configuration for OBS Studio&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Prerequisites&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Azure CLI installed and logged in&lt;/li&gt;
&lt;li&gt;An Azure subscription&lt;/li&gt;
&lt;li&gt;A resource group created&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Step 1: Create Required Resources&lt;/h2&gt;
&lt;h3&gt;Create Storage Account for Persistent Data&lt;/h3&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;# Set variables (choose cheapest regions)
RESOURCE_GROUP=&amp;quot;your-resource-group&amp;quot;
LOCATION=&amp;quot;centralus&amp;quot;  # Often cheaper than eastus
STORAGE_ACCOUNT=&amp;quot;owncaststorage$(date +%s)&amp;quot;  # Must be globally unique
CONTAINER_APP_ENV=&amp;quot;owncast-env&amp;quot;
CONTAINER_APP_NAME=&amp;quot;owncast-app&amp;quot;

# Create MINIMAL cost storage account
az storage account create \
  --name $STORAGE_ACCOUNT \
  --resource-group $RESOURCE_GROUP \
  --location $LOCATION \
  --sku Standard_LRS \
  --kind StorageV2 \
  --access-tier Cool \
  --allow-blob-public-access false \
  --https-only true \
  --min-tls-version TLS1_2

# Create file share with minimal provisioned size
az storage share create \
  --name &amp;quot;owncast-data&amp;quot; \
  --account-name $STORAGE_ACCOUNT \
  --quota 1  # Start with 1GB, scales automatically
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Create Container Apps Environment&lt;/h3&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;# Create the Container Apps environment
az containerapp env create \
  --name $CONTAINER_APP_ENV \
  --resource-group $RESOURCE_GROUP \
  --location $LOCATION
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Step 2: Configure Storage Mount&lt;/h2&gt;
&lt;p&gt;Get the storage account key and create the storage mount:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;# Get storage account key
STORAGE_KEY=$(az storage account keys list \
  --account-name $STORAGE_ACCOUNT \
  --resource-group $RESOURCE_GROUP \
  --query &amp;quot;[0].value&amp;quot; -o tsv)

# Create storage mount in the environment
az containerapp env storage set \
  --name $CONTAINER_APP_ENV \
  --resource-group $RESOURCE_GROUP \
  --storage-name &amp;quot;owncast-storage&amp;quot; \
  --azure-file-account-name $STORAGE_ACCOUNT \
  --azure-file-account-key $STORAGE_KEY \
  --azure-file-share-name &amp;quot;owncast-data&amp;quot; \
  --access-mode ReadWrite
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Step 3: Deploy Owncast Container App&lt;/h2&gt;
&lt;p&gt;Create the container app with persistent storage:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;az containerapp create \
  --name $CONTAINER_APP_NAME \
  --resource-group $RESOURCE_GROUP \
  --environment $CONTAINER_APP_ENV \
  --image &amp;quot;owncast/owncast:latest&amp;quot; \
  --target-port 8080 \
  --ingress external \
  --min-replicas 0 \
  --max-replicas 1 \
  --cpu 0.5 \
  --memory 1Gi \
  --volume-mount &amp;quot;data:/app/data&amp;quot; \
  --volume-name &amp;quot;data&amp;quot; \
  --volume-storage-name &amp;quot;owncast-storage&amp;quot; \
  --volume-storage-type AzureFile
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Step 4: Configure Dual-Port Ingress (HTTP + RTMP)&lt;/h2&gt;
&lt;p&gt;For Owncast to work properly, you need both HTTP (8080) and RTMP (1935) ports. This requires a &lt;strong&gt;Virtual Network (VNet)&lt;/strong&gt; integration:&lt;/p&gt;
&lt;h3&gt;Create VNet and Subnet&lt;/h3&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;# Create MINIMAL virtual network (smallest possible address space)
az network vnet create \
  --name &amp;quot;owncast-vnet&amp;quot; \
  --resource-group $RESOURCE_GROUP \
  --location $LOCATION \
  --address-prefix &amp;quot;10.0.0.0/24&amp;quot;  # Smaller than default /16

# Create minimal subnet
az network vnet subnet create \
  --name &amp;quot;container-apps-subnet&amp;quot; \
  --resource-group $RESOURCE_GROUP \
  --vnet-name &amp;quot;owncast-vnet&amp;quot; \
  --address-prefix &amp;quot;10.0.0.0/27&amp;quot;  # Only 32 IPs instead of /23 (512 IPs)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Recreate Container Apps Environment with VNet&lt;/h3&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;# Get subnet ID
SUBNET_ID=$(az network vnet subnet show \
  --name &amp;quot;container-apps-subnet&amp;quot; \
  --vnet-name &amp;quot;owncast-vnet&amp;quot; \
  --resource-group $RESOURCE_GROUP \
  --query id -o tsv)

# Delete existing environment and recreate with VNet
az containerapp env delete \
  --name $CONTAINER_APP_ENV \
  --resource-group $RESOURCE_GROUP \
  --yes

# Create Container Apps environment with workload profiles DISABLED (cheapest option)
az containerapp env create \
  --name $CONTAINER_APP_ENV \
  --resource-group $RESOURCE_GROUP \
  --location $LOCATION \
  --infrastructure-subnet-resource-id $SUBNET_ID \
  --enable-workload-profiles false  # Forces consumption-only pricing
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Deploy Container App with MINIMAL Resources&lt;/h3&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;az containerapp create \
  --name $CONTAINER_APP_NAME \
  --resource-group $RESOURCE_GROUP \
  --environment $CONTAINER_APP_ENV \
  --image &amp;quot;owncast/owncast:latest&amp;quot; \
  --target-port 8080 \
  --exposed-port 1935 \
  --ingress external \
  --transport auto \
  --min-replicas 0 \
  --max-replicas 1 \
  --cpu 0.25 \
  --memory 0.5Gi \
  --volume-mount &amp;quot;data:/app/data&amp;quot; \
  --volume-name &amp;quot;data&amp;quot; \
  --volume-storage-name &amp;quot;owncast-storage&amp;quot; \
  --volume-storage-type AzureFile
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Cost-Optimized Resource Allocation:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;CPU&lt;/strong&gt;: 0.25 cores (minimum allowed, sufficient for small streams)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Memory&lt;/strong&gt;: 0.5Gi (minimum allowed, will work for basic streaming)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Scaling&lt;/strong&gt;: Aggressive scale-to-zero with max 1 replica&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Ultra Low-Cost Alternative YAML Configuration&lt;/h2&gt;
&lt;p&gt;For maximum cost optimization, use this YAML approach with the smallest possible resource allocation. This configuration includes critical SQLite compatibility fixes for Azure Files:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-yaml"&gt;# owncast-production-ready.yaml
properties:
  configuration:
    ingress:
      external: true
      targetPort: 8080
      additionalPortMappings:
      - external: true
        targetPort: 1935
        exposedPort: 1935
        transport: tcp
    secrets: []
  template:
    containers:
    - image: owncast/owncast:latest
      name: owncast-app
      resources:
        cpu: 0.25
        memory: 0.5Gi
      volumeMounts:
      - mountPath: /app/data
        volumeName: data
      env:
      - name: OWNCAST_RTMP_PORT
        value: &amp;quot;1935&amp;quot;
      - name: OWNCAST_WEBSERVER_PORT  
        value: &amp;quot;8080&amp;quot;
      - name: OWNCAST_DATABASE_FILE
        value: &amp;quot;/app/data/db/owncast.db&amp;quot;
      - name: OWNCAST_DATABASE_JOURNAL_MODE
        value: &amp;quot;DELETE&amp;quot;
      - name: OWNCAST_LOG_DIRECTORY
        value: &amp;quot;/app/data/logs&amp;quot;
      - name: OWNCAST_DATA_DIRECTORY
        value: &amp;quot;/app/data&amp;quot;
      - name: OWNCAST_HLS_DIRECTORY
        value: &amp;quot;/app/data/hls&amp;quot;
    scale:
      minReplicas: 0
      maxReplicas: 1
      rules:
      - name: &amp;quot;http-rule&amp;quot;
        http:
          metadata:
            concurrentRequests: &amp;quot;10&amp;quot;
    volumes:
    - name: data
      storageType: AzureFile
      storageName: owncast-storage
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Deploy with:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;az containerapp create \
  --name $CONTAINER_APP_NAME \
  --resource-group $RESOURCE_GROUP \
  --yaml owncast-production-ready.yaml
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Critical Configuration Notes&lt;/h2&gt;
&lt;h3&gt;SQLite + Azure Files Compatibility Fix&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt;: The default Owncast configuration can cause &amp;quot;database is locked&amp;quot; errors when using Azure Files storage due to SQLite's WAL (Write-Ahead Logging) mode being incompatible with network file systems. The configuration above includes these critical fixes:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Database Subdirectory&lt;/strong&gt;: &lt;code&gt;OWNCAST_DATABASE_FILE=/app/data/db/owncast.db&lt;/code&gt; - Places database in a subdirectory which improves Azure Files compatibility&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Journal Mode Override&lt;/strong&gt;: &lt;code&gt;OWNCAST_DATABASE_JOURNAL_MODE=DELETE&lt;/code&gt; - Forces SQLite to use DELETE mode instead of WAL mode to prevent file locking issues&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Full Data Mount&lt;/strong&gt;: Mounts entire &lt;code&gt;/app/data&lt;/code&gt; directory for complete persistence of logs, database, and HLS content&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;What Gets Persisted&lt;/h3&gt;
&lt;p&gt;With this configuration, the following data persists across container restarts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;User accounts and chat history&lt;/strong&gt; (critical for community continuity)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Stream keys and admin credentials&lt;/strong&gt; (prevents reconfiguration)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ActivityPub federation data&lt;/strong&gt; (maintains Mastodon/Fediverse followers)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Server customization and branding&lt;/strong&gt; (logos, site name, descriptions)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;API tokens and webhook configurations&lt;/strong&gt; (third-party integrations)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Complete logs and HLS video segments&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Without proper persistence, you would lose all users, followers, and configuration on every container restart.&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;Cost Optimization Features&lt;/h2&gt;
&lt;h3&gt;Scale-to-Zero Configuration&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Min Replicas&lt;/strong&gt;: Set to 0 to completely scale down when not in use&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Max Replicas&lt;/strong&gt;: Set to 1 (Owncast doesn't need horizontal scaling)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Scale Rules&lt;/strong&gt;: Container Apps will automatically scale up when requests arrive&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Resource Limits (Ultra Cost-Optimized)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;CPU&lt;/strong&gt;: 0.25 cores (absolute minimum, sufficient for 1-2 viewer streams)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Memory&lt;/strong&gt;: 0.5Gi (minimum allowed by Azure Container Apps)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Storage&lt;/strong&gt;: Cool tier with 1GB initial quota (auto-scales as needed)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Network&lt;/strong&gt;: Minimal VNet addressing to reduce overhead&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;OBS Configuration&lt;/h2&gt;
&lt;p&gt;After deployment, configure OBS for streaming:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Server Settings&lt;/strong&gt;: Use &lt;code&gt;rtmp://your-app-url:1935/live&lt;/code&gt; (note: &lt;code&gt;rtmp://&lt;/code&gt; not &lt;code&gt;https://&lt;/code&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Stream Key&lt;/strong&gt;: Use the key from Owncast admin panel (Configuration &amp;gt; Server Setup &amp;gt; Stream Keys)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Owncast Web Interface&lt;/strong&gt;: Access at &lt;code&gt;https://your-app-url&lt;/code&gt; (port 8080 is handled automatically by ingress)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Persistent Data&lt;/strong&gt;: All Owncast configuration, database, and uploaded files are stored in Azure Files and persist across container restarts and scale-to-zero events. &lt;strong&gt;Critical&lt;/strong&gt;: Uses SQLite DELETE journal mode to prevent &amp;quot;database is locked&amp;quot; errors with Azure Files.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Cold Start&lt;/strong&gt;: When scaling from zero, there will be a 10-15 second cold start delay as the container initializes. This is normal and acceptable for personal streaming.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;VNet Requirement&lt;/strong&gt;: For dual-port access (HTTP + RTMP), you &lt;strong&gt;must&lt;/strong&gt; use a Virtual Network integration. This is a requirement for exposing additional TCP ports in Azure Container Apps.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Database Compatibility&lt;/strong&gt;: The configuration includes specific environment variables (&lt;code&gt;OWNCAST_DATABASE_JOURNAL_MODE=DELETE&lt;/code&gt;) to ensure SQLite works properly with Azure Files network storage. Without these settings, you'll experience database crashes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Security Configuration&lt;/strong&gt;: After deployment, immediately change the default admin credentials:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Navigate to &lt;code&gt;https://your-app-url/admin&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Default login: &lt;code&gt;admin&lt;/code&gt; / &lt;code&gt;abc123&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Go to Configuration &amp;gt; Server Setup and change the admin password&lt;/li&gt;
&lt;li&gt;Create/copy stream keys from Configuration &amp;gt; Server Setup &amp;gt; Stream Keys tab&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Custom Domain&lt;/strong&gt;: You can configure a custom domain using:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;az containerapp hostname add \
  --name $CONTAINER_APP_NAME \
  --resource-group $RESOURCE_GROUP \
  --hostname &amp;quot;your-domain.com&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;SSL Certificate&lt;/strong&gt;: Azure Container Apps provides automatic SSL certificates for custom domains.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Monitoring and Troubleshooting&lt;/h2&gt;
&lt;p&gt;Check your deployment:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;# Get the URL
az containerapp show \
  --name $CONTAINER_APP_NAME \
  --resource-group $RESOURCE_GROUP \
  --query properties.configuration.ingress.fqdn

# Test RTMP port connectivity (should return TcpTestSucceeded: True)
Test-NetConnection -ComputerName &amp;quot;your-app-url&amp;quot; -Port 1935 -InformationLevel Detailed

# Test web interface
curl -I https://your-app-url/

# View logs
az containerapp logs show \
  --name $CONTAINER_APP_NAME \
  --resource-group $RESOURCE_GROUP
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Common Issues and Solutions&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Problem&lt;/strong&gt;: Container logs show &amp;quot;database is locked&amp;quot; errors and crashes
&lt;strong&gt;Solution&lt;/strong&gt;: Ensure you're using the configuration above with &lt;code&gt;OWNCAST_DATABASE_JOURNAL_MODE=DELETE&lt;/code&gt; and database in a subdirectory&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Problem&lt;/strong&gt;: OBS shows &amp;quot;Failed to connect to server&amp;quot;&lt;br /&gt;
&lt;strong&gt;Solution&lt;/strong&gt;: Verify RTMP port 1935 is accessible using &lt;code&gt;Test-NetConnection&lt;/code&gt; and ensure you're using VNet integration&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Problem&lt;/strong&gt;: Admin panel won't load or shows errors
&lt;strong&gt;Solution&lt;/strong&gt;: Database persistence issues - check that the &lt;code&gt;/app/data&lt;/code&gt; mount is working and SQLite journal mode is set correctly&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Problem&lt;/strong&gt;: Container scales to zero but doesn't start properly
&lt;strong&gt;Solution&lt;/strong&gt;: Cold start delay is normal (10-15 seconds). If it doesn't start, check environment variable configuration&lt;/p&gt;
&lt;h2&gt;Cost Estimation (Ultra-Optimized)&lt;/h2&gt;
&lt;p&gt;With these optimizations, your monthly costs should be:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;When Streaming (4 hours/month example):&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Compute&lt;/strong&gt;: ~$0.50/month (0.25 CPU + 0.5Gi RAM × 4 hours)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Container Apps Environment&lt;/strong&gt;: ~$0.00 (consumption plan, no dedicated resources)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Networking&lt;/strong&gt;: ~$0.05/month (minimal VNet overhead)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;When Idle (Scale-to-Zero):&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Compute&lt;/strong&gt;: $0.00 (scaled to zero)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Environment&lt;/strong&gt;: $0.00 (consumption plan)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Always-On Costs:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Storage&lt;/strong&gt;: ~$0.05-0.10/month (1-2GB in Cool tier)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;VNet&lt;/strong&gt;: ~$0.00 (no gateways or dedicated resources)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Total Monthly Cost: ~$0.60-0.65/month&lt;/strong&gt; (assuming 4 hours of streaming)&lt;/p&gt;
&lt;h3&gt;Performance Expectations at Minimal Resources:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;0.25 CPU + 0.5Gi RAM&lt;/strong&gt;: Suitable for 480p-720p streams with 1-5 concurrent viewers&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Scale-up Path&lt;/strong&gt;: Monitor performance and increase to 0.5 CPU + 1Gi if needed&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cold Start&lt;/strong&gt;: ~10-15 seconds when scaling from zero (acceptable for personal streaming)&lt;/li&gt;
&lt;/ul&gt;
]]&gt;</description>
      <link>https://www.lqdev.me/resources/snippets/owncast-optimized-azure-deployment-guide</link>
      <guid>https://www.lqdev.me/resources/snippets/owncast-optimized-azure-deployment-guide</guid>
      <pubDate>2025-08-14 13:35 -05:00</pubDate>
      <category>owncast</category>
      <category>fediverse</category>
      <category>azure</category>
      <category>livestream</category>
    </item>
    <item>
      <title>Winget Configuration</title>
      <description>&lt;![CDATA[&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;My Winget Configuration file&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;winget configure -f &amp;lt;FILENAME&amp;gt;.dsc
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Snippet&lt;/h2&gt;
&lt;pre&gt;&lt;code class="language-yaml"&gt;# yaml-language-server: $schema=https://aka.ms/configuration-dsc-schema/0.2
# Reference: https://github.com/microsoft/winget-create#building-the-client
# WinGet Configure file Generated By Dev Home.

properties:
  resources:
  - resource: Microsoft.Windows.Developer/DeveloperMode
    directives:
      description: Enable Developer Mode
      allowPrerelease: true
    settings:
      Ensure: Present  
  - resource: Microsoft.WinGet.DSC/WinGetPackage
    directives:
      description: Installing Microsoft.VisualStudio.2022.Community
      allowPrerelease: true
      securityContext: current
    settings:
      id: &amp;quot;Microsoft.VisualStudio.2022.Community&amp;quot;
      source: winget
    id: Microsoft.VisualStudio.2022.Community
  - resource: Microsoft.VisualStudio.DSC/VSComponents
    dependsOn:
      - Microsoft.VisualStudio.2022.Community
    directives:
      description: Install required VS workloads
      allowPrerelease: true
    settings:
      productId: Microsoft.VisualStudio.Product.Community
      channelId: VisualStudio.17.Release
      components:
        - Microsoft.VisualStudio.Workload.Azure
        - Microsoft.VisualStudio.Workload.NetWeb
  - resource: Microsoft.WinGet.DSC/WinGetPackage
    directives:
      description: Installing Microsoft.VisualStudioCode
      allowPrerelease: true
      securityContext: current
    settings:
      id: &amp;quot;Microsoft.VisualStudioCode&amp;quot;
      source: winget
    id: Microsoft.VisualStudioCode
  #   https://github.com/microsoft/winget-cli/discussions/3958
  # - resource: vscode/VSCodeExtension
  #   directives:
  #     description: Install Remote Development Extension
  #     allowPrerelease: true
  #   settings:
  #     Name: ms-vscode-remote.vscode-remote-extensionpack
  #     Ensure: Present
  # - resource: vscode/VSCodeExtension
  #   directives:
  #     description: Install YAML Extension
  #     allowPrerelease: true
  #   settings:
  #     Name: redhat.vscode-yaml
  #     Ensure: Present
  # - resource: vscode/VSCodeExtension
  #   directives:
  #     description: Install Ionide Extension
  #     allowPrerelease: true
  #   settings:
  #     Name: Ionide.Ionide-fsharp
  #     Ensure: Present
  # - resource: vscode/VSCodeExtension
  #   directives:
  #     description: Install C# Extension
  #     allowPrerelease: true
  #   settings:
  #     Name: ms-dotnettools.csdevkit
  #     Ensure: Present      
  - resource: Microsoft.WinGet.DSC/WinGetPackage
    directives:
      description: Installing Git.Git
      allowPrerelease: true
      securityContext: current
    settings:
      id: &amp;quot;Git.Git&amp;quot;
      source: winget
    id: Git.Git
  - resource: Microsoft.WinGet.DSC/WinGetPackage
    directives:
      description: Installing Microsoft.PowerShell
      allowPrerelease: true
      securityContext: current
    settings:
      id: &amp;quot;Microsoft.PowerShell&amp;quot;
      source: winget
    id: Microsoft.PowerShell
  - resource: Microsoft.WinGet.DSC/WinGetPackage
    directives:
      description: Installing Docker.DockerDesktop
      allowPrerelease: true
      securityContext: current
    settings:
      id: &amp;quot;Docker.DockerDesktop&amp;quot;
      source: winget
    id: Docker.DockerDesktop
  - resource: Microsoft.WinGet.DSC/WinGetPackage
    directives:
      description: Installing Debian.Debian
      allowPrerelease: true
      securityContext: current
    settings:
      id: &amp;quot;Debian.Debian&amp;quot;
      source: winget
    id: Debian.Debian
  - resource: Microsoft.WinGet.DSC/WinGetPackage
    directives:
      description: Installing Microsoft.DotNet.SDK.8
      allowPrerelease: true
      securityContext: current
    settings:
      id: &amp;quot;Microsoft.DotNet.SDK.8&amp;quot;
      source: winget
    id: Microsoft.DotNet.SDK.8
  - resource: Microsoft.WinGet.DSC/WinGetPackage
    directives:
      description: Installing Microsoft.DotNet.SDK.9
      allowPrerelease: true
      securityContext: current
    settings:
      id: &amp;quot;Microsoft.DotNet.SDK.9&amp;quot;
      source: winget
    id: Microsoft.DotNet.SDK.9
  - resource: Microsoft.WinGet.DSC/WinGetPackage
    directives:
      description: Installing OBSProject.OBSStudio
      allowPrerelease: true
      securityContext: current
    settings:
      id: &amp;quot;OBSProject.OBSStudio&amp;quot;
      source: winget
    id: OBSProject.OBSStudio
  - resource: Microsoft.WinGet.DSC/WinGetPackage
    directives:
      description: Installing Microsoft.WSL
      allowPrerelease: true
      securityContext: current
    settings:
      id: &amp;quot;Microsoft.WSL&amp;quot;
      source: winget
    id: Microsoft.WSL
  - resource: Microsoft.WinGet.DSC/WinGetPackage
    directives:
      description: Installing Ollama.Ollama
      allowPrerelease: true
      securityContext: current
    settings:
      id: &amp;quot;Ollama.Ollama&amp;quot;
      source: winget
    id: Ollama.Ollama
  - resource: Microsoft.WinGet.DSC/WinGetPackage
    directives:
      description: Installing Microsoft.WindowsTerminal
      allowPrerelease: false
      securityContext: current
    settings:
      id: &amp;quot;Microsoft.WindowsTerminal&amp;quot;
      source: winget
    id: Microsoft.WindowsTerminal
  - resource: Microsoft.WinGet.DSC/WinGetPackage
    directives:
      description: Installing Brave Browser
      allowPrerelease: true
      securityContext: current
    settings:
      id: &amp;quot;Brave.Brave&amp;quot;
      source: winget
    id: Brave.Brave    
  # https://github.com/microsoft/winget-pkgs/issues/155070
  # - resource: Microsoft.WinGet.DSC/WinGetPackage
  #   directives:
  #     description: Installing NordVPN
  #     allowPrerelease: true
  #     securityContext: current
  #   settings:
  #     id: &amp;quot;NordSecurity.NordVPN&amp;quot;
  #     source: winget
  #   id: NordSecurity.NordVPN
  - resource: Microsoft.WinGet.DSC/WinGetPackage
    directives:
      description: Installing Thunderbird
      allowPrerelease: true
      securityContext: current
    settings:
      id: &amp;quot;Mozilla.Thunderbird&amp;quot;
      source: winget
    id: Mozilla.Thunderbird  
  - resource: Microsoft.WinGet.DSC/WinGetPackage
    directives:
      description: Installing ProtonMail
      allowPrerelease: true
      securityContext: current
    settings:
      id: &amp;quot;Proton.ProtonMail&amp;quot;
      source: winget
    id: Proton.ProtonMail     
  - resource: Microsoft.WinGet.DSC/WinGetPackage
    directives:
      description: Installing Bitwarden
      allowPrerelease: true
      securityContext: current
    settings:
      id: &amp;quot;Bitwarden.Bitwarden&amp;quot;
      source: winget
    id: Bitwarden.Bitwarden    
  - resource: Microsoft.WinGet.DSC/WinGetPackage
    directives:
      description: Installing VLC
      allowPrerelease: true
      securityContext: current
    settings:
      id: &amp;quot;VideoLAN.VLC&amp;quot;
      source: winget
    id: VideoLAN.VLC        
  configurationVersion: 0.2.0
&lt;/code&gt;&lt;/pre&gt;
]]&gt;</description>
      <link>https://www.lqdev.me/resources/snippets/winget-config</link>
      <guid>https://www.lqdev.me/resources/snippets/winget-config</guid>
      <pubDate>01/14/2025 20:51 -05:00</pubDate>
      <category>windows</category>
      <category>powershell</category>
      <category>yaml</category>
    </item>
    <item>
      <title>Remove all installed Python packages with pip</title>
      <description>&lt;![CDATA[&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;I recently had the need to get rid of all the packages I'd installed due to conflicting dependencies.&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;To uninstall packages you need to:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Get a list of the packages&lt;/li&gt;
&lt;li&gt;Uninstall them&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This works both for virtual environments as well as system-wide installations.&lt;/p&gt;
&lt;h3&gt;Get all packages&lt;/h3&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;pip freeze &amp;gt; requirements.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Uninstall packages&lt;/h3&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;pip uninstall -r requirements.txt -y
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Snippet&lt;/h2&gt;
&lt;p&gt;N/A&lt;/p&gt;
]]&gt;</description>
      <link>https://www.lqdev.me/resources/snippets/remove-installed-pip-packages</link>
      <guid>https://www.lqdev.me/resources/snippets/remove-installed-pip-packages</guid>
      <pubDate>08/08/2024 10:26 -05:00</pubDate>
      <category>python</category>
      <category>pip</category>
      <category>packages</category>
    </item>
    <item>
      <title>lqdev.me Post Metrics</title>
      <description>&lt;![CDATA[&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;Generates an aggregate analysis of posts on &lt;a href="https://www.lqdev.me"&gt;lqdev.me / luisquintanilla.me&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;dotnet fsi stats.fsx 
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Snippet&lt;/h2&gt;
&lt;h3&gt;stats.fsx&lt;/h3&gt;
&lt;pre&gt;&lt;code class="language-fsharp"&gt;// Reference DLL
#r &amp;quot;../bin/Debug/net8.0/PersonalSite.dll&amp;quot;

// Add modules
open Domain
open Builder
open System

// Load posts
let posts = loadPosts()
let notes = loadFeed ()
let responses = loadReponses ()

// Organize posts by year
let postCountsByYear = 
    posts
    |&amp;gt; Array.countBy (fun (x:Post) -&amp;gt; DateTime.Parse(x.Metadata.Date) |&amp;gt; _.Year)
    |&amp;gt; Array.sortByDescending fst 

let noteCountsByYear = 
    notes
    |&amp;gt; Array.countBy (fun (x:Post) -&amp;gt; DateTime.Parse(x.Metadata.Date) |&amp;gt; _.Year)
    |&amp;gt; Array.sortByDescending fst

let responseCountsByYear = 
    responses
    |&amp;gt; Array.countBy (fun (x:Response) -&amp;gt; DateTime.Parse(x.Metadata.DatePublished) |&amp;gt; _.Year)
    |&amp;gt; Array.sortByDescending fst

// Organize responses by type
let responsesByType = 
    responses
    |&amp;gt; Array.filter(fun x -&amp;gt; (DateTime.Parse(x.Metadata.DatePublished) |&amp;gt; _.Year) = DateTime.UtcNow.Year)
    |&amp;gt; Array.countBy(fun x -&amp;gt; x.Metadata.ResponseType)
    |&amp;gt; Array.sortByDescending(snd)

// Organize responses by tag
let responsesByTag = 
    responses
    |&amp;gt; Array.filter(fun x -&amp;gt; (DateTime.Parse(x.Metadata.DatePublished) |&amp;gt; _.Year) = DateTime.UtcNow.Year)
    |&amp;gt; Array.collect(fun x -&amp;gt; 
            match x.Metadata.Tags with
            | null -&amp;gt; [|&amp;quot;untagged&amp;quot;|]
            | [||] -&amp;gt; [|&amp;quot;untagged&amp;quot;|]
            | _ -&amp;gt; x.Metadata.Tags
        )
    |&amp;gt; Array.countBy(fun x -&amp;gt; x)
    |&amp;gt; Array.sortByDescending(snd)

// Organize responses by host name (domain)
let responsesByDomain = 
    responses
    |&amp;gt; Array.filter(fun x -&amp;gt; (DateTime.Parse(x.Metadata.DatePublished) |&amp;gt; _.Year) = DateTime.UtcNow.Year)
    |&amp;gt; Array.countBy(fun x -&amp;gt; Uri(x.Metadata.TargetUrl).Host)
    |&amp;gt; Array.sortByDescending(snd)

// Utility function to display counts
let printEntryCounts&amp;lt;'a&amp;gt; (title:string) (entryCounts:('a * int) array) (n:int) = 
    printfn $&amp;quot;{title}&amp;quot;

    match entryCounts.Length with
    | 0 -&amp;gt; 
        printfn $&amp;quot;No entries&amp;quot;
        printfn $&amp;quot;&amp;quot;
    | a when a &amp;gt; 0 -&amp;gt; 
        match n with 
        | n when n = -1 || n &amp;gt; entryCounts.Length -&amp;gt; 
            entryCounts
            |&amp;gt; Array.iter(fun x -&amp;gt; printfn $&amp;quot;{fst x} {snd x}&amp;quot;)
            |&amp;gt; fun _ -&amp;gt; printfn $&amp;quot;&amp;quot;
        | n when n &amp;gt; 0 -&amp;gt; 
            entryCounts
            |&amp;gt; Array.take n
            |&amp;gt; Array.iter(fun x -&amp;gt; printfn $&amp;quot;{fst x} {snd x}&amp;quot;)
            |&amp;gt; fun _ -&amp;gt; printfn $&amp;quot;&amp;quot;

// Print yearly counts
printEntryCounts &amp;quot;Blogs&amp;quot; postCountsByYear 2

printEntryCounts &amp;quot;Notes&amp;quot; noteCountsByYear 2

printEntryCounts &amp;quot;Responses&amp;quot; responseCountsByYear 2

// Print response types
printEntryCounts &amp;quot;Response Types&amp;quot; responsesByType -1

// Print response tag counts
printEntryCounts &amp;quot;Response Tags&amp;quot; responsesByTag 5

// Print response by host name
printEntryCounts &amp;quot;Domains&amp;quot; responsesByDomain 5
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Expected Output&lt;/h2&gt;
&lt;pre&gt;&lt;code class="language-text"&gt;Blogs
2023 5
2022 7

Notes
2023 34
2022 36

Responses
2023 216
2022 146

Response Types
bookmark 151
reshare 48
reply 10
star 7

Response Tags
ai 104
llm 42
untagged 41
opensource 31
internet 17

Domains
github.com 15
huggingface.co 11
arxiv.org 10
openai.com 6
www.theverge.com 4
&lt;/code&gt;&lt;/pre&gt;
]]&gt;</description>
      <link>https://www.lqdev.me/resources/snippets/lqdev-me-website-post-metrics</link>
      <guid>https://www.lqdev.me/resources/snippets/lqdev-me-website-post-metrics</guid>
      <pubDate>12/23/2023 13:13 -05:00</pubDate>
      <category>analytics</category>
      <category>website</category>
      <category>blog</category>
      <category>blogging</category>
      <category>pkm</category>
      <category>indieweb</category>
      <category>dotnet</category>
      <category>windows</category>
      <category>linux</category>
      <category>mac</category>
    </item>
    <item>
      <title>NixOS Configuration</title>
      <description>&lt;![CDATA[&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;This is my NixOS Configuration file&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Update configuration file&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Run the following command to apply changes&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;sudo nixos-rebuild switch
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Snippet&lt;/h2&gt;
&lt;pre&gt;&lt;code class="language-nix"&gt;# Edit this configuration file to define what should be installed on
# your system.  Help is available in the configuration.nix(5) man page
# and in the NixOS manual (accessible by running ‘nixos-help’).

{ config, pkgs, ... }:

{
  imports =
    [ # Include the results of the hardware scan.
      ./hardware-configuration.nix
    ];

  # Bootloader.
  boot.loader.systemd-boot.enable = true;
  boot.loader.efi.canTouchEfiVariables = true;

  networking.hostName = &amp;quot;nixos&amp;quot;; # Define your hostname.
  # networking.wireless.enable = true;  # Enables wireless support via wpa_supplicant.

  # Configure network proxy if necessary
  # networking.proxy.default = &amp;quot;http://user:password@proxy:port/&amp;quot;;
  # networking.proxy.noProxy = &amp;quot;127.0.0.1,localhost,internal.domain&amp;quot;;

  # Enable networking
  networking.networkmanager.enable = true;

  # Set your time zone.
  time.timeZone = &amp;quot;America/New_York&amp;quot;;

  # Select internationalisation properties.
  i18n.defaultLocale = &amp;quot;en_US.UTF-8&amp;quot;;

  i18n.extraLocaleSettings = {
    LC_ADDRESS = &amp;quot;en_US.UTF-8&amp;quot;;
    LC_IDENTIFICATION = &amp;quot;en_US.UTF-8&amp;quot;;
    LC_MEASUREMENT = &amp;quot;en_US.UTF-8&amp;quot;;
    LC_MONETARY = &amp;quot;en_US.UTF-8&amp;quot;;
    LC_NAME = &amp;quot;en_US.UTF-8&amp;quot;;
    LC_NUMERIC = &amp;quot;en_US.UTF-8&amp;quot;;
    LC_PAPER = &amp;quot;en_US.UTF-8&amp;quot;;
    LC_TELEPHONE = &amp;quot;en_US.UTF-8&amp;quot;;
    LC_TIME = &amp;quot;en_US.UTF-8&amp;quot;;
  };

  # Enable the X11 windowing system.
  # services.xserver.enable = true;
  services.xserver = {
    enable = true;

    desktopManager = {
      xterm.enable = false;
    };

    displayManager = {
      defaultSession = &amp;quot;none+i3&amp;quot;;
    };

    windowManager.i3 = {
       enable = true;
       extraPackages = with pkgs; [
         dmenu
	 i3status
         j4-dmenu-desktop
	 i3lock	
       ];
    };
  };

  # Enable the XFCE Desktop Environment.
  # services.xserver.displayManager.lightdm.enable = true;
  # services.xserver.desktopManager.xfce.enable = true;

  # Configure keymap in X11
  services.xserver = {
    layout = &amp;quot;us&amp;quot;;
    xkbVariant = &amp;quot;&amp;quot;;
  };

  # Enable CUPS to print documents.
  services.printing.enable = true;

  # Enable sound with pipewire.
  sound.enable = true;
  hardware.pulseaudio.enable = false;
  security.rtkit.enable = true;
  services.pipewire = {
    enable = true;
    alsa.enable = true;
    alsa.support32Bit = true;
    pulse.enable = true;
    # If you want to use JACK applications, uncomment this
    #jack.enable = true;

    # use the example session manager (no others are packaged yet so this is enabled by default,
    # no need to redefine it in your config for now)
    #media-session.enable = true;
  };

  # Enable touchpad support (enabled default in most desktopManager).
  # services.xserver.libinput.enable = true;

  # Enable gvfs
  services.gvfs.enable = true;

  # Define a user account. Don't forget to set a password with ‘passwd’.
  users.users.lqdev = {
    isNormalUser = true;
    description = &amp;quot;lqdev&amp;quot;;
    extraGroups = [ &amp;quot;networkmanager&amp;quot; &amp;quot;wheel&amp;quot; &amp;quot;docker&amp;quot;];
    packages = with pkgs; [
      firefox
      thunderbird
      vscode
      element-desktop
    ];
  };

  #Enable docker
  virtualisation.docker.enable = true;

  # Allow unfree packages
  nixpkgs.config.allowUnfree = true;

  # List packages installed in system profile. To search, run:
  # $ nix search wget
  environment.systemPackages = with pkgs; [
  #  vim # Do not forget to add an editor to edit configuration.nix! The Nano editor is also installed by default.

  # Utilities
    wget
    emacs
    alacritty
    mc
    du-dust
    htop
    feh
    duf
    shutter
    gparted
    keepassxc
    bitwarden
    git
    yt-dlp
    streamlink
    ffmpeg
    gnome.seahorse
    xfce.thunar-volman
    xfce.xfconf

  # Media
  
    mpv
    vlc
    
  # Dotnet
    (with dotnetCorePackages; combinePackages [
      dotnet-sdk
      dotnet-sdk_7
    ])
  # Development
  
    docker
    cargo
    rustc

  # Office
  
    libreoffice
  ];

  # Some programs need SUID wrappers, can be configured further or are
  # started in user sessions.
  # programs.mtr.enable = true;
  # programs.gnupg.agent = {
  #   enable = true;
  #   enableSSHSupport = true;
  # };

  # Bash Configuration
  programs.bash = {
    shellAliases = {
      emacs=&amp;quot;emacs -nw&amp;quot;;
    };
  };

  # Thunar
  programs.thunar.enable = true;

  # List services that you want to enable:

  # Enable the OpenSSH daemon.
  # services.openssh.enable = true;

  # Open ports in the firewall.
  # networking.firewall.allowedTCPPorts = [ ... ];
  # networking.firewall.allowedUDPPorts = [ ... ];
  # Or disable the firewall altogether.
  # networking.firewall.enable = false;

  # This value determines the NixOS release from which the default
  # settings for stateful data, like file locations and database versions
  # on your system were taken. It‘s perfectly fine and recommended to leave
  # this value at the release version of the first install of this system.
  # Before changing this value read the documentation for this option
  # (e.g. man configuration.nix or on https://nixos.org/nixos/options.html).
  system.stateVersion = &amp;quot;23.05&amp;quot;; # Did you read the comment?

}
&lt;/code&gt;&lt;/pre&gt;
]]&gt;</description>
      <link>https://www.lqdev.me/resources/snippets/nixos-configuration</link>
      <guid>https://www.lqdev.me/resources/snippets/nixos-configuration</guid>
      <pubDate>08/22/2023 18:45 -05:00</pubDate>
      <category>nix</category>
      <category>linux</category>
      <category>configuration</category>
      <category>nixos</category>
      <category>os</category>
    </item>
    <item>
      <title>Webmentions Verification</title>
      <description>&lt;![CDATA[&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;Sample script that shows how to perform Webmention verification per &lt;a href="https://www.w3.org/TR/webmention/#webmention-verification"&gt;Webmentions specification&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;dotnet fsi webmention-verification.fsx
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Snippet&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;webmention-verification.fsx&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-fsharp"&gt;// https://www.w3.org/TR/webmention/#webmention-verification

#r &amp;quot;nuget:FSharp.Data&amp;quot;
#r &amp;quot;nuget: Microsoft.AspNetCore.WebUtilities, 2.2.0&amp;quot;

open System
open System.Net
open System.Net.Http
open System.Net.Http.Headers
open System.Collections.Generic
open Microsoft.AspNetCore.WebUtilities
open FSharp.Data

type WebmentionVerificationResult = 
    | TaggedMention of {| Replies: bool; Likes: bool; Reposts: bool|}
    | UntaggedMention
    | Error of string

let getFormContent (request:HttpRequestMessage) =
    async {
        let! content = request.Content.ReadAsStringAsync() |&amp;gt; Async.AwaitTask
        let query = QueryHelpers.ParseQuery(content)
        let source = query[&amp;quot;source&amp;quot;] |&amp;gt; Seq.head
        let target = query[&amp;quot;target&amp;quot;] |&amp;gt; Seq.head

        return source,target
    }

let cont =  
    dict [
        (&amp;quot;source&amp;quot;,&amp;quot;https://raw.githubusercontent.com/lqdev/fsadvent-2021-webmentions/main/reply.html&amp;quot;)
        (&amp;quot;target&amp;quot;,&amp;quot;https://webmention.rocks/test/1&amp;quot;)
    ]

let buildSampleRequestMessage (content:IDictionary&amp;lt;string,string&amp;gt;) = 

    let reqMessage = new HttpRequestMessage()
    reqMessage.Content &amp;lt;- new FormUrlEncodedContent(content)

    reqMessage

let req = buildSampleRequestMessage cont

// verification

let source,target = 
    req
    |&amp;gt; getFormContent
    |&amp;gt; Async.RunSynchronously

let getMentionUsingCssSelector (doc:HtmlDocument) (selector:string) (target:string) = 
    doc.CssSelect(selector)
    |&amp;gt; List.map(fun x -&amp;gt; x.AttributeValue(&amp;quot;href&amp;quot;))
    |&amp;gt; List.filter(fun x -&amp;gt; x = target)    

let hasMention (mentions:string list) = 
    mentions |&amp;gt; List.isEmpty |&amp;gt; not

let verifyWebmentions (source:string) (target:string)= 
    async {
        use client = new HttpClient()
        let reqMessage = new HttpRequestMessage(new HttpMethod(&amp;quot;Get&amp;quot;), source)
        reqMessage.Headers.Accept.Clear()
        
        // Only accept text/html content
        reqMessage.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(&amp;quot;text/html&amp;quot;))
        
        // Get document
        let! res = client.SendAsync(reqMessage) |&amp;gt; Async.AwaitTask
        
        // Verify webmention
        let webmentions = 
            match res.IsSuccessStatusCode with 
            | true -&amp;gt;
                // Get document contents
                let body = 
                    async {
                        return! res.Content.ReadAsStringAsync() |&amp;gt; Async.AwaitTask
                    } |&amp;gt; Async.RunSynchronously

                // Parse document
                let doc = HtmlDocument.Parse(body)

                // Get links tagged as replies using microformats
                let replies = 
                    getMentionUsingCssSelector doc &amp;quot;.u-in-reply-to&amp;quot; target

                // Get links tagged as likes using microformats
                let likes = 
                    getMentionUsingCssSelector doc &amp;quot;.u-in-like-of&amp;quot; target

                // Get links tagged as repost using microformats
                let shares = 
                    getMentionUsingCssSelector doc &amp;quot;.u-in-repost-of&amp;quot; target

                // Get untagged mentions
                let mentions = 
                    getMentionUsingCssSelector doc &amp;quot;a&amp;quot; target

                // Collect all tagged mentions
                let knownInteractions = 
                    [replies;likes;shares] 
                    |&amp;gt; List.collect(id)

                // Choose tagged mentions before untagged mentions
                match knownInteractions.IsEmpty,mentions.IsEmpty with 
                | true,true -&amp;gt; Error &amp;quot;Target not mentioned&amp;quot;
                | true,false | false,false -&amp;gt; 
                    TaggedMention 
                        {|
                            Replies = hasMention replies 
                            Likes = hasMention likes
                            Reposts = hasMention shares
                        |}
                | false,true -&amp;gt; UntaggedMention 

            | false -&amp;gt; 
                Error &amp;quot;Unable to get source&amp;quot;
        return webmentions            
    }

verifyWebmentions source target
|&amp;gt; Async.RunSynchronously
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Sample Output&lt;/h2&gt;
&lt;pre&gt;&lt;code class="language-text"&gt;Interactions { 
    Likes = false
    Replies = true
    Shares = false }
&lt;/code&gt;&lt;/pre&gt;
]]&gt;</description>
      <link>https://www.lqdev.me/resources/snippets/webmentions-verification</link>
      <guid>https://www.lqdev.me/resources/snippets/webmentions-verification</guid>
      <pubDate>09/25/2022 15:13 -05:00</pubDate>
      <category>f#</category>
      <category>indieweb</category>
      <category>webmentions</category>
      <category>internet</category>
      <category>web</category>
      <category>social</category>
      <category>interactive</category>
      <category>script</category>
    </item>
    <item>
      <title>Webmentions Request Verification</title>
      <description>&lt;![CDATA[&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;Sample script that shows how to perform Webmention request verification per &lt;a href="https://www.w3.org/TR/webmention/#request-verification"&gt;Webmentions specification&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;dotnet fsi request-verification.fsx
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Snippet&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;request-verification.fsx&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-fsharp"&gt;// https://www.w3.org/TR/webmention/#request-verification

// 1. Send response with 202 Accepted to acknowledge successful request
// 2. DONE: Check that the protocol is http or https
// 3. DONE: Source URL is different than Target URL
// 4. DONE Check that Target URL is a valid resource

#r &amp;quot;nuget: Microsoft.AspNetCore.WebUtilities, 2.2.0&amp;quot;

open System
open System.Net
open System.Net.Http
open System.Collections.Generic
open Microsoft.AspNetCore.WebUtilities

type RequestVerificationResult =
    | Ok of HttpRequestMessage
    | Error of string

// Parse Form URL Encoded string
let getFormContent (request:HttpRequestMessage) =
    async {
        let! content = request.Content.ReadAsStringAsync() |&amp;gt; Async.AwaitTask
        let query = QueryHelpers.ParseQuery(content)
        let source = query[&amp;quot;source&amp;quot;] |&amp;gt; Seq.head
        let target = query[&amp;quot;target&amp;quot;] |&amp;gt; Seq.head

        return source,target
    }

// Check protocol is HTTP or HTTPS
let checkProtocol (request: RequestVerificationResult) =
    match request with 
    | Ok m -&amp;gt; 
        let source,target = 
            async {
                return! getFormContent(m)
            } |&amp;gt; Async.RunSynchronously

        let isProtocolValid = 
            match source.StartsWith(&amp;quot;http&amp;quot;),target.StartsWith(&amp;quot;http&amp;quot;) with
            | true,true -&amp;gt; Ok m
            | true,false -&amp;gt; Error &amp;quot;Target invalid protocol&amp;quot;
            | false,true -&amp;gt;  Error &amp;quot;Source invalid protocol&amp;quot;
            | false,false -&amp;gt; Error &amp;quot;Source and Target invalid protocol&amp;quot;

        isProtocolValid
    | Error s -&amp;gt; Error $&amp;quot;{s}&amp;quot;

// Check the URLs are not the same
let checkUrlsSame (request:RequestVerificationResult) = 
    match request with 
    | Ok m -&amp;gt; 
        let source,target = 
            async {
                return! getFormContent(m)
            } |&amp;gt; Async.RunSynchronously
        let check = 
            match source.Equals(target) with 
            | true -&amp;gt; Error &amp;quot;Urls are the same&amp;quot;
            | false -&amp;gt;  Ok m
        check
    | Error s -&amp;gt; Error s

// Helper functions
let uriIsMine (url:string) = 
    let uri = new Uri(url)
    uri.Host.Equals(&amp;quot;lqdev.me&amp;quot;) || uri.Host.Equals(&amp;quot;www.luisquintanilla.me&amp;quot;) || uri.Host.Equals(&amp;quot;luisquintanilla.me&amp;quot;)

let isValid (url:string) (msg:HttpResponseMessage) = 
    let isMine = uriIsMine url
    isMine &amp;amp; msg.IsSuccessStatusCode

// Check URL is a valid resource
// Valid means, the URL is one of my domains and returns a non-400 or 500 HTML status code
let checkUrlValidResource (request:RequestVerificationResult) = 
    match request with 
    | Ok m -&amp;gt; 
        let res = 
            async {
                let! source,target = getFormContent(m)
                use client = new HttpClient()
                let reqMessage = new HttpRequestMessage(HttpMethod.Head, target)
                let! resp = client.SendAsync(reqMessage) |&amp;gt; Async.AwaitTask
                return isValid target resp
            } |&amp;gt; Async.RunSynchronously
        match res with 
        | true -&amp;gt; Ok m
        | false -&amp;gt; Error &amp;quot;Target is not a valid resource&amp;quot; 
    | Error s -&amp;gt; Error s

// Combine validation steps into single function
let validate = 
    checkProtocol &amp;gt;&amp;gt; checkUrlsSame &amp;gt;&amp;gt; checkUrlValidResource

// Test application
let buildSampleRequestMessages (content:IDictionary&amp;lt;string,string&amp;gt;) = 

    let reqMessage = new HttpRequestMessage()
    reqMessage.Content &amp;lt;- new FormUrlEncodedContent(content)

    let liftedReqMessage = Ok reqMessage
    liftedReqMessage

let sampleContent = [ 
    dict [
        (&amp;quot;source&amp;quot;,&amp;quot;http://lqdev.me&amp;quot;)
        (&amp;quot;target&amp;quot;,&amp;quot;http://lqdev.me&amp;quot;)
    ]
    dict [
        (&amp;quot;source&amp;quot;,&amp;quot;http://://lqdev.me&amp;quot;)
        (&amp;quot;target&amp;quot;,&amp;quot;protocol://lqdev.me&amp;quot;)
    ]    
    dict [
        (&amp;quot;source&amp;quot;,&amp;quot;http://lqdev.me&amp;quot;)
        (&amp;quot;target&amp;quot;,&amp;quot;http://github.com/lqdev&amp;quot;)
    ]
    dict [
        (&amp;quot;source&amp;quot;,&amp;quot;http://github.com/lqdev&amp;quot;)
        (&amp;quot;target&amp;quot;,&amp;quot;http://lqdev.me&amp;quot;)
    ]        
]

sampleContent
|&amp;gt; List.map(buildSampleRequestMessages)
|&amp;gt; List.map(validate)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Sample Output&lt;/h2&gt;
&lt;pre&gt;&lt;code class="language-text"&gt;[  
  Error &amp;quot;Urls are the same&amp;quot;; 
  Error &amp;quot;Target invalid protocol&amp;quot;;
  Error &amp;quot;Target is not a valid resource&amp;quot;;
  Ok
    Method: GET, RequestUri: '&amp;lt;null&amp;gt;', Version: 1.1, Content: System.Net.Http.FormUrlEncodedContent, Headers:
    {
        Content-Type: application/x-www-form-urlencoded
        Content-Length: 67
    }
    {
        Content = System.Net.Http.FormUrlEncodedContent;
        Headers = seq [];
        Method = GET;
        Options = seq [];
        Properties = seq [];
        RequestUri = null;
        Version = 1.1;
        VersionPolicy = RequestVersionOrLower;
    }
]
&lt;/code&gt;&lt;/pre&gt;
]]&gt;</description>
      <link>https://www.lqdev.me/resources/snippets/webmentions-request-verification</link>
      <guid>https://www.lqdev.me/resources/snippets/webmentions-request-verification</guid>
      <pubDate>09/23/2022 15:41 -05:00</pubDate>
      <category>f#</category>
      <category>indieweb</category>
      <category>webmentions</category>
      <category>internet</category>
      <category>web</category>
      <category>social</category>
      <category>interactive</category>
      <category>script</category>
    </item>
    <item>
      <title>Upgrade Matrix Synapse homeserver</title>
      <description>&lt;![CDATA[&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;Upgrade a &lt;a href="https://matrix.org/"&gt;Matrix&lt;/a&gt; &lt;a href="https://github.com/matrix-org/synapse/"&gt;Synapse homeserver&lt;/a&gt; using pip. For more information, see the official article on &lt;a href="https://matrix-org.github.io/synapse/develop/upgrade"&gt;upgrading between Synapse versions&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;./update-matrix-homeserver.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Snippet&lt;/h2&gt;
&lt;h3&gt;update-matrix-homeserver.sh&lt;/h3&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;# Initialize Python virtual environment
source ./env/bin/activate

# Upgrade using pip
# For PostgreSQL packages, use matrix-synapse[postgres]
pip install --upgrade matrix-synapse

# Restart server
synctl restart

# Check version
curl http://localhost:8008/_synapse/admin/v1/server_version

# Deactivate Python virtual environment
deactivate
&lt;/code&gt;&lt;/pre&gt;
]]&gt;</description>
      <link>https://www.lqdev.me/resources/snippets/update-matrix-synapse-homeserver</link>
      <guid>https://www.lqdev.me/resources/snippets/update-matrix-synapse-homeserver</guid>
      <pubDate>08/31/2022 19:40 -05:00</pubDate>
      <category>matrix</category>
      <category>synapse</category>
      <category>homeserver</category>
      <category>selfhost</category>
      <category>python</category>
      <category>internet</category>
      <category>network</category>
    </item>
    <item>
      <title>Create a new Matrix user using the CLI</title>
      <description>&lt;![CDATA[&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;Create a new user in your &lt;a href="https://matrix.org/"&gt;Matrix&lt;/a&gt; &lt;a href="https://github.com/matrix-org/synapse/"&gt;Synapse homeserver&lt;/a&gt; using &lt;a href="https://manpages.debian.org/buster/matrix-synapse/register_new_matrix_user.1.en.html"&gt;register_new_matrix_user&lt;/a&gt; CLI utility. This is helpful when creating accounts on a homeserver where registrations are closed.&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;N/A&lt;/p&gt;
&lt;h2&gt;Snippet&lt;/h2&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;register_new_matrix_user --user user1 --password p@ssword --config homeserver-config.yaml
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;--user&lt;/strong&gt;: Local part of the new user. Will prompt if omitted.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;--password&lt;/strong&gt;: New password for user. Will prompt if omitted. Supplying the password on the command line is not recommended. Use the STDIN instead.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;--config&lt;/strong&gt;: Path to server config file containing the shared secret.&lt;/li&gt;
&lt;/ul&gt;
]]&gt;</description>
      <link>https://www.lqdev.me/resources/snippets/create-matrix-user-cli</link>
      <guid>https://www.lqdev.me/resources/snippets/create-matrix-user-cli</guid>
      <pubDate>08/31/2022 19:40 -05:00</pubDate>
      <category>bash</category>
      <category>linux</category>
      <category>matrix</category>
      <category>synapse</category>
      <category>communication</category>
    </item>
    <item>
      <title>Analyze RSS feeds with FSharp.Data XML Type Provider</title>
      <description>&lt;![CDATA[&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;Use the &lt;a href="https://fsprojects.github.io/FSharp.Data/library/XmlProvider.html"&gt;FSharp.Data XML Type Provider&lt;/a&gt; to load and analyze RSS feeds.&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;dotnet fsi rss-parser.fsx 
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Snippet&lt;/h2&gt;
&lt;h3&gt;rss-parser.fsx&lt;/h3&gt;
&lt;pre&gt;&lt;code class="language-fsharp"&gt;// Install NuGet packages
#r &amp;quot;nuget:FSharp.Data&amp;quot;

// Import NuGet packages
open System.Xml.Linq
open FSharp.Data

// Define Rss type using XML Type Provider
type Rss = XmlProvider&amp;lt;&amp;quot;http://luisquintanilla.me/posts/index.xml&amp;quot;&amp;gt;

// Load RSS feed using Rss type
let blogFeed = Rss.Load(&amp;quot;http://luisquintanilla.me/posts/index.xml&amp;quot;)

// Get Feed Title
blogFeed.Channel.Title

// Get the 5 latest posts
blogFeed.Channel.Items
|&amp;gt; Array.sortByDescending(fun item -&amp;gt; item.PubDate)
|&amp;gt; Array.take 5

// Get the title and URL of 5 latest posts
blogFeed.Channel.Items
|&amp;gt; Array.sortByDescending(fun item -&amp;gt; item.PubDate)
|&amp;gt; Array.take 5
|&amp;gt; Array.map(fun item -&amp;gt; {|Title=item.Title;Url=item.Link|})
&lt;/code&gt;&lt;/pre&gt;
]]&gt;</description>
      <link>https://www.lqdev.me/resources/snippets/fsharp-data-rss-parser</link>
      <guid>https://www.lqdev.me/resources/snippets/fsharp-data-rss-parser</guid>
      <pubDate>08/30/2022 12:50 -05:00</pubDate>
      <category>xml</category>
      <category>dotnet</category>
      <category>fsharp</category>
      <category>typeprovider</category>
      <category>rss</category>
    </item>
    <item>
      <title>OPML File Generator</title>
      <description>&lt;![CDATA[&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;Script to take information stored in a JSON file and converts it into OPML format. This works for RSS readers as well as podcast clients that support OPML import.&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;dotnet fsi opml-generator.fsx &amp;quot;&amp;lt;feed-title&amp;gt;&amp;quot; &amp;quot;&amp;lt;author-url&amp;gt;&amp;quot; &amp;quot;&amp;lt;data-file-path&amp;gt;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;dotnet fsi opml-generator.fsx &amp;quot;My Blogroll&amp;quot; &amp;quot;http://lqdev.me&amp;quot; &amp;quot;blogroll.json&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Snippet&lt;/h2&gt;
&lt;h3&gt;opml-generator.fsx&lt;/h3&gt;
&lt;pre&gt;&lt;code class="language-fsharp"&gt;open System.IO
open System.Linq
open System.Text.Json
open System.Xml.Linq

type OpmlMetadata = 
    {
        Title: string
        OwnerId: string
    }

type Outline = 
    {
        Title: string
        Type: string
        HtmlUrl: string
        XmlUrl: string
    }

let opmlFeed (head:XElement) = 
    XElement(XName.Get &amp;quot;opml&amp;quot;,
        XAttribute(XName.Get &amp;quot;version&amp;quot;, &amp;quot;2.0&amp;quot;),
            head,
            XElement(XName.Get &amp;quot;body&amp;quot;))

let headElement (metadata:OpmlMetadata) = 
        XElement(XName.Get &amp;quot;head&amp;quot;,
            XElement(XName.Get &amp;quot;title&amp;quot;, metadata.Title),
            XElement(XName.Get &amp;quot;ownerId&amp;quot;, metadata.OwnerId))

let outlineElement (data:Outline) = 
    XElement(XName.Get &amp;quot;outline&amp;quot;,
        XAttribute(XName.Get &amp;quot;title&amp;quot;, data.Title),
        XAttribute(XName.Get &amp;quot;text&amp;quot;, data.Title),        
        XAttribute(XName.Get &amp;quot;type&amp;quot;, data.Type),
        XAttribute(XName.Get &amp;quot;htmlUrl&amp;quot;, data.HtmlUrl),
        XAttribute(XName.Get &amp;quot;xmlUrl&amp;quot;, data.XmlUrl))

let loadLinks (filePath:string) = 
    File.ReadAllText(filePath)
    |&amp;gt; fun x -&amp;gt; x |&amp;gt; JsonSerializer.Deserialize&amp;lt;Outline array&amp;gt;

let buildOpmlFeed (title:string) (ownerId:string) (filePath:string) = 
    let fileName = Path.GetFileNameWithoutExtension(filePath)
    
    let head = 
        {
            Title=title
            OwnerId=ownerId
        }
        |&amp;gt; headElement
    
    let links = filePath |&amp;gt; loadLinks |&amp;gt; Array.map(outlineElement) 
    
    let feed =  opmlFeed head 
    feed.Descendants(XName.Get &amp;quot;body&amp;quot;).First().Add(links)
    File.WriteAllText($&amp;quot;{fileName}.opml&amp;quot;, feed.ToString())

let args = fsi.CommandLineArgs
let title = args[1]
let ownerId = args.[2]
let dataPath = args.[3]

buildOpmlFeed title ownerId dataPath
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;blogroll.json&lt;/h3&gt;
&lt;pre&gt;&lt;code class="language-json"&gt;[
    {
        &amp;quot;Title&amp;quot;: &amp;quot;Blogroll.org&amp;quot;,
        &amp;quot;Type&amp;quot;: &amp;quot;rss&amp;quot;,
        &amp;quot;HtmlUrl&amp;quot;: &amp;quot;https://blogroll.org/&amp;quot;,
        &amp;quot;XmlUrl&amp;quot;: &amp;quot;https://blogroll.org/feed/&amp;quot;
    },
    {
        &amp;quot;Title&amp;quot;: &amp;quot;Cheapskate's Guide&amp;quot;,
        &amp;quot;Type&amp;quot;: &amp;quot;rss&amp;quot;,
        &amp;quot;HtmlUrl&amp;quot;: &amp;quot;https://cheapskatesguide.org/&amp;quot;,
        &amp;quot;XmlUrl&amp;quot;: &amp;quot;https://cheapskatesguide.org/cheapskates-guide-rss-feed.xml&amp;quot;
    },
    {
        &amp;quot;Title&amp;quot;: &amp;quot;JWZ&amp;quot;,
        &amp;quot;Type&amp;quot;: &amp;quot;rss&amp;quot;,
        &amp;quot;HtmlUrl&amp;quot;: &amp;quot;https://www.jwz.org/blog/&amp;quot;,
        &amp;quot;XmlUrl&amp;quot;: &amp;quot;https://cdn.jwz.org/blog/feed/&amp;quot;
    }    
]
&lt;/code&gt;&lt;/pre&gt;
]]&gt;</description>
      <link>https://www.lqdev.me/resources/snippets/opml-file-generator</link>
      <guid>https://www.lqdev.me/resources/snippets/opml-file-generator</guid>
      <pubDate>08/14/2022 13:45 -05:00</pubDate>
      <category>dotnet</category>
      <category>fsharp</category>
      <category>script</category>
    </item>
    <item>
      <title>Download Main Wikipedia Page as PDF</title>
      <description>&lt;![CDATA[&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;Download the main page of Wikipedia locally as a PDF&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;curl -o Main_Page.pdf https://en.wikipedia.org/api/rest_v1/page/pdf/Main_Page
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Snippet&lt;/h2&gt;
&lt;h3&gt;script.sh&lt;/h3&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;curl -o Main_Page.pdf https://en.wikipedia.org/api/rest_v1/page/pdf/Main_Page
&lt;/code&gt;&lt;/pre&gt;
]]&gt;</description>
      <link>https://www.lqdev.me/resources/snippets/curl-download-wikipedia-mainpage</link>
      <guid>https://www.lqdev.me/resources/snippets/curl-download-wikipedia-mainpage</guid>
      <pubDate>08/11/2022 19:19 -05:00</pubDate>
      <category>bash</category>
      <category>linux</category>
    </item>
    <item>
      <title>QR Code Generator</title>
      <description>&lt;![CDATA[&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;Script to generate a QR Code and save as PNG image from a URL&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;dotnet fsi qr-code-generator.fsx &amp;quot;my-qr-code.svg&amp;quot; &amp;quot;https://twitter.com/user-profile&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Snippet&lt;/h2&gt;
&lt;h3&gt;qr-code-generator.fsx&lt;/h3&gt;
&lt;pre&gt;&lt;code class="language-fsharp"&gt;open System.Threading

printfn &amp;quot;Loading packages&amp;quot;

#r &amp;quot;nuget:Net.Codecrete.QrCodeGenerator&amp;quot;

Thread.Sleep(5000)

printfn &amp;quot;Loaded QrCodeGenerator&amp;quot;

open Net.Codecrete.QrCodeGenerator
open System.IO
open System.Text

let createQrCode (savePath:string) (target:string) = 
    let qr = QrCode.EncodeText(target,QrCode.Ecc.High)
    let svgString = qr.ToSvgString(4)
    File.WriteAllText(savePath,svgString, Encoding.UTF8)
    
let args = fsi.CommandLineArgs
let savePath = args.[1]
let target = args.[2]

createQrCode savePath target
&lt;/code&gt;&lt;/pre&gt;
]]&gt;</description>
      <link>https://www.lqdev.me/resources/snippets/qr-code-generator</link>
      <guid>https://www.lqdev.me/resources/snippets/qr-code-generator</guid>
      <pubDate>08/03/2022 20:07 -05:00</pubDate>
      <category>dotnet</category>
      <category>f#</category>
      <category>script</category>
    </item>
  </channel>
</rss>