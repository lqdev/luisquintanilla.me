<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>Luis Quintanilla - All Updates</title>
    <link>https://www.luisquintanilla.me/feed</link>
    <description>All content updates from Luis Quintanilla's website</description>
    <lastBuildDate>Sun, 13 Jul 2025 19:16:33 -05:00</lastBuildDate>
    <language>en</language>
    <item>
      <title>Create a new Matrix user using the CLI</title>
      <description>&lt;![CDATA[&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;Create a new user in your &lt;a href="https://matrix.org/"&gt;Matrix&lt;/a&gt; &lt;a href="https://github.com/matrix-org/synapse/"&gt;Synapse homeserver&lt;/a&gt; using &lt;a href="https://manpages.debian.org/buster/matrix-synapse/register_new_matrix_user.1.en.html"&gt;register_new_matrix_user&lt;/a&gt; CLI utility. This is helpful when creating accounts on a homeserver where registrations are closed.&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;N/A&lt;/p&gt;
&lt;h2&gt;Snippet&lt;/h2&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;register_new_matrix_user --user user1 --password p@ssword --config homeserver-config.yaml
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;--user&lt;/strong&gt;: Local part of the new user. Will prompt if omitted.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;--password&lt;/strong&gt;: New password for user. Will prompt if omitted. Supplying the password on the command line is not recommended. Use the STDIN instead.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;--config&lt;/strong&gt;: Path to server config file containing the shared secret.&lt;/li&gt;
&lt;/ul&gt;
]]&gt;</description>
      <link>https://www.luisquintanilla.me/snippets/create-matrix-user-cli</link>
      <guid>https://www.luisquintanilla.me/snippets/create-matrix-user-cli</guid>
    </item>
    <item>
      <title>Download Main Wikipedia Page as PDF</title>
      <description>&lt;![CDATA[&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;Download the main page of Wikipedia locally as a PDF&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;curl -o Main_Page.pdf https://en.wikipedia.org/api/rest_v1/page/pdf/Main_Page
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Snippet&lt;/h2&gt;
&lt;h3&gt;script.sh&lt;/h3&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;curl -o Main_Page.pdf https://en.wikipedia.org/api/rest_v1/page/pdf/Main_Page
&lt;/code&gt;&lt;/pre&gt;
]]&gt;</description>
      <link>https://www.luisquintanilla.me/snippets/curl-download-wikipedia-mainpage</link>
      <guid>https://www.luisquintanilla.me/snippets/curl-download-wikipedia-mainpage</guid>
    </item>
    <item>
      <title>Analyze RSS feeds with FSharp.Data XML Type Provider</title>
      <description>&lt;![CDATA[&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;Use the &lt;a href="https://fsprojects.github.io/FSharp.Data/library/XmlProvider.html"&gt;FSharp.Data XML Type Provider&lt;/a&gt; to load and analyze RSS feeds.&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;dotnet fsi rss-parser.fsx 
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Snippet&lt;/h2&gt;
&lt;h3&gt;rss-parser.fsx&lt;/h3&gt;
&lt;pre&gt;&lt;code class="language-fsharp"&gt;// Install NuGet packages
#r &amp;quot;nuget:FSharp.Data&amp;quot;

// Import NuGet packages
open System.Xml.Linq
open FSharp.Data

// Define Rss type using XML Type Provider
type Rss = XmlProvider&amp;lt;&amp;quot;http://luisquintanilla.me/posts/index.xml&amp;quot;&amp;gt;

// Load RSS feed using Rss type
let blogFeed = Rss.Load(&amp;quot;http://luisquintanilla.me/posts/index.xml&amp;quot;)

// Get Feed Title
blogFeed.Channel.Title

// Get the 5 latest posts
blogFeed.Channel.Items
|&amp;gt; Array.sortByDescending(fun item -&amp;gt; item.PubDate)
|&amp;gt; Array.take 5

// Get the title and URL of 5 latest posts
blogFeed.Channel.Items
|&amp;gt; Array.sortByDescending(fun item -&amp;gt; item.PubDate)
|&amp;gt; Array.take 5
|&amp;gt; Array.map(fun item -&amp;gt; {|Title=item.Title;Url=item.Link|})
&lt;/code&gt;&lt;/pre&gt;
]]&gt;</description>
      <link>https://www.luisquintanilla.me/snippets/fsharp-data-rss-parser</link>
      <guid>https://www.luisquintanilla.me/snippets/fsharp-data-rss-parser</guid>
    </item>
    <item>
      <title>lqdev.me Post Metrics</title>
      <description>&lt;![CDATA[&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;Generates an aggregate analysis of posts on &lt;a href="https://www.lqdev.me"&gt;lqdev.me / luisquintanilla.me&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;dotnet fsi stats.fsx 
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Snippet&lt;/h2&gt;
&lt;h3&gt;stats.fsx&lt;/h3&gt;
&lt;pre&gt;&lt;code class="language-fsharp"&gt;// Reference DLL
#r &amp;quot;../bin/Debug/net8.0/PersonalSite.dll&amp;quot;

// Add modules
open Domain
open Builder
open System

// Load posts
let posts = loadPosts()
let notes = loadFeed ()
let responses = loadReponses ()

// Organize posts by year
let postCountsByYear = 
    posts
    |&amp;gt; Array.countBy (fun (x:Post) -&amp;gt; DateTime.Parse(x.Metadata.Date) |&amp;gt; _.Year)
    |&amp;gt; Array.sortByDescending fst 

let noteCountsByYear = 
    notes
    |&amp;gt; Array.countBy (fun (x:Post) -&amp;gt; DateTime.Parse(x.Metadata.Date) |&amp;gt; _.Year)
    |&amp;gt; Array.sortByDescending fst

let responseCountsByYear = 
    responses
    |&amp;gt; Array.countBy (fun (x:Response) -&amp;gt; DateTime.Parse(x.Metadata.DatePublished) |&amp;gt; _.Year)
    |&amp;gt; Array.sortByDescending fst

// Organize responses by type
let responsesByType = 
    responses
    |&amp;gt; Array.filter(fun x -&amp;gt; (DateTime.Parse(x.Metadata.DatePublished) |&amp;gt; _.Year) = DateTime.UtcNow.Year)
    |&amp;gt; Array.countBy(fun x -&amp;gt; x.Metadata.ResponseType)
    |&amp;gt; Array.sortByDescending(snd)

// Organize responses by tag
let responsesByTag = 
    responses
    |&amp;gt; Array.filter(fun x -&amp;gt; (DateTime.Parse(x.Metadata.DatePublished) |&amp;gt; _.Year) = DateTime.UtcNow.Year)
    |&amp;gt; Array.collect(fun x -&amp;gt; 
            match x.Metadata.Tags with
            | null -&amp;gt; [|&amp;quot;untagged&amp;quot;|]
            | [||] -&amp;gt; [|&amp;quot;untagged&amp;quot;|]
            | _ -&amp;gt; x.Metadata.Tags
        )
    |&amp;gt; Array.countBy(fun x -&amp;gt; x)
    |&amp;gt; Array.sortByDescending(snd)

// Organize responses by host name (domain)
let responsesByDomain = 
    responses
    |&amp;gt; Array.filter(fun x -&amp;gt; (DateTime.Parse(x.Metadata.DatePublished) |&amp;gt; _.Year) = DateTime.UtcNow.Year)
    |&amp;gt; Array.countBy(fun x -&amp;gt; Uri(x.Metadata.TargetUrl).Host)
    |&amp;gt; Array.sortByDescending(snd)

// Utility function to display counts
let printEntryCounts&amp;lt;'a&amp;gt; (title:string) (entryCounts:('a * int) array) (n:int) = 
    printfn $&amp;quot;{title}&amp;quot;

    match entryCounts.Length with
    | 0 -&amp;gt; 
        printfn $&amp;quot;No entries&amp;quot;
        printfn $&amp;quot;&amp;quot;
    | a when a &amp;gt; 0 -&amp;gt; 
        match n with 
        | n when n = -1 || n &amp;gt; entryCounts.Length -&amp;gt; 
            entryCounts
            |&amp;gt; Array.iter(fun x -&amp;gt; printfn $&amp;quot;{fst x} {snd x}&amp;quot;)
            |&amp;gt; fun _ -&amp;gt; printfn $&amp;quot;&amp;quot;
        | n when n &amp;gt; 0 -&amp;gt; 
            entryCounts
            |&amp;gt; Array.take n
            |&amp;gt; Array.iter(fun x -&amp;gt; printfn $&amp;quot;{fst x} {snd x}&amp;quot;)
            |&amp;gt; fun _ -&amp;gt; printfn $&amp;quot;&amp;quot;

// Print yearly counts
printEntryCounts &amp;quot;Blogs&amp;quot; postCountsByYear 2

printEntryCounts &amp;quot;Notes&amp;quot; noteCountsByYear 2

printEntryCounts &amp;quot;Responses&amp;quot; responseCountsByYear 2

// Print response types
printEntryCounts &amp;quot;Response Types&amp;quot; responsesByType -1

// Print response tag counts
printEntryCounts &amp;quot;Response Tags&amp;quot; responsesByTag 5

// Print response by host name
printEntryCounts &amp;quot;Domains&amp;quot; responsesByDomain 5
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Expected Output&lt;/h2&gt;
&lt;pre&gt;&lt;code class="language-text"&gt;Blogs
2023 5
2022 7

Notes
2023 34
2022 36

Responses
2023 216
2022 146

Response Types
bookmark 151
reshare 48
reply 10
star 7

Response Tags
ai 104
llm 42
untagged 41
opensource 31
internet 17

Domains
github.com 15
huggingface.co 11
arxiv.org 10
openai.com 6
www.theverge.com 4
&lt;/code&gt;&lt;/pre&gt;
]]&gt;</description>
      <link>https://www.luisquintanilla.me/snippets/lqdev-me-website-post-metrics</link>
      <guid>https://www.luisquintanilla.me/snippets/lqdev-me-website-post-metrics</guid>
    </item>
    <item>
      <title>NixOS Configuration</title>
      <description>&lt;![CDATA[&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;This is my NixOS Configuration file&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Update configuration file&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Run the following command to apply changes&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;sudo nixos-rebuild switch
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Snippet&lt;/h2&gt;
&lt;pre&gt;&lt;code class="language-nix"&gt;# Edit this configuration file to define what should be installed on
# your system.  Help is available in the configuration.nix(5) man page
# and in the NixOS manual (accessible by running ‘nixos-help’).

{ config, pkgs, ... }:

{
  imports =
    [ # Include the results of the hardware scan.
      ./hardware-configuration.nix
    ];

  # Bootloader.
  boot.loader.systemd-boot.enable = true;
  boot.loader.efi.canTouchEfiVariables = true;

  networking.hostName = &amp;quot;nixos&amp;quot;; # Define your hostname.
  # networking.wireless.enable = true;  # Enables wireless support via wpa_supplicant.

  # Configure network proxy if necessary
  # networking.proxy.default = &amp;quot;http://user:password@proxy:port/&amp;quot;;
  # networking.proxy.noProxy = &amp;quot;127.0.0.1,localhost,internal.domain&amp;quot;;

  # Enable networking
  networking.networkmanager.enable = true;

  # Set your time zone.
  time.timeZone = &amp;quot;America/New_York&amp;quot;;

  # Select internationalisation properties.
  i18n.defaultLocale = &amp;quot;en_US.UTF-8&amp;quot;;

  i18n.extraLocaleSettings = {
    LC_ADDRESS = &amp;quot;en_US.UTF-8&amp;quot;;
    LC_IDENTIFICATION = &amp;quot;en_US.UTF-8&amp;quot;;
    LC_MEASUREMENT = &amp;quot;en_US.UTF-8&amp;quot;;
    LC_MONETARY = &amp;quot;en_US.UTF-8&amp;quot;;
    LC_NAME = &amp;quot;en_US.UTF-8&amp;quot;;
    LC_NUMERIC = &amp;quot;en_US.UTF-8&amp;quot;;
    LC_PAPER = &amp;quot;en_US.UTF-8&amp;quot;;
    LC_TELEPHONE = &amp;quot;en_US.UTF-8&amp;quot;;
    LC_TIME = &amp;quot;en_US.UTF-8&amp;quot;;
  };

  # Enable the X11 windowing system.
  # services.xserver.enable = true;
  services.xserver = {
    enable = true;

    desktopManager = {
      xterm.enable = false;
    };

    displayManager = {
      defaultSession = &amp;quot;none+i3&amp;quot;;
    };

    windowManager.i3 = {
       enable = true;
       extraPackages = with pkgs; [
         dmenu
	 i3status
         j4-dmenu-desktop
	 i3lock	
       ];
    };
  };

  # Enable the XFCE Desktop Environment.
  # services.xserver.displayManager.lightdm.enable = true;
  # services.xserver.desktopManager.xfce.enable = true;

  # Configure keymap in X11
  services.xserver = {
    layout = &amp;quot;us&amp;quot;;
    xkbVariant = &amp;quot;&amp;quot;;
  };

  # Enable CUPS to print documents.
  services.printing.enable = true;

  # Enable sound with pipewire.
  sound.enable = true;
  hardware.pulseaudio.enable = false;
  security.rtkit.enable = true;
  services.pipewire = {
    enable = true;
    alsa.enable = true;
    alsa.support32Bit = true;
    pulse.enable = true;
    # If you want to use JACK applications, uncomment this
    #jack.enable = true;

    # use the example session manager (no others are packaged yet so this is enabled by default,
    # no need to redefine it in your config for now)
    #media-session.enable = true;
  };

  # Enable touchpad support (enabled default in most desktopManager).
  # services.xserver.libinput.enable = true;

  # Enable gvfs
  services.gvfs.enable = true;

  # Define a user account. Don't forget to set a password with ‘passwd’.
  users.users.lqdev = {
    isNormalUser = true;
    description = &amp;quot;lqdev&amp;quot;;
    extraGroups = [ &amp;quot;networkmanager&amp;quot; &amp;quot;wheel&amp;quot; &amp;quot;docker&amp;quot;];
    packages = with pkgs; [
      firefox
      thunderbird
      vscode
      element-desktop
    ];
  };

  #Enable docker
  virtualisation.docker.enable = true;

  # Allow unfree packages
  nixpkgs.config.allowUnfree = true;

  # List packages installed in system profile. To search, run:
  # $ nix search wget
  environment.systemPackages = with pkgs; [
  #  vim # Do not forget to add an editor to edit configuration.nix! The Nano editor is also installed by default.

  # Utilities
    wget
    emacs
    alacritty
    mc
    du-dust
    htop
    feh
    duf
    shutter
    gparted
    keepassxc
    bitwarden
    git
    yt-dlp
    streamlink
    ffmpeg
    gnome.seahorse
    xfce.thunar-volman
    xfce.xfconf

  # Media
  
    mpv
    vlc
    
  # Dotnet
    (with dotnetCorePackages; combinePackages [
      dotnet-sdk
      dotnet-sdk_7
    ])
  # Development
  
    docker
    cargo
    rustc

  # Office
  
    libreoffice
  ];

  # Some programs need SUID wrappers, can be configured further or are
  # started in user sessions.
  # programs.mtr.enable = true;
  # programs.gnupg.agent = {
  #   enable = true;
  #   enableSSHSupport = true;
  # };

  # Bash Configuration
  programs.bash = {
    shellAliases = {
      emacs=&amp;quot;emacs -nw&amp;quot;;
    };
  };

  # Thunar
  programs.thunar.enable = true;

  # List services that you want to enable:

  # Enable the OpenSSH daemon.
  # services.openssh.enable = true;

  # Open ports in the firewall.
  # networking.firewall.allowedTCPPorts = [ ... ];
  # networking.firewall.allowedUDPPorts = [ ... ];
  # Or disable the firewall altogether.
  # networking.firewall.enable = false;

  # This value determines the NixOS release from which the default
  # settings for stateful data, like file locations and database versions
  # on your system were taken. It‘s perfectly fine and recommended to leave
  # this value at the release version of the first install of this system.
  # Before changing this value read the documentation for this option
  # (e.g. man configuration.nix or on https://nixos.org/nixos/options.html).
  system.stateVersion = &amp;quot;23.05&amp;quot;; # Did you read the comment?

}
&lt;/code&gt;&lt;/pre&gt;
]]&gt;</description>
      <link>https://www.luisquintanilla.me/snippets/nixos-configuration</link>
      <guid>https://www.luisquintanilla.me/snippets/nixos-configuration</guid>
    </item>
    <item>
      <title>OPML File Generator</title>
      <description>&lt;![CDATA[&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;Script to take information stored in a JSON file and converts it into OPML format. This works for RSS readers as well as podcast clients that support OPML import.&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;dotnet fsi opml-generator.fsx &amp;quot;&amp;lt;feed-title&amp;gt;&amp;quot; &amp;quot;&amp;lt;author-url&amp;gt;&amp;quot; &amp;quot;&amp;lt;data-file-path&amp;gt;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;dotnet fsi opml-generator.fsx &amp;quot;My Blogroll&amp;quot; &amp;quot;http://lqdev.me&amp;quot; &amp;quot;blogroll.json&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Snippet&lt;/h2&gt;
&lt;h3&gt;opml-generator.fsx&lt;/h3&gt;
&lt;pre&gt;&lt;code class="language-fsharp"&gt;open System.IO
open System.Linq
open System.Text.Json
open System.Xml.Linq

type OpmlMetadata = 
    {
        Title: string
        OwnerId: string
    }

type Outline = 
    {
        Title: string
        Type: string
        HtmlUrl: string
        XmlUrl: string
    }

let opmlFeed (head:XElement) = 
    XElement(XName.Get &amp;quot;opml&amp;quot;,
        XAttribute(XName.Get &amp;quot;version&amp;quot;, &amp;quot;2.0&amp;quot;),
            head,
            XElement(XName.Get &amp;quot;body&amp;quot;))

let headElement (metadata:OpmlMetadata) = 
        XElement(XName.Get &amp;quot;head&amp;quot;,
            XElement(XName.Get &amp;quot;title&amp;quot;, metadata.Title),
            XElement(XName.Get &amp;quot;ownerId&amp;quot;, metadata.OwnerId))

let outlineElement (data:Outline) = 
    XElement(XName.Get &amp;quot;outline&amp;quot;,
        XAttribute(XName.Get &amp;quot;title&amp;quot;, data.Title),
        XAttribute(XName.Get &amp;quot;text&amp;quot;, data.Title),        
        XAttribute(XName.Get &amp;quot;type&amp;quot;, data.Type),
        XAttribute(XName.Get &amp;quot;htmlUrl&amp;quot;, data.HtmlUrl),
        XAttribute(XName.Get &amp;quot;xmlUrl&amp;quot;, data.XmlUrl))

let loadLinks (filePath:string) = 
    File.ReadAllText(filePath)
    |&amp;gt; fun x -&amp;gt; x |&amp;gt; JsonSerializer.Deserialize&amp;lt;Outline array&amp;gt;

let buildOpmlFeed (title:string) (ownerId:string) (filePath:string) = 
    let fileName = Path.GetFileNameWithoutExtension(filePath)
    
    let head = 
        {
            Title=title
            OwnerId=ownerId
        }
        |&amp;gt; headElement
    
    let links = filePath |&amp;gt; loadLinks |&amp;gt; Array.map(outlineElement) 
    
    let feed =  opmlFeed head 
    feed.Descendants(XName.Get &amp;quot;body&amp;quot;).First().Add(links)
    File.WriteAllText($&amp;quot;{fileName}.opml&amp;quot;, feed.ToString())

let args = fsi.CommandLineArgs
let title = args[1]
let ownerId = args.[2]
let dataPath = args.[3]

buildOpmlFeed title ownerId dataPath
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;blogroll.json&lt;/h3&gt;
&lt;pre&gt;&lt;code class="language-json"&gt;[
    {
        &amp;quot;Title&amp;quot;: &amp;quot;Blogroll.org&amp;quot;,
        &amp;quot;Type&amp;quot;: &amp;quot;rss&amp;quot;,
        &amp;quot;HtmlUrl&amp;quot;: &amp;quot;https://blogroll.org/&amp;quot;,
        &amp;quot;XmlUrl&amp;quot;: &amp;quot;https://blogroll.org/feed/&amp;quot;
    },
    {
        &amp;quot;Title&amp;quot;: &amp;quot;Cheapskate's Guide&amp;quot;,
        &amp;quot;Type&amp;quot;: &amp;quot;rss&amp;quot;,
        &amp;quot;HtmlUrl&amp;quot;: &amp;quot;https://cheapskatesguide.org/&amp;quot;,
        &amp;quot;XmlUrl&amp;quot;: &amp;quot;https://cheapskatesguide.org/cheapskates-guide-rss-feed.xml&amp;quot;
    },
    {
        &amp;quot;Title&amp;quot;: &amp;quot;JWZ&amp;quot;,
        &amp;quot;Type&amp;quot;: &amp;quot;rss&amp;quot;,
        &amp;quot;HtmlUrl&amp;quot;: &amp;quot;https://www.jwz.org/blog/&amp;quot;,
        &amp;quot;XmlUrl&amp;quot;: &amp;quot;https://cdn.jwz.org/blog/feed/&amp;quot;
    }    
]
&lt;/code&gt;&lt;/pre&gt;
]]&gt;</description>
      <link>https://www.luisquintanilla.me/snippets/opml-file-generator</link>
      <guid>https://www.luisquintanilla.me/snippets/opml-file-generator</guid>
    </item>
    <item>
      <title>QR Code Generator</title>
      <description>&lt;![CDATA[&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;Script to generate a QR Code and save as PNG image from a URL&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;dotnet fsi qr-code-generator.fsx &amp;quot;my-qr-code.svg&amp;quot; &amp;quot;https://twitter.com/user-profile&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Snippet&lt;/h2&gt;
&lt;h3&gt;qr-code-generator.fsx&lt;/h3&gt;
&lt;pre&gt;&lt;code class="language-fsharp"&gt;open System.Threading

printfn &amp;quot;Loading packages&amp;quot;

#r &amp;quot;nuget:Net.Codecrete.QrCodeGenerator&amp;quot;

Thread.Sleep(5000)

printfn &amp;quot;Loaded QrCodeGenerator&amp;quot;

open Net.Codecrete.QrCodeGenerator
open System.IO
open System.Text

let createQrCode (savePath:string) (target:string) = 
    let qr = QrCode.EncodeText(target,QrCode.Ecc.High)
    let svgString = qr.ToSvgString(4)
    File.WriteAllText(savePath,svgString, Encoding.UTF8)
    
let args = fsi.CommandLineArgs
let savePath = args.[1]
let target = args.[2]

createQrCode savePath target
&lt;/code&gt;&lt;/pre&gt;
]]&gt;</description>
      <link>https://www.luisquintanilla.me/snippets/qr-code-generator</link>
      <guid>https://www.luisquintanilla.me/snippets/qr-code-generator</guid>
    </item>
    <item>
      <title>Remove all installed Python packages with pip</title>
      <description>&lt;![CDATA[&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;I recently had the need to get rid of all the packages I'd installed due to conflicting dependencies.&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;To uninstall packages you need to:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Get a list of the packages&lt;/li&gt;
&lt;li&gt;Uninstall them&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This works both for virtual environments as well as system-wide installations.&lt;/p&gt;
&lt;h3&gt;Get all packages&lt;/h3&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;pip freeze &amp;gt; requirements.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Uninstall packages&lt;/h3&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;pip uninstall -r requirements.txt -y
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Snippet&lt;/h2&gt;
&lt;p&gt;N/A&lt;/p&gt;
]]&gt;</description>
      <link>https://www.luisquintanilla.me/snippets/remove-installed-pip-packages</link>
      <guid>https://www.luisquintanilla.me/snippets/remove-installed-pip-packages</guid>
    </item>
    <item>
      <title>Upgrade Matrix Synapse homeserver</title>
      <description>&lt;![CDATA[&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;Upgrade a &lt;a href="https://matrix.org/"&gt;Matrix&lt;/a&gt; &lt;a href="https://github.com/matrix-org/synapse/"&gt;Synapse homeserver&lt;/a&gt; using pip. For more information, see the official article on &lt;a href="https://matrix-org.github.io/synapse/develop/upgrade"&gt;upgrading between Synapse versions&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;./update-matrix-homeserver.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Snippet&lt;/h2&gt;
&lt;h3&gt;update-matrix-homeserver.sh&lt;/h3&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;# Initialize Python virtual environment
source ./env/bin/activate

# Upgrade using pip
# For PostgreSQL packages, use matrix-synapse[postgres]
pip install --upgrade matrix-synapse

# Restart server
synctl restart

# Check version
curl http://localhost:8008/_synapse/admin/v1/server_version

# Deactivate Python virtual environment
deactivate
&lt;/code&gt;&lt;/pre&gt;
]]&gt;</description>
      <link>https://www.luisquintanilla.me/snippets/update-matrix-synapse-homeserver</link>
      <guid>https://www.luisquintanilla.me/snippets/update-matrix-synapse-homeserver</guid>
    </item>
    <item>
      <title>Webmentions Request Verification</title>
      <description>&lt;![CDATA[&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;Sample script that shows how to perform Webmention request verification per &lt;a href="https://www.w3.org/TR/webmention/#request-verification"&gt;Webmentions specification&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;dotnet fsi request-verification.fsx
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Snippet&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;request-verification.fsx&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-fsharp"&gt;// https://www.w3.org/TR/webmention/#request-verification

// 1. Send response with 202 Accepted to acknowledge successful request
// 2. DONE: Check that the protocol is http or https
// 3. DONE: Source URL is different than Target URL
// 4. DONE Check that Target URL is a valid resource

#r &amp;quot;nuget: Microsoft.AspNetCore.WebUtilities, 2.2.0&amp;quot;

open System
open System.Net
open System.Net.Http
open System.Collections.Generic
open Microsoft.AspNetCore.WebUtilities

type RequestVerificationResult =
    | Ok of HttpRequestMessage
    | Error of string

// Parse Form URL Encoded string
let getFormContent (request:HttpRequestMessage) =
    async {
        let! content = request.Content.ReadAsStringAsync() |&amp;gt; Async.AwaitTask
        let query = QueryHelpers.ParseQuery(content)
        let source = query[&amp;quot;source&amp;quot;] |&amp;gt; Seq.head
        let target = query[&amp;quot;target&amp;quot;] |&amp;gt; Seq.head

        return source,target
    }

// Check protocol is HTTP or HTTPS
let checkProtocol (request: RequestVerificationResult) =
    match request with 
    | Ok m -&amp;gt; 
        let source,target = 
            async {
                return! getFormContent(m)
            } |&amp;gt; Async.RunSynchronously

        let isProtocolValid = 
            match source.StartsWith(&amp;quot;http&amp;quot;),target.StartsWith(&amp;quot;http&amp;quot;) with
            | true,true -&amp;gt; Ok m
            | true,false -&amp;gt; Error &amp;quot;Target invalid protocol&amp;quot;
            | false,true -&amp;gt;  Error &amp;quot;Source invalid protocol&amp;quot;
            | false,false -&amp;gt; Error &amp;quot;Source and Target invalid protocol&amp;quot;

        isProtocolValid
    | Error s -&amp;gt; Error $&amp;quot;{s}&amp;quot;

// Check the URLs are not the same
let checkUrlsSame (request:RequestVerificationResult) = 
    match request with 
    | Ok m -&amp;gt; 
        let source,target = 
            async {
                return! getFormContent(m)
            } |&amp;gt; Async.RunSynchronously
        let check = 
            match source.Equals(target) with 
            | true -&amp;gt; Error &amp;quot;Urls are the same&amp;quot;
            | false -&amp;gt;  Ok m
        check
    | Error s -&amp;gt; Error s

// Helper functions
let uriIsMine (url:string) = 
    let uri = new Uri(url)
    uri.Host.Equals(&amp;quot;lqdev.me&amp;quot;) || uri.Host.Equals(&amp;quot;www.luisquintanilla.me&amp;quot;) || uri.Host.Equals(&amp;quot;luisquintanilla.me&amp;quot;)

let isValid (url:string) (msg:HttpResponseMessage) = 
    let isMine = uriIsMine url
    isMine &amp;amp; msg.IsSuccessStatusCode

// Check URL is a valid resource
// Valid means, the URL is one of my domains and returns a non-400 or 500 HTML status code
let checkUrlValidResource (request:RequestVerificationResult) = 
    match request with 
    | Ok m -&amp;gt; 
        let res = 
            async {
                let! source,target = getFormContent(m)
                use client = new HttpClient()
                let reqMessage = new HttpRequestMessage(HttpMethod.Head, target)
                let! resp = client.SendAsync(reqMessage) |&amp;gt; Async.AwaitTask
                return isValid target resp
            } |&amp;gt; Async.RunSynchronously
        match res with 
        | true -&amp;gt; Ok m
        | false -&amp;gt; Error &amp;quot;Target is not a valid resource&amp;quot; 
    | Error s -&amp;gt; Error s

// Combine validation steps into single function
let validate = 
    checkProtocol &amp;gt;&amp;gt; checkUrlsSame &amp;gt;&amp;gt; checkUrlValidResource

// Test application
let buildSampleRequestMessages (content:IDictionary&amp;lt;string,string&amp;gt;) = 

    let reqMessage = new HttpRequestMessage()
    reqMessage.Content &amp;lt;- new FormUrlEncodedContent(content)

    let liftedReqMessage = Ok reqMessage
    liftedReqMessage

let sampleContent = [ 
    dict [
        (&amp;quot;source&amp;quot;,&amp;quot;http://lqdev.me&amp;quot;)
        (&amp;quot;target&amp;quot;,&amp;quot;http://lqdev.me&amp;quot;)
    ]
    dict [
        (&amp;quot;source&amp;quot;,&amp;quot;http://://lqdev.me&amp;quot;)
        (&amp;quot;target&amp;quot;,&amp;quot;protocol://lqdev.me&amp;quot;)
    ]    
    dict [
        (&amp;quot;source&amp;quot;,&amp;quot;http://lqdev.me&amp;quot;)
        (&amp;quot;target&amp;quot;,&amp;quot;http://github.com/lqdev&amp;quot;)
    ]
    dict [
        (&amp;quot;source&amp;quot;,&amp;quot;http://github.com/lqdev&amp;quot;)
        (&amp;quot;target&amp;quot;,&amp;quot;http://lqdev.me&amp;quot;)
    ]        
]

sampleContent
|&amp;gt; List.map(buildSampleRequestMessages)
|&amp;gt; List.map(validate)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Sample Output&lt;/h2&gt;
&lt;pre&gt;&lt;code class="language-text"&gt;[  
  Error &amp;quot;Urls are the same&amp;quot;; 
  Error &amp;quot;Target invalid protocol&amp;quot;;
  Error &amp;quot;Target is not a valid resource&amp;quot;;
  Ok
    Method: GET, RequestUri: '&amp;lt;null&amp;gt;', Version: 1.1, Content: System.Net.Http.FormUrlEncodedContent, Headers:
    {
        Content-Type: application/x-www-form-urlencoded
        Content-Length: 67
    }
    {
        Content = System.Net.Http.FormUrlEncodedContent;
        Headers = seq [];
        Method = GET;
        Options = seq [];
        Properties = seq [];
        RequestUri = null;
        Version = 1.1;
        VersionPolicy = RequestVersionOrLower;
    }
]
&lt;/code&gt;&lt;/pre&gt;
]]&gt;</description>
      <link>https://www.luisquintanilla.me/snippets/webmentions-request-verification</link>
      <guid>https://www.luisquintanilla.me/snippets/webmentions-request-verification</guid>
    </item>
    <item>
      <title>Webmentions Verification</title>
      <description>&lt;![CDATA[&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;Sample script that shows how to perform Webmention verification per &lt;a href="https://www.w3.org/TR/webmention/#webmention-verification"&gt;Webmentions specification&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;dotnet fsi webmention-verification.fsx
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Snippet&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;webmention-verification.fsx&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-fsharp"&gt;// https://www.w3.org/TR/webmention/#webmention-verification

#r &amp;quot;nuget:FSharp.Data&amp;quot;
#r &amp;quot;nuget: Microsoft.AspNetCore.WebUtilities, 2.2.0&amp;quot;

open System
open System.Net
open System.Net.Http
open System.Net.Http.Headers
open System.Collections.Generic
open Microsoft.AspNetCore.WebUtilities
open FSharp.Data

type WebmentionVerificationResult = 
    | TaggedMention of {| Replies: bool; Likes: bool; Reposts: bool|}
    | UntaggedMention
    | Error of string

let getFormContent (request:HttpRequestMessage) =
    async {
        let! content = request.Content.ReadAsStringAsync() |&amp;gt; Async.AwaitTask
        let query = QueryHelpers.ParseQuery(content)
        let source = query[&amp;quot;source&amp;quot;] |&amp;gt; Seq.head
        let target = query[&amp;quot;target&amp;quot;] |&amp;gt; Seq.head

        return source,target
    }

let cont =  
    dict [
        (&amp;quot;source&amp;quot;,&amp;quot;https://raw.githubusercontent.com/lqdev/fsadvent-2021-webmentions/main/reply.html&amp;quot;)
        (&amp;quot;target&amp;quot;,&amp;quot;https://webmention.rocks/test/1&amp;quot;)
    ]

let buildSampleRequestMessage (content:IDictionary&amp;lt;string,string&amp;gt;) = 

    let reqMessage = new HttpRequestMessage()
    reqMessage.Content &amp;lt;- new FormUrlEncodedContent(content)

    reqMessage

let req = buildSampleRequestMessage cont

// verification

let source,target = 
    req
    |&amp;gt; getFormContent
    |&amp;gt; Async.RunSynchronously

let getMentionUsingCssSelector (doc:HtmlDocument) (selector:string) (target:string) = 
    doc.CssSelect(selector)
    |&amp;gt; List.map(fun x -&amp;gt; x.AttributeValue(&amp;quot;href&amp;quot;))
    |&amp;gt; List.filter(fun x -&amp;gt; x = target)    

let hasMention (mentions:string list) = 
    mentions |&amp;gt; List.isEmpty |&amp;gt; not

let verifyWebmentions (source:string) (target:string)= 
    async {
        use client = new HttpClient()
        let reqMessage = new HttpRequestMessage(new HttpMethod(&amp;quot;Get&amp;quot;), source)
        reqMessage.Headers.Accept.Clear()
        
        // Only accept text/html content
        reqMessage.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(&amp;quot;text/html&amp;quot;))
        
        // Get document
        let! res = client.SendAsync(reqMessage) |&amp;gt; Async.AwaitTask
        
        // Verify webmention
        let webmentions = 
            match res.IsSuccessStatusCode with 
            | true -&amp;gt;
                // Get document contents
                let body = 
                    async {
                        return! res.Content.ReadAsStringAsync() |&amp;gt; Async.AwaitTask
                    } |&amp;gt; Async.RunSynchronously

                // Parse document
                let doc = HtmlDocument.Parse(body)

                // Get links tagged as replies using microformats
                let replies = 
                    getMentionUsingCssSelector doc &amp;quot;.u-in-reply-to&amp;quot; target

                // Get links tagged as likes using microformats
                let likes = 
                    getMentionUsingCssSelector doc &amp;quot;.u-in-like-of&amp;quot; target

                // Get links tagged as repost using microformats
                let shares = 
                    getMentionUsingCssSelector doc &amp;quot;.u-in-repost-of&amp;quot; target

                // Get untagged mentions
                let mentions = 
                    getMentionUsingCssSelector doc &amp;quot;a&amp;quot; target

                // Collect all tagged mentions
                let knownInteractions = 
                    [replies;likes;shares] 
                    |&amp;gt; List.collect(id)

                // Choose tagged mentions before untagged mentions
                match knownInteractions.IsEmpty,mentions.IsEmpty with 
                | true,true -&amp;gt; Error &amp;quot;Target not mentioned&amp;quot;
                | true,false | false,false -&amp;gt; 
                    TaggedMention 
                        {|
                            Replies = hasMention replies 
                            Likes = hasMention likes
                            Reposts = hasMention shares
                        |}
                | false,true -&amp;gt; UntaggedMention 

            | false -&amp;gt; 
                Error &amp;quot;Unable to get source&amp;quot;
        return webmentions            
    }

verifyWebmentions source target
|&amp;gt; Async.RunSynchronously
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Sample Output&lt;/h2&gt;
&lt;pre&gt;&lt;code class="language-text"&gt;Interactions { 
    Likes = false
    Replies = true
    Shares = false }
&lt;/code&gt;&lt;/pre&gt;
]]&gt;</description>
      <link>https://www.luisquintanilla.me/snippets/webmentions-verification</link>
      <guid>https://www.luisquintanilla.me/snippets/webmentions-verification</guid>
    </item>
    <item>
      <title>Winget Configuration</title>
      <description>&lt;![CDATA[&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;My Winget Configuration file&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;winget configure -f &amp;lt;FILENAME&amp;gt;.dsc
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Snippet&lt;/h2&gt;
&lt;pre&gt;&lt;code class="language-yaml"&gt;# yaml-language-server: $schema=https://aka.ms/configuration-dsc-schema/0.2
# Reference: https://github.com/microsoft/winget-create#building-the-client
# WinGet Configure file Generated By Dev Home.

properties:
  resources:
  - resource: Microsoft.Windows.Developer/DeveloperMode
    directives:
      description: Enable Developer Mode
      allowPrerelease: true
    settings:
      Ensure: Present  
  - resource: Microsoft.WinGet.DSC/WinGetPackage
    directives:
      description: Installing Microsoft.VisualStudio.2022.Community
      allowPrerelease: true
      securityContext: current
    settings:
      id: &amp;quot;Microsoft.VisualStudio.2022.Community&amp;quot;
      source: winget
    id: Microsoft.VisualStudio.2022.Community
  - resource: Microsoft.VisualStudio.DSC/VSComponents
    dependsOn:
      - Microsoft.VisualStudio.2022.Community
    directives:
      description: Install required VS workloads
      allowPrerelease: true
    settings:
      productId: Microsoft.VisualStudio.Product.Community
      channelId: VisualStudio.17.Release
      components:
        - Microsoft.VisualStudio.Workload.Azure
        - Microsoft.VisualStudio.Workload.NetWeb
  - resource: Microsoft.WinGet.DSC/WinGetPackage
    directives:
      description: Installing Microsoft.VisualStudioCode
      allowPrerelease: true
      securityContext: current
    settings:
      id: &amp;quot;Microsoft.VisualStudioCode&amp;quot;
      source: winget
    id: Microsoft.VisualStudioCode
  #   https://github.com/microsoft/winget-cli/discussions/3958
  # - resource: vscode/VSCodeExtension
  #   directives:
  #     description: Install Remote Development Extension
  #     allowPrerelease: true
  #   settings:
  #     Name: ms-vscode-remote.vscode-remote-extensionpack
  #     Ensure: Present
  # - resource: vscode/VSCodeExtension
  #   directives:
  #     description: Install YAML Extension
  #     allowPrerelease: true
  #   settings:
  #     Name: redhat.vscode-yaml
  #     Ensure: Present
  # - resource: vscode/VSCodeExtension
  #   directives:
  #     description: Install Ionide Extension
  #     allowPrerelease: true
  #   settings:
  #     Name: Ionide.Ionide-fsharp
  #     Ensure: Present
  # - resource: vscode/VSCodeExtension
  #   directives:
  #     description: Install C# Extension
  #     allowPrerelease: true
  #   settings:
  #     Name: ms-dotnettools.csdevkit
  #     Ensure: Present      
  - resource: Microsoft.WinGet.DSC/WinGetPackage
    directives:
      description: Installing Git.Git
      allowPrerelease: true
      securityContext: current
    settings:
      id: &amp;quot;Git.Git&amp;quot;
      source: winget
    id: Git.Git
  - resource: Microsoft.WinGet.DSC/WinGetPackage
    directives:
      description: Installing Microsoft.PowerShell
      allowPrerelease: true
      securityContext: current
    settings:
      id: &amp;quot;Microsoft.PowerShell&amp;quot;
      source: winget
    id: Microsoft.PowerShell
  - resource: Microsoft.WinGet.DSC/WinGetPackage
    directives:
      description: Installing Docker.DockerDesktop
      allowPrerelease: true
      securityContext: current
    settings:
      id: &amp;quot;Docker.DockerDesktop&amp;quot;
      source: winget
    id: Docker.DockerDesktop
  - resource: Microsoft.WinGet.DSC/WinGetPackage
    directives:
      description: Installing Debian.Debian
      allowPrerelease: true
      securityContext: current
    settings:
      id: &amp;quot;Debian.Debian&amp;quot;
      source: winget
    id: Debian.Debian
  - resource: Microsoft.WinGet.DSC/WinGetPackage
    directives:
      description: Installing Microsoft.DotNet.SDK.8
      allowPrerelease: true
      securityContext: current
    settings:
      id: &amp;quot;Microsoft.DotNet.SDK.8&amp;quot;
      source: winget
    id: Microsoft.DotNet.SDK.8
  - resource: Microsoft.WinGet.DSC/WinGetPackage
    directives:
      description: Installing Microsoft.DotNet.SDK.9
      allowPrerelease: true
      securityContext: current
    settings:
      id: &amp;quot;Microsoft.DotNet.SDK.9&amp;quot;
      source: winget
    id: Microsoft.DotNet.SDK.9
  - resource: Microsoft.WinGet.DSC/WinGetPackage
    directives:
      description: Installing OBSProject.OBSStudio
      allowPrerelease: true
      securityContext: current
    settings:
      id: &amp;quot;OBSProject.OBSStudio&amp;quot;
      source: winget
    id: OBSProject.OBSStudio
  - resource: Microsoft.WinGet.DSC/WinGetPackage
    directives:
      description: Installing Microsoft.WSL
      allowPrerelease: true
      securityContext: current
    settings:
      id: &amp;quot;Microsoft.WSL&amp;quot;
      source: winget
    id: Microsoft.WSL
  - resource: Microsoft.WinGet.DSC/WinGetPackage
    directives:
      description: Installing Ollama.Ollama
      allowPrerelease: true
      securityContext: current
    settings:
      id: &amp;quot;Ollama.Ollama&amp;quot;
      source: winget
    id: Ollama.Ollama
  - resource: Microsoft.WinGet.DSC/WinGetPackage
    directives:
      description: Installing Microsoft.WindowsTerminal
      allowPrerelease: false
      securityContext: current
    settings:
      id: &amp;quot;Microsoft.WindowsTerminal&amp;quot;
      source: winget
    id: Microsoft.WindowsTerminal
  - resource: Microsoft.WinGet.DSC/WinGetPackage
    directives:
      description: Installing Brave Browser
      allowPrerelease: true
      securityContext: current
    settings:
      id: &amp;quot;Brave.Brave&amp;quot;
      source: winget
    id: Brave.Brave    
  # https://github.com/microsoft/winget-pkgs/issues/155070
  # - resource: Microsoft.WinGet.DSC/WinGetPackage
  #   directives:
  #     description: Installing NordVPN
  #     allowPrerelease: true
  #     securityContext: current
  #   settings:
  #     id: &amp;quot;NordSecurity.NordVPN&amp;quot;
  #     source: winget
  #   id: NordSecurity.NordVPN
  - resource: Microsoft.WinGet.DSC/WinGetPackage
    directives:
      description: Installing Thunderbird
      allowPrerelease: true
      securityContext: current
    settings:
      id: &amp;quot;Mozilla.Thunderbird&amp;quot;
      source: winget
    id: Mozilla.Thunderbird  
  - resource: Microsoft.WinGet.DSC/WinGetPackage
    directives:
      description: Installing ProtonMail
      allowPrerelease: true
      securityContext: current
    settings:
      id: &amp;quot;Proton.ProtonMail&amp;quot;
      source: winget
    id: Proton.ProtonMail     
  - resource: Microsoft.WinGet.DSC/WinGetPackage
    directives:
      description: Installing Bitwarden
      allowPrerelease: true
      securityContext: current
    settings:
      id: &amp;quot;Bitwarden.Bitwarden&amp;quot;
      source: winget
    id: Bitwarden.Bitwarden    
  - resource: Microsoft.WinGet.DSC/WinGetPackage
    directives:
      description: Installing VLC
      allowPrerelease: true
      securityContext: current
    settings:
      id: &amp;quot;VideoLAN.VLC&amp;quot;
      source: winget
    id: VideoLAN.VLC        
  configurationVersion: 0.2.0
&lt;/code&gt;&lt;/pre&gt;
]]&gt;</description>
      <link>https://www.luisquintanilla.me/snippets/winget-config</link>
      <guid>https://www.luisquintanilla.me/snippets/winget-config</guid>
    </item>
    <item>
      <title>Alternative Frontends</title>
      <description>&lt;![CDATA[&lt;h2&gt;Overview&lt;/h2&gt;
&lt;p&gt;Alternative frontends are third-party frontends that display information from web services like social media. These frontends are generally open-source and privacy-respecting.&lt;/p&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://nitter.net/"&gt;Nitter&lt;/a&gt; (Twitter)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://yewtu.be"&gt;Invidious&lt;/a&gt; (YouTube)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://teddit.net/"&gt;Teddit&lt;/a&gt; (Reddit)&lt;/li&gt;
&lt;/ul&gt;
]]&gt;</description>
      <link>https://www.luisquintanilla.me/wiki/alternative-frontends</link>
      <guid>https://www.luisquintanilla.me/wiki/alternative-frontends</guid>
    </item>
    <item>
      <title>Commonplace Book</title>
      <description>&lt;![CDATA[&lt;h2&gt;Overview&lt;/h2&gt;
&lt;p&gt;A way to store notes and knowledge discovered and learned. This can include quotes from books, articles, courses, and any other sources of information.&lt;/p&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Commonplace_book"&gt;Commonplace Book&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://evernote.com/blog/how-to-create-commonplace-with-evernote/"&gt;Taking Note: How To Create a Commonplace with Evernote&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/read-smart/what-is-a-commonplace-book-db392bda730c"&gt;What is a commonplace book?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stevenberlinjohnson.com/the-glass-box-and-the-commonplace-book-639b16c4f3bb"&gt;The Glass Box and The Commonplace Book&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
]]&gt;</description>
      <link>https://www.luisquintanilla.me/wiki/commonplace-book</link>
      <guid>https://www.luisquintanilla.me/wiki/commonplace-book</guid>
    </item>
    <item>
      <title>Configure opacity - Manjaro</title>
      <description>&lt;![CDATA[&lt;h2&gt;Overview&lt;/h2&gt;
&lt;p&gt;This article shows how to configure background opacity for the kitty terminal emulator using picom and i3.&lt;/p&gt;
&lt;p&gt;By defaut, i3 doesn't support composting. Programs like picom add support for it.&lt;/p&gt;
&lt;p&gt;In addition, terminal emulators like kitty are hardware accelerated which means there's opportunities to offload from the CPU and save power.&lt;/p&gt;
&lt;h2&gt;Install &amp;amp; configure picom&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Install picom&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;sudo pacman -S picom
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Move default configuration file to &lt;em&gt;~/.config/picom/picom.conf&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Define opacity rule:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;opacity-rule = [&amp;quot;90:class_g = 'kitty'&amp;quot;];
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Save changes&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Install &amp;amp; configure kitty&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Install picom&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;sudo pacman -S kitty
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Move default configuration file to &lt;em&gt;~/.config/kitty/kitty.conf&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Set background opacity:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;background_opacity 0.90
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Save changes&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Configure i3&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Open your i3 configuration and add the following line to it:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;exec_always picom
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Restart i3.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://wiki.archlinux.org/title/Picom#Opacity"&gt;Picom&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wiki.archlinux.org/title/Kitty"&gt;Kitty&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/i3wm/comments/g62qy0/kitty_terminal_emulator_transparency_not_working/"&gt;Kitty emulator not working - Reddit&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
]]&gt;</description>
      <link>https://www.luisquintanilla.me/wiki/configure-opacity-manjaro</link>
      <guid>https://www.luisquintanilla.me/wiki/configure-opacity-manjaro</guid>
    </item>
    <item>
      <title>DevContainer configurations</title>
      <description>&lt;![CDATA[&lt;h2&gt;Overview&lt;/h2&gt;
&lt;p&gt;A collection of DevContainer configurations&lt;/p&gt;
&lt;h2&gt;Base Debian Image&lt;/h2&gt;
&lt;pre&gt;&lt;code class="language-json"&gt;{
    &amp;quot;name&amp;quot;: &amp;quot;lqdev.me Base Debian DevContainer&amp;quot;,
    &amp;quot;image&amp;quot;: &amp;quot;mcr.microsoft.com/devcontainers/base:debian&amp;quot;,
    &amp;quot;features&amp;quot;: {
        &amp;quot;ghcr.io/devcontainers/features/git:1&amp;quot;: {},
        &amp;quot;ghcr.io/devcontainers/features/docker-in-docker:2&amp;quot;: {}
    },
    &amp;quot;customizations&amp;quot;: {
        &amp;quot;vscode&amp;quot;: {
            &amp;quot;extensions&amp;quot;: [
                &amp;quot;ms-vscode-remote.vscode-remote-extensionpack&amp;quot;,
                &amp;quot;ms-azuretools.vscode-docker&amp;quot;,
                &amp;quot;GitHub.copilot&amp;quot;,
                &amp;quot;GitHub.copilot-chat&amp;quot;,
                &amp;quot;saoudrizwan.claude-dev&amp;quot;
            ]
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Python&lt;/h2&gt;
&lt;pre&gt;&lt;code class="language-json"&gt;{
    &amp;quot;name&amp;quot;: &amp;quot;lqdev.me Python DevContainer&amp;quot;,
    &amp;quot;image&amp;quot;: &amp;quot;mcr.microsoft.com/devcontainers/base:debian&amp;quot;,
    &amp;quot;features&amp;quot;: {
        &amp;quot;ghcr.io/devcontainers/features/git:1&amp;quot;: {},
        &amp;quot;ghcr.io/devcontainers/features/docker-in-docker:2&amp;quot;: {},
        &amp;quot;ghcr.io/devcontainers/features/python:1&amp;quot;: {
            &amp;quot;version&amp;quot;: &amp;quot;3.11&amp;quot;
        },
        &amp;quot;ghcr.io/va-h/devcontainers-features/uv:1&amp;quot;: {}
    },
    &amp;quot;customizations&amp;quot;: {
        &amp;quot;vscode&amp;quot;: {
            &amp;quot;extensions&amp;quot;: [
                &amp;quot;ms-vscode-remote.vscode-remote-extensionpack&amp;quot;,
                &amp;quot;ms-azuretools.vscode-docker&amp;quot;,
                &amp;quot;ms-python.python&amp;quot;,
                &amp;quot;GitHub.copilot&amp;quot;,
                &amp;quot;GitHub.copilot-chat&amp;quot;,
                &amp;quot;saoudrizwan.claude-dev&amp;quot;                
            ]
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Python (GPU)&lt;/h2&gt;
&lt;pre&gt;&lt;code class="language-json"&gt;{
    &amp;quot;name&amp;quot;: &amp;quot;lqdev.me Python (GPU) DevContainer&amp;quot;,
    &amp;quot;image&amp;quot;: &amp;quot;mcr.microsoft.com/devcontainers/base:debian&amp;quot;,
    &amp;quot;features&amp;quot;: {
        &amp;quot;ghcr.io/devcontainers/features/git:1&amp;quot;: {},
        &amp;quot;ghcr.io/devcontainers/features/docker-in-docker:2&amp;quot;: {},
        &amp;quot;ghcr.io/devcontainers/features/python:1&amp;quot;: {
            &amp;quot;version&amp;quot;: &amp;quot;3.11&amp;quot;
        },
        &amp;quot;ghcr.io/devcontainers/features/nvidia-cuda:1&amp;quot;: {},
        &amp;quot;ghcr.io/va-h/devcontainers-features/uv:1&amp;quot;: {}
    },
    &amp;quot;customizations&amp;quot;: {
        &amp;quot;vscode&amp;quot;: {
            &amp;quot;extensions&amp;quot;: [
                &amp;quot;ms-vscode-remote.vscode-remote-extensionpack&amp;quot;,
                &amp;quot;ms-azuretools.vscode-docker&amp;quot;,
                &amp;quot;ms-python.python&amp;quot;,
                &amp;quot;GitHub.copilot&amp;quot;,
                &amp;quot;GitHub.copilot-chat&amp;quot;,
                &amp;quot;saoudrizwan.claude-dev&amp;quot;                
            ]
        }
    },
    &amp;quot;runArgs&amp;quot;: [
        &amp;quot;--gpus&amp;quot;, 
        &amp;quot;all&amp;quot;
    ]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;.NET&lt;/h2&gt;
&lt;pre&gt;&lt;code class="language-json"&gt;{
    &amp;quot;name&amp;quot;: &amp;quot;lqdev.me .NET DevContainer&amp;quot;,
    &amp;quot;image&amp;quot;: &amp;quot;mcr.microsoft.com/devcontainers/base:debian&amp;quot;,
    &amp;quot;features&amp;quot;: {
        &amp;quot;ghcr.io/devcontainers/features/git:1&amp;quot;: {},
        &amp;quot;ghcr.io/devcontainers/features/docker-in-docker:2&amp;quot;: {},
        &amp;quot;ghcr.io/devcontainers/features/dotnet:2&amp;quot;: {
            &amp;quot;version&amp;quot;: &amp;quot;9.0&amp;quot;
        }
    },
    &amp;quot;customizations&amp;quot;: {
        &amp;quot;vscode&amp;quot;: {
            &amp;quot;extensions&amp;quot;: [
                &amp;quot;ms-vscode-remote.vscode-remote-extensionpack&amp;quot;,
                &amp;quot;ms-azuretools.vscode-docker&amp;quot;,
                &amp;quot;ms-dotnettools.csharp&amp;quot;,
                &amp;quot;Ionide.Ionide-fsharp&amp;quot;,
                &amp;quot;GitHub.copilot&amp;quot;,
                &amp;quot;GitHub.copilot-chat&amp;quot;,
                &amp;quot;saoudrizwan.claude-dev&amp;quot;,
                &amp;quot;ms-dotnettools.csdevkit&amp;quot;                                
            ]
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;.NET (GPU)&lt;/h2&gt;
&lt;pre&gt;&lt;code class="language-json"&gt;{
    &amp;quot;name&amp;quot;: &amp;quot;lqdev.me .NET (GPU) DevContainer&amp;quot;,
    &amp;quot;image&amp;quot;: &amp;quot;mcr.microsoft.com/devcontainers/base:debian&amp;quot;,
    &amp;quot;features&amp;quot;: {
        &amp;quot;ghcr.io/devcontainers/features/git:1&amp;quot;: {},
        &amp;quot;ghcr.io/devcontainers/features/docker-in-docker:2&amp;quot;: {},
        &amp;quot;ghcr.io/devcontainers/features/dotnet:2&amp;quot;: {
            &amp;quot;version&amp;quot;: &amp;quot;9.0&amp;quot;
        },
        &amp;quot;ghcr.io/devcontainers/features/nvidia-cuda:1&amp;quot;: {}
    },
    &amp;quot;customizations&amp;quot;: {
        &amp;quot;vscode&amp;quot;: {
            &amp;quot;extensions&amp;quot;: [
                &amp;quot;ms-vscode-remote.vscode-remote-extensionpack&amp;quot;,
                &amp;quot;ms-azuretools.vscode-docker&amp;quot;,
                &amp;quot;ms-dotnettools.csharp&amp;quot;,
                &amp;quot;Ionide.Ionide-fsharp&amp;quot;,
                &amp;quot;GitHub.copilot&amp;quot;,
                &amp;quot;GitHub.copilot-chat&amp;quot;,
                &amp;quot;saoudrizwan.claude-dev&amp;quot;,
                &amp;quot;ms-dotnettools.csdevkit&amp;quot;                
            ]
        }
    },
    &amp;quot;runArgs&amp;quot;: [
        &amp;quot;--gpus&amp;quot;, 
        &amp;quot;all&amp;quot;
    ]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Python and .NET&lt;/h2&gt;
&lt;pre&gt;&lt;code class="language-json"&gt;{
    &amp;quot;name&amp;quot;: &amp;quot;lqdev.me Python and .NET DevContainer&amp;quot;,
    &amp;quot;image&amp;quot;: &amp;quot;mcr.microsoft.com/devcontainers/base:debian&amp;quot;,
    &amp;quot;features&amp;quot;: {
        &amp;quot;ghcr.io/devcontainers/features/git:1&amp;quot;: {},
        &amp;quot;ghcr.io/devcontainers/features/docker-in-docker:2&amp;quot;: {},
        &amp;quot;ghcr.io/devcontainers/features/python:1&amp;quot;: {
            &amp;quot;version&amp;quot;: &amp;quot;3.11&amp;quot;
        },        
        &amp;quot;ghcr.io/devcontainers/features/dotnet:2&amp;quot;: {
            &amp;quot;version&amp;quot;: &amp;quot;9.0&amp;quot;
        },
        &amp;quot;ghcr.io/va-h/devcontainers-features/uv:1&amp;quot;: {}
    },
    &amp;quot;customizations&amp;quot;: {
        &amp;quot;vscode&amp;quot;: {
            &amp;quot;extensions&amp;quot;: [
                &amp;quot;ms-vscode-remote.vscode-remote-extensionpack&amp;quot;,
                &amp;quot;ms-azuretools.vscode-docker&amp;quot;,
                &amp;quot;ms-python.python&amp;quot;,
                &amp;quot;ms-dotnettools.csharp&amp;quot;,
                &amp;quot;Ionide.Ionide-fsharp&amp;quot;,
                &amp;quot;GitHub.copilot&amp;quot;,
                &amp;quot;GitHub.copilot-chat&amp;quot;,
                &amp;quot;saoudrizwan.claude-dev&amp;quot;,
                &amp;quot;ms-dotnettools.csdevkit&amp;quot;                
            ]
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Python and .NET (GPU)&lt;/h2&gt;
&lt;pre&gt;&lt;code class="language-json"&gt;{
    &amp;quot;name&amp;quot;: &amp;quot;lqdev.me Python and .NET (GPU) DevContainer&amp;quot;,
    &amp;quot;image&amp;quot;: &amp;quot;mcr.microsoft.com/devcontainers/base:debian&amp;quot;,
    &amp;quot;features&amp;quot;: {
        &amp;quot;ghcr.io/devcontainers/features/git:1&amp;quot;: {},
        &amp;quot;ghcr.io/devcontainers/features/docker-in-docker:2&amp;quot;: {},
        &amp;quot;ghcr.io/devcontainers/features/python:1&amp;quot;: {
            &amp;quot;version&amp;quot;: &amp;quot;3.11&amp;quot;
        },        
        &amp;quot;ghcr.io/devcontainers/features/dotnet:2&amp;quot;: {
            &amp;quot;version&amp;quot;: &amp;quot;9.0&amp;quot;
        },
        &amp;quot;ghcr.io/devcontainers/features/nvidia-cuda:1&amp;quot;: {},
        &amp;quot;ghcr.io/va-h/devcontainers-features/uv:1&amp;quot;: {}
    },
    &amp;quot;customizations&amp;quot;: {
        &amp;quot;vscode&amp;quot;: {
            &amp;quot;extensions&amp;quot;: [
                &amp;quot;ms-vscode-remote.vscode-remote-extensionpack&amp;quot;,
                &amp;quot;ms-azuretools.vscode-docker&amp;quot;,
                &amp;quot;ms-python.python&amp;quot;,
                &amp;quot;ms-dotnettools.csharp&amp;quot;,
                &amp;quot;Ionide.Ionide-fsharp&amp;quot;,
                &amp;quot;GitHub.copilot&amp;quot;,
                &amp;quot;GitHub.copilot-chat&amp;quot;,
                &amp;quot;saoudrizwan.claude-dev&amp;quot;,
                &amp;quot;ms-dotnettools.csdevkit&amp;quot;               
            ]
        }
    },
    &amp;quot;runArgs&amp;quot;: [
        &amp;quot;--gpus&amp;quot;, 
        &amp;quot;all&amp;quot;
    ]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Additional Resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://code.visualstudio.com/docs/devcontainers/containers"&gt;Developing inside a DevContainer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/devcontainers/images"&gt;Pre-built DevContainer images&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/devcontainers/features"&gt;Pre-built DevContainer features&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.github.com/en/codespaces/overview"&gt;GitHub Codespaces overview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/vscode"&gt;VS Code Extensions Marketplace&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
]]&gt;</description>
      <link>https://www.luisquintanilla.me/wiki/devcontainers-configurations</link>
      <guid>https://www.luisquintanilla.me/wiki/devcontainers-configurations</guid>
    </item>
    <item>
      <title>GitHub Actions for Azure</title>
      <description>&lt;![CDATA[&lt;h2&gt;Overview&lt;/h2&gt;
&lt;p&gt;How to use GitHub Actions with Azure&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://learn.microsoft.com/azure/developer/github/github-actions"&gt;Documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Authenticate to Azure from GitHub&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://learn.microsoft.com/azure/developer/github/connect-from-azure?tabs=azure-cli%2Clinux"&gt;Documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This workflow is useful when using the &lt;a href="https://github.com/azure/login?tab=readme-ov-file#github-actions-for-deploying-to-azure"&gt;az login action in GitHub Actions&lt;/a&gt;.&lt;/p&gt;
]]&gt;</description>
      <link>https://www.luisquintanilla.me/wiki/github-actions-azure</link>
      <guid>https://www.luisquintanilla.me/wiki/github-actions-azure</guid>
    </item>
    <item>
      <title>Intel GPU Tools - Linux</title>
      <description>&lt;![CDATA[&lt;h2&gt;Overview&lt;/h2&gt;
&lt;p&gt;This article talks about Intel GPU tools for Linux to monitor usage of integrated Intel GPUs&lt;/p&gt;
&lt;h2&gt;When to use&lt;/h2&gt;
&lt;p&gt;The scenarios in which I've used this tool is to confirm that my browser is leveraging hardware acceleration. By default, Firefox doesn't enable hardware acceleration on Linux. As a result, everything runs on the CPU causing unnecessary load and faster battery drain. To alleviate that, you can enable hardware acceleration and make sure that the GPU is being used by running tools like &lt;code&gt;intel_gpu_top&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Install&lt;/h2&gt;
&lt;p&gt;To install the tools, run the following command&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;sudo pacman -S intel-gpu-tools
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Run intel_gpu_top&lt;/h2&gt;
&lt;p&gt;To view GPU activity, run the following command:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;sudo intel_gpu_top
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will display process graphs of GPU usage.&lt;/p&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://wiki.archlinux.org/title/Intel_graphics"&gt;Intel Grapics - Arch Wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://archlinux.org/packages/community/x86_64/intel-gpu-tools/"&gt;Intel GPU Tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://support.mozilla.org/en-US/kb/upgrade-graphics-drivers-use-hardware-acceleration"&gt;Firefox hardware acceleration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://support.mozilla.org/en-US/kb/performance-settings"&gt;Firefox Performance Settings&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
]]&gt;</description>
      <link>https://www.luisquintanilla.me/wiki/intel-gpu-tools</link>
      <guid>https://www.luisquintanilla.me/wiki/intel-gpu-tools</guid>
    </item>
    <item>
      <title>Linux ls Commands</title>
      <description>&lt;![CDATA[&lt;h2&gt;Overview&lt;/h2&gt;
&lt;p&gt;An overview of &lt;code&gt;ls&lt;/code&gt; Linux commands&lt;/p&gt;
&lt;h2&gt;ls&lt;/h2&gt;
&lt;p&gt;Display information about a directory and its contents&lt;/p&gt;
&lt;h2&gt;lscpu&lt;/h2&gt;
&lt;p&gt;Display information about the CPU architecture&lt;/p&gt;
&lt;h2&gt;lsgpu&lt;/h2&gt;
&lt;p&gt;Display information about GPU architecture&lt;/p&gt;
&lt;h2&gt;lsblk&lt;/h2&gt;
&lt;p&gt;Display information about block devices&lt;/p&gt;
&lt;h2&gt;lsmem&lt;/h2&gt;
&lt;p&gt;List ranges of available memory with their online status.&lt;/p&gt;
&lt;h2&gt;lspci&lt;/h2&gt;
&lt;p&gt;Display information about PCI devices&lt;/p&gt;
&lt;h2&gt;lsusb&lt;/h2&gt;
&lt;p&gt;Display information about USB devices&lt;/p&gt;
]]&gt;</description>
      <link>https://www.luisquintanilla.me/wiki/linux-ls-commands</link>
      <guid>https://www.luisquintanilla.me/wiki/linux-ls-commands</guid>
    </item>
    <item>
      <title>Machine Learning</title>
      <description>&lt;![CDATA[&lt;h2&gt;Overview&lt;/h2&gt;
&lt;p&gt;Machine learning is a subset of artificial intelligence.&lt;/p&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="/resources/wiki/ml-frameworks"&gt;Frameworks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://landscape.lfai.foundation/"&gt;LF AI &amp;amp; Data Foundation Interactive Landscape&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
]]&gt;</description>
      <link>https://www.luisquintanilla.me/wiki/machine-learning</link>
      <guid>https://www.luisquintanilla.me/wiki/machine-learning</guid>
    </item>
  </channel>
</rss>